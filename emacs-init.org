#+STARTUP: overview num indent show2levels logdone
#+TODO: TODO(t) DONE
#+TODO: VERBOSE-ON VERBOSE-OFF |
#+TODO: BASIC SUPER |
#+TODO: TAB-INSERT TAB-SELECT |


因为维护工作量巨大，暂停emacs配置文件搭建。下一步工作：
- 查看emacs最新版本changelog，更新配置
- 目前orgmode，eshell，字体，补全框架（vertico、embark、consult相关）基本可用
- 编程相关不可用
- 根据todo标志完善相关问题
- 需要行操作（类似vim的复制、删除等）代码或包
- emacs-chinese(github)
- 自动中英文切换，与之相关的光标颜色切换

* *READ THIS FIRST*
:PROPERTIES:
:UNNUMBERED: t
:END:

1. This is a init setting for =Emacs 28.2=.

2. *DO THIS FIRST*: Setting the tangle target directory at [[*/buffer local variables (must be the last)/][here]].

3. set $HOME environment variable where you want to put your .emacs.d,
   or emacs will use ~\AppData\Roaming\... as default.

4. Type M-x all-the-icons-install-fonts RET and follow the instructions
   to get a better UI looking.

5. Install =Symbola= font via
   https://dn-works.com/wp-content/uploads/2020/UFAS-Fonts/Symbola.zip

6. This init file uses =JetBrainsMono NF= & =Sarasa Term SC= fonts,
   install them first.

7. There are special SEQ_TODOs for choosing tangling code from the list
   of branches under 1) 2) etc. Use S-<left><right> on headline to switch.

8. Type C-c C-v t to tangle emacs init files.


* TODO /read from doomemacs for hack codes when version 3 released/
尤其是lisp/doom.el和lisp/doom-start.el有许多好的启动加速方法。

* TODO /try dump if stable/
可参考spacemacs的实现（core/core-dumper.el: spacemacs/dump-emacs）

* early-init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!
#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC
** init file debug :comment:when:stable:
Enable debugging on startup, should be commented out when stable.
#+begin_src emacs-lisp
  (setq init-file-debug t
        debug-on-error t)
        #+end_src

** /true init time/
#+begin_src emacs-lisp
  (defconst emacs-start-time (current-time))
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "True init time is %s."
                       (float-time (time-since emacs-start-time)))))
#+end_src

** GC stuff [from tenon emacs]
For speed up the startup, please do NOT forget reset it to default
after Emacs after-init-hook, or it may cause freezes.
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'emacs-startup-hook #'(lambda () (setq gc-cons-threshold 800000)))
#+end_src

** COMMENT [from centaur emacs] :uncomment:when:stable:
Suppress flashing at startup
#+begin_src emacs-lisp
  (setq-default inhibit-redisplay t
                inhibit-message t)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq-default inhibit-redisplay nil
                            inhibit-message nil)
              (redisplay)))
#+end_src

** [from tenon emacs]
#+begin_src emacs-lisp
  ;; Prevent unwanted runtime compilation for native-comp users
  (setq native-comp-deferred-compilation nil)

  ;; Package initialize occurs automatically, before `user-init-file' is loaded
  ;; but after `early-init-file'. If you want to handle package initialization,
  ;; you can prevent Emacs from doing it early by uncomment next line!
  (setq package-enable-at-startup nil)

  ;; Do not resize the frame at this early stage.
  (setq frame-inhibit-implied-resize t)

  ;; System default coding
  ;; (set-language-environment 'utf-8)
#+end_src

** [from rational emacs]
#+begin_src emacs-lisp
  ;; Remove some unneeded UI elements (the user can turn back on anything they wish)
  (setq inhibit-startup-message t
        default-frame-alist
        '((tool-bar-lines . 0)
          (menu-bar-lines . 0)
          (vertical-scroll-bars)
          (horizontal-scroll-bars)
          (fullscreen . fullboth)))

  ;; Loads a nice blue theme, avoids the white screen flash on startup.
  (load-theme 'wombat t)
#+end_src

** [from lambda emacs]
#+begin_src emacs-lisp
    ;;;; Variable Binding Depth
  ;; This variable controls the number of lisp bindings that can exists at a time.
  ;; We should make it fairly large for modern machines.
  ;; https://www.reddit.com/r/emacs/comments/9jp9zt/anyone_know_what_variable_binding_depth_exceeds/
  (customize-set-variable 'max-specpdl-size 13000)
#+end_src

* TODO /FIXME: multi-times of dired-flagged face warning/

* init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!
#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC

** COMMENT native compile
#+begin_src emacs-lisp
  (when (and (>= emacs-major-version 28)
             (fboundp 'native-comp-available-p)
             (native-comp-available-p))
    (setq native-comp-async-report-warnings-errors nil)
    (setq package-native-compile t)
    (add-to-list 'native-comp-eln-load-path
                 (expand-file-name "eln-cache" user-emacs-directory)))
#+end_src

** COMMENT run server
Allow access from EMACSCLIENT_TRAMP
#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'server-mode)
  ;; (add-hook 'after-init-hook
  ;; (lambda () (server-mode)))
#+end_src

** w32 settings
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (setq w32-get-true-file-attributes nil   ; decrease file IO workload
          w32-pipe-read-delay 0              ; faster IPC
          w32-pipe-buffer-size (* 64 1024)))
#+end_src

** encoding
#+begin_src emacs-lisp
  ;; UTF-8 as the default coding system
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  ;; Explicitly set the prefered coding systems to avoid annoying prompt
  ;; from emacs (especially on Microsoft Windows)
  (set-language-environment 'chinese-gbk)
  (prefer-coding-system 'utf-8-auto)
#+end_src

** built-in settings
*** custom-set-variables
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(auto-window-vscroll nil)
   '(abbrev-suggest t)
   '(bidi-paragraph-direction 'left-to-right)
   '(bookmark-save-flag 1)
   '(completion-cycle-threshold 3)
   '(create-lockfiles nil)
   '(describe-bindings-outline t)
   ;; '(delete-by-moving-to-trash t)
   '(dired-dwim-target t)
   ;; '(dired-guess-shell-alist-user
   ;;   '(("\\.pdf\\'" "open")
   ;;     ("\\.docx\\'" "open")
   ;;     ("\\.\\(?:djvu\\|eps\\)\\'" "open")
   ;;     ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" "open")
   ;;     ("\\.\\(?:xcf\\)\\'" "open")
   ;;     ("\\.csv\\'" "open")
   ;;     ("\\.tex\\'" "open")
   ;;     ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|ogv\\)\\(?:\\.part\\)?\\'"
   ;;      "open")
   ;;     ("\\.\\(?:mp3\\|flac\\)\\'" "open")
   ;;     ("\\.html?\\'" "open")
   ;;     ("\\.md\\'" "open")))
   '(dired-listing-switches "-alh")
   '(dired-recursive-copies 'always)
   '(dired-recursive-deletes 'always)
   ;; '(fast-but-imprecise-scrolling t)
   '(ffap-machine-p-known 'reject)
   '(find-file-visit-truename t)
   '(help-enable-symbol-autoload t)
   '(help-window-select t)
   '(indicate-buffer-boundaries 'left)
   ;; '(inhibit-default-init t)
   ;; '(initial-scratch-message nil)
   '(isearch-allow-motion t)
   '(isearch-lazy-count t)
   ;; '(isearch-yank-on-move 'shift)
   '(kill-do-not-save-duplicates t)
   ;; '(mode-line-compact 'long)
   '(mouse-autoselect-window t)
   '(mouse-wheel-progressive-speed nil)
   '(next-error-message-highlight 'keep)
   '(read-process-output-max (* 64 1024))
   '(read-quoted-char-radix 16)
   ;; '(redisplay-skip-fontification-on-input t)
   '(ring-bell-function 'ignore)
   '(save-interprogram-paste-before-kill t)
   '(scroll-margin 3)
   '(scroll-conservatively 101)
   '(sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
   '(sentence-end-double-space nil)
   '(set-mark-command-repeat-pop t)
   '(shift-select-mode 'permanent)
   '(show-trailing-whitespace t)
   ;; '(split-width-threshold 120)
   '(tab-bar-new-tab-choice 'bookmark-bmenu-get-buffer)
   '(use-dialog-box nil)
   '(use-file-dialog nil)
   '(use-short-answers t)
   '(visible-bell t)
   '(wdired-allow-to-change-permissions t)
   '(what-cursor-show-names t)
   '(word-wrap-by-category t)
   '(x-stretch-cursor t)
   '(y-or-n-p-use-read-key t))
#+END_SRC
*** make parent directory
#+begin_src emacs-lisp
  (defun inn/make-parent-directory ()
    "Make sure the directory of `buffer-file-name' exists."
    (make-directory (file-name-directory buffer-file-name) t))

  (add-hook 'find-file-not-found-functions #'inn/make-parent-directory)
#+end_src
*** TODO modeline显示frame名称，或在minibuffer中显示

*** TODO 测试eldoc-documentation-strategy设置的最佳方法，或使用其他方式（如lsp-mode）

*** TODO 尝试使用etags-xref-prefer-current-file选项

*** TODO some settings
ediff-split-window-function 'split-window-horizontally
ediff-window-setup-function 'ediff-setup-windows-plain

*** TODO eww settings (engines for example)

** face settings
*** built-in face settings
Using custom-set-faces mechanism. Look nice in doom-badger theme.
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(highlight ((t (:background "SteelBlue4" :foreground "snow"))))
   '(trailing-whitespace ((t (:background "gray0")))))
#+END_SRC

*** TODO default & CJK font face settings [test for chinese & symbol fonts]
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono NF 12")
  (when (display-graphic-p)
    (setq face-font-rescale-alist `(("Sarasa Term SC" . 1)))
    (set-fontset-font t '(#x4e00 . #x9fff) "Sarasa Term SC"))
#+END_SRC

Backup settings.
#+begin_example emacs-lisp
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
            (set-fontset-font (frame-parameter nil 'font) charset
                              (font-spec :family "Sarasa Term SC" :size 24)))
#+end_example

** key bindings
*** built-in function key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<M-f1>") #'restart-emacs)
  (global-set-key (kbd "C-x k") #'kill-current-buffer)
  (global-set-key (kbd "C-M-<backspace>") #'backward-kill-sexp)
  ;; (global-set-key (kbd "C-x C-1") #'delete-windows-on)
  (global-set-key (kbd "C-x C-d") #'dired)
  (global-set-key (kbd "C-h C-k") #'describe-keymap)
  (global-set-key (kbd "M-o") #'other-window)
  (global-set-key (kbd "M-F") #'forward-to-word)
  (global-set-key (kbd "M-B") #'backward-to-word)
  (global-set-key (kbd "C-x v p") #'vc-push)
  (global-set-key (kbd "C-h K") #'describe-keymap)
  (global-set-key (kbd "M-Z") #'zap-to-char)
  (global-set-key (kbd "M-z") #'zap-up-to-char)
  (global-set-key (kbd "M-s M-f") #'project-find-file)
  (global-set-key (kbd "C-x C-f") #'find-file)
  (global-set-key (kbd "M-s f") #'find-lisp-find-dired)
  (global-set-key (kbd "C-'") #'goto-last-change)
  (global-set-key (kbd "C-\"") #'goto-last-change-reverse)
  (global-set-key [remap just-one-space] #'cycle-spacing)
  (global-set-key (kbd "C-`") #'next-buffer)
  (global-set-key (kbd "C-<tab>") #'previous-buffer)
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-c") 'capitalize-dwim)

  (defalias 'list-buffers 'ibuffer)
#+END_SRC

*** open org init file
using :noweb to call ORG-INIT-FILE library.
#+BEGIN_SRC emacs-lisp :noweb yes
  (defun inn/open-org-init-file()
    (interactive)
    (find-file "<<ORG-INIT-FILE()>>"))
  (global-set-key (kbd "M-<f2>") 'inn/open-org-init-file)
#+END_SRC

*** echo date time & battery status
#+begin_src emacs-lisp
  (defun inn/echo-time-battery()
    (interactive)
    (setq battery-string
          (let* ((data (and battery-status-function
                            (functionp battery-status-function)
                            (funcall battery-status-function)))
                 (state (or (cdr (assoc 66 data)) "ERR"))
                 (percentage (car (read-from-string (or (cdr (assq 112 data)) "ERR"))))
                 (valid-percentage? (and (numberp percentage)
                                         (>= percentage 0)
                                         (<= percentage 100)))
                 (icon (if valid-percentage? state "error"))
                 (text (if valid-percentage? (format "%d%%%%" percentage) "")))
            (concat " " text " battery-" icon)))
    (setq time-string
          (propertize (format-time-string "[%F %R]")
                      'face 'custom-state))
    (message (concat time-string battery-string)))
  (global-set-key (kbd "<f12>") 'inn/echo-time-battery)
#+end_src

*** open newline like vim
#+begin_src emacs-lisp
  (defun inn/newline-blow-point ()
    (interactive)
    (move-end-of-line 1)
    (newline-and-indent))
  (defun inn/newline-above-point ()
    (interactive)
    (move-beginning-of-line 1)
    (open-line 1))
  (global-set-key (kbd "C-S-o") #'inn/newline-blow-point)
  (global-set-key (kbd "C-o") #'inn/newline-above-point)
#+end_src

*** kill back to indentation
#+begin_src emacs-lisp
  (defun inn/kill-back-to-indentation ()
    "Kill from point back to the first non-whitespace character on the line."
    (interactive)
    (let ((prev-pos (point)))
      (back-to-indentation)
      (kill-region (point) prev-pos)))
  (global-set-key (kbd "C-S-k") #'inn/kill-back-to-indentation)
#+end_src

*** TODO COMMENT narrow or widen dwim
找不到bind-key*，真的需要这个功能吗？
From lambda-emacs.
#+begin_src emacs-lisp
  (defun inn/narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
    Dwim means: region, org-src-block, org-subtree, markdown
    subtree, or defun, whichever applies first. Narrowing to
    org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer
    is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          (t (narrow-to-defun))))

  ;;bind this in the narrow keymap
  (require 'bind-key)
  (bind-key* "C-x n n" #'inn/narrow-or-widen-dwim narrow-map)
#+end_src

*** COMMENT isearch bindings
From purcel's.
#+begin_src emacs-lisp
  (defun inn/isearch-exit-other-end ()
    "Exit isearch, but at the other end of the search string.
  This is useful when followed by an immediate kill."
    (interactive)
    (isearch-exit)
    (goto-char isearch-other-end))

  (define-key isearch-mode-map (kbd "C-<return>" 'inn/isearch-exit-other-end)
#+end_src

*** TODO COMMENT web search region
考虑加入embark菜单
还有search-at-point功能
#+begin_src emacs-lisp
  (defun prelude-search (query-url prompt)
    "Open the search url constructed with the QUERY-URL.
  PROMPT sets the `read-string prompt."
    (browse-url
     (concat query-url
             (url-hexify-string
              (if mark-active
                  (buffer-substring (region-beginning) (region-end))
                (read-string prompt))))))

  (defmacro prelude-install-search-engine (search-engine-name search-engine-url search-engine-prompt)
    "Given some information regarding a search engine, install the interactive command to search through them"
    `(defun ,(intern (format "prelude-%s" search-engine-name)) ()
       ,(format "Search %s with a query or region if any." search-engine-name)
       (interactive)
       (prelude-search ,search-engine-url ,search-engine-prompt)))

  (prelude-install-search-engine "google"     "http://www.google.com/search?q="              "Google: ")
  (prelude-install-search-engine "youtube"    "http://www.youtube.com/results?search_query=" "Search YouTube: ")
  (prelude-install-search-engine "github"     "https://github.com/search?q="                 "Search GitHub: ")
  (prelude-install-search-engine "duckduckgo" "https://duckduckgo.com/?t=lm&q="              "Search DuckDuckGo: ")
#+end_src

** package settings
*** package initialize & load-path
#+BEGIN_SRC emacs-lisp
  (let ((default-directory (expand-file-name "elpa" user-emacs-directory)))
    (normal-top-level-add-subdirs-to-load-path))

  (setq package-archives '(("gnu"   . "http://mirrors.bfsu.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.bfsu.edu.cn/elpa/melpa/")
                           ("Org" . "http://mirrors.bfsu.edu.cn/elpa/org/")
                           ("nongnu" . "http://mirrors.bfsu.edu.cn/elpa/nongnu/")))

  (setq package-check-signature nil)
  (require 'package)
  (unless (bound-and-true-p package--initialized)
    (package-initialize))
;    (package-initialize 'noactivate)
 ;   (message "package-initialize run"))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

*** VERBOSE-OFF use-package
1) ~verbose-on with error catch & verbose~::
   #+HEADER: :tangle (if (string= "VERBOSE-ON" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (eval-and-compile
       ;; (add-to-list 'load-path "")
       (require 'use-package)
       (setq use-package-always-ensure t
             use-package-always-defer t
             use-package-minimum-reported-time 0
             use-package-enable-imenu-support t
             use-package-verbose 'debug))
   #+end_src

2) ~verbose-off quiet & fast~::
   #+HEADER: :tangle (if (string= "VERBOSE-OFF" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (eval-when-compile
       ;; (add-to-list 'load-path "")
       (require 'use-package)
       (setq use-package-always-ensure t
             use-package-always-defer t
             use-package-expand-minimally t))
   #+end_src
   
*** built-in packages
Don't forget to use ~:ensure nil~ code for built-in packages.
**** globally enabled modes
#+begin_src emacs-lisp
  ;; (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'after-init-hook 'column-number-mode)
  (add-hook 'after-init-hook 'delete-selection-mode)
  (add-hook 'after-init-hook 'display-battery-mode)
;  (add-hook 'after-init-hook 'dired-async-mode)
  ;; (add-hook 'after-init-hook 'electric-quote-mode)
  (add-hook 'after-init-hook 'electric-pair-mode)
  (add-hook 'after-init-hook 'global-goto-address-mode)
  (add-hook 'after-init-hook 'global-hl-line-mode)
  ;; (add-hook 'after-init-hook 'global-so-long-mode)
  (add-hook 'after-init-hook 'global-visual-line-mode)
  ;; (add-hook 'after-init-hook 'ibuffer-auto-mode)
  (add-hook 'after-init-hook 'line-number-mode)
  (add-hook 'after-init-hook 'save-place-mode)
  (add-hook 'after-init-hook 'size-indication-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
  ;; (add-hook 'ielm-mode-hook #'eldoc-mode)
#+end_src

**** turn off default modes
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
  (tooltip-mode -1)
#+end_src

**** time
#+begin_src emacs-lisp
  ;(setq display-time-string-forms
   ;     '((propertize (format-time-string "[%F %R]")
    ;                  'face 'dired-flagged)))
  (setq display-time-24hr-format t)
  (add-hook 'after-init-hook 'display-time-mode)
#+end_src

**** smooth scroll
***** pixel scroll
Makes mouse-wheel scroll a line smoothly.
#+begin_src emacs-lisp
  (use-package pixel-scroll
    :ensure nil
    :hook (after-init . pixel-scroll-mode)
    :custom
    (pixel-scroll-precision-mode t)
    (pixel-scroll-precision-interpolate-page t))
#+end_src

***** TODO COMMENT [试试这个，可行就删除上面]good scroll
Implements smooth scrolling by pixel lines. It attempts to improve
upon `pixel-scroll-mode' by adding variable speed.
#+begin_src emacs-lisp
  (if (fboundp 'pixel-scroll-precision-mode)
      (pixel-scroll-precision-mode t)
    (use-package good-scroll
      :hook (after-init . good-scroll-mode)
      :bind (([remap next] . good-scroll-up-full-screen)
             ([remap prior] . good-scroll-down-full-screen))))
#+end_src

**** COMMENT autorevert
#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (add-hook 'after-init-hook 'global-auto-revert-mode)
#+end_src

**** auto-save & backup
Centaur's settings.
#+begin_src emacs-lisp
  (use-package files
    :ensure nil
    :hook (after-init . auto-save-mode)
    :init
    ;; backups
    (setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups"))))
    ;; (let ((backup-dir (expand-file-name "backups" user-emacs-directory)))
    ;;   ;; Move backup file to `./backups'
    ;;   (setq backup-directory-alist `(("." . ,backup-dir)))
    ;;   ;; Makesure backup directory exist
    ;;   (when (not (file-exists-p backup-dir))
    ;;     (make-directory backup-dir t)))

    ;; auto save
    (setq auto-save-list-file-prefix
          (concat user-emacs-directory "auto-save-list/.saves-"))
    ;; (let ((auto-save-files-dir (concat user-emacs-directory "auto-save-files/")))
    ;;   (setq auto-save-file-name-transforms
    ;;         `((".*" ,auto-save-files-dir t)))
    ;;   (when (not (file-exists-p auto-save-files-dir))
    ;;     (make-directory auto-save-files-dir t)))
    ;; auto-save every file visiting buffer
    ;; see https://emacs.stackexchange.com/q/7729/11934
    (setq-default
     auto-save-default t
     ;; auto-save-timeout 30              ; number of seconds idle time before auto-save (default: 30)
     ;; auto-save-interval 300            ; number of keystrokes between auto-saves (default: 300)
     ;; auto-save-visited-mode t          ; auto save in place other than in auto-save files
     delete-auto-save-files t
     ;; kill-buffer-delete-auto-save-files t
     create-lockfiles nil)
    :config
    (setq
     ;; make-backup-files t               ; backup of a file the first time it is saved.
     ;; backup-by-copying t               ; don't clobber symlinks
     ;; version-control t                 ; version numbers for backup files
     delete-old-versions t             ; delete excess backup files silently
     kept-old-versions 0               ; oldest versions to keep when a new numbered backup is made
     kept-new-versions 3               ; newest versions to keep when a new numbered backup is made
     ;; vc-make-backup-files t            ; backup versioned files, which Emacs does not do by default
     )

    ;; put <full auto save function here>
    )
#+end_src

***** full auto save function
#+begin_example emacs-lisp
  (defun lem-full-auto-save ()
    (interactive)
    (save-excursion
      (dolist (buf (buffer-list))
        (set-buffer buf)
        (if (and (buffer-file-name) (buffer-modified-p))
            (basic-save-buffer)))))

  (add-hook 'auto-save-hook 'lem-full-auto-save)

  ;; Save all buffers after idle time
  (run-with-idle-timer 5 t (lambda () (lem-full-auto-save)))
  ;; Save on exit from insert state
  ;; (add-hook 'meow-insert-exit-hook #'lem-full-auto-save)
#+end_example

***** TODO backup-walker

**** desktop
Centaur's settings.
#+begin_src emacs-lisp
  (use-package desktop
    :ensure nil
    :bind (("<f5>" . desktop-save)
           ("<f6>" . desktop-read))
    :init
    (setq desktop-dirname             (concat user-emacs-directory "desktops")
          ;; desktop-base-file-name      "emacs.desktop"
          ;; desktop-base-lock-name      "lock"
          desktop-path                (list desktop-dirname)
          ;; desktop-save                'ask-if-new
          ;; desktop-files-not-to-save   (concat "^$" ".*magit$")
          desktop-restore-eager 4
          ;; desktop-load-locked-desktop t
          )
    ;; (when (not (file-exists-p desktop-dirname))
    ;;   (make-directory desktop-dirname t))
    ;; (setq desktop-buffers-not-to-save
    ;;       (concat "\\("
    ;;               "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
    ;;               "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
    ;;               "\\)$"))
    ;; (desktop-save-mode 0)
    )
#+end_src

**** COMMENT time-stamp
#+begin_src emacs-lisp
  (use-package time-stamp
    :ensure nil
    :commands (time-stamp lem-time-stamp)
    :custom
    ;; (time-stamp-active t)          ; do enable time-stamps
    ;; (time-stamp-line-limit 10)     ; check first 10 buffer lines for Time-stamp:
    (time-stamp-format "Last modified on %Y-%02m%02d-%02H:%02M:%02S") ; date format
    :hook (before-save . time-stamp) ; update when saving
    :init
    (defun lem-time-stamp ()
      (interactive)
      (insert (concat  "Time-stamp: <"(format-time-string "%Y-%02m%02d-%02H:%02M:%02S")">"))))
#+end_src

**** COMMENT whitespace
#+begin_src emacs-lisp
  (setq whitespace-action
        '(report-on-bogus cleanup auto-cleanup))
  (whitespace-mode)
#+end_src

**** cua
#+begin_src emacs-lisp
  (use-package cua
    :ensure nil
    :custom
    (cua-enable-cua-keys nil)
    (cua-enable-modeline-indications t)
    :bind ("C-M-<return>" . cua-rectangle-mark-mode))
#+end_src

**** TODO recentf
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :bind ("C-x f" . recentf-open-files))
#+end_src

Spacemacs settings
#+begin_example emacs-lisp
(use-package recentf
    :defer (spacemacs/defer)
    :commands (recentf-save-list)
    :init
    (progn
      (spacemacs|require-when-dumping 'recentf)
      (when (spacemacs/defer)
        (add-hook 'find-file-hook (lambda () (unless recentf-mode
                                               (recentf-mode)
                                               (recentf-track-opened-file)))))
      (setq recentf-save-file (concat spacemacs-cache-directory "recentf")
            recentf-max-saved-items 1000
            recentf-auto-cleanup 'never
            recentf-auto-save-timer (run-with-idle-timer 600 t
                                                         'recentf-save-list)))
    :config
    (progn
      (add-to-list 'recentf-exclude
                   (recentf-expand-file-name spacemacs-cache-directory))
      (add-to-list 'recentf-exclude (recentf-expand-file-name package-user-dir))
      (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
      (when custom-file
        (add-to-list 'recentf-exclude (recentf-expand-file-name custom-file)))))
#+end_example

centaur settings
#+BEGIN_EXAMPLE emacs-lisp
(use-package recentf
  :ensure nil
  :bind (("C-x C-r" . recentf-open-files))
  :hook (after-init . recentf-mode)
  :init (setq recentf-max-saved-items 300
              recentf-exclude
              '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
                "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"
                (lambda (file) (file-in-directory-p file package-user-dir))))
  :config
  (push (expand-file-name recentf-save-file) recentf-exclude)
  (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))
#+END_EXAMPLE

**** winner
#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :hook (after-init . winner-mode)
    :bind (("C-x C-/" . winner-undo)
           ("C-x C-?" . winner-redo))
    :custom (winner-boring-buffers '("*Completions*"
                                     "*Compile-Log*"
                                     "*inferior-lisp*"
                                     "*Fuzzy Completions*"
                                     "*Apropos*"
                                     "*Help*"
                                     "*cvs*"
                                     "*Buffer List*"
                                     "*Ibuffer*"
                                     "*esh command on file*")))
#+end_src

**** TODO COMMENT ibuffer
需要清理其他地方的配置
#+begin_src emacs-lisp
    ;;;; iBuffer
  ;; A better list of buffers
  (use-package ibuffer
    :ensure nil
    :commands (ibuffer)
    :custom
    (ibuffer-default-sorting-mode 'major-mode)
    (ibuffer-filter-group-name-face 'outline-1)
    (ibuffer-movement-cycle t)
    (ibuffer-old-time 12)
    (ibuffer-modified-char ?*)
    (ibuffer-read-only-char ?R)
    (ibuffer-marked-char ?➤)
    (ibuffer-locked-char ?L)
    (ibuffer-deletion-char ?🗙)
    (ibuffer-use-header-line nil)
    :config
    ;; Fix function for displaying groups
    (defun ibuffer-insert-filter-group (name display-name filter-string format bmarklist)
      (add-text-properties
       (point)
       (progn
         (insert display-name)
         (point))
       `(ibuffer-filter-group-name
         ,name
         font-lock-face ,ibuffer-filter-group-name-face
         keymap ,ibuffer-mode-filter-group-map
         mouse-face highlight
         help-echo ,(let ((echo '(if tooltip-mode
                                     "mouse-1: toggle marks in this group\nmouse-2: hide/show this filtering group"
                                   "mouse-1: toggle marks  mouse-2: hide/show")))
                      (if (> (length filter-string) 0)
                          `(concat ,filter-string
                                   (if tooltip-mode "\n" " ")
                                   ,echo)
                        echo))))
      (insert "\n")
      (when bmarklist
        (put-text-property
         (point)
         (progn
           (dolist (entry bmarklist)
             (ibuffer-insert-buffer-line (car entry) (cdr entry) format))
           (point))
         'ibuffer-filter-group
         name))))
#+end_src

#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer)
    :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))
    :config
    ;; Display icons for buffers
    (use-package all-the-icons-ibuffer
      :hook (ibuffer-mode . all-the-icons-ibuffer-mode)
      :init (setq all-the-icons-ibuffer-icon centaur-icon))

    (with-eval-after-load 'counsel
      (with-no-warnings
        (defun my-ibuffer-find-file ()
          (interactive)
          (let ((default-directory (let ((buf (ibuffer-current-buffer)))
                                     (if (buffer-live-p buf)
                                         (with-current-buffer buf
                                           default-directory)
                                       default-directory))))
            (counsel-find-file default-directory)))
        (advice-add #'ibuffer-find-file :override #'my-ibuffer-find-file))))
#+end_src

;; Group ibuffer's list by project root

**** TODO COMMENT reveal
#+begin_src emacs-lisp
  ;;;; Reveal Mode
  ;; Toggle uncloaking of invisible text near point, including folded org headlines (Reveal mode).
  (use-package reveal
    :ensure nil
    :defer 1
    :config
    (setq reveal-auto-hide nil)
    (global-reveal-mode))
#+end_src

**** TODO COMMENT dired
还需要清理前列关于dired和wdired的相关配置，使用M-s l搜索
#+begin_src emacs-lisp
  ;; Directory operations
  (use-package dired
    :ensure nil
    :bind (:map dired-mode-map
                ("C-c C-p" . wdired-change-to-wdired-mode))
    :config
    ;; Always delete and copy recursively
    (setq dired-recursive-deletes 'always
          dired-recursive-copies 'always)

    (when sys/macp
      ;; Suppress the warning: `ls does not support --dired'.
      (setq dired-use-ls-dired nil)

      (when (executable-find "gls")
        ;; Use GNU ls as `gls' from `coreutils' if available.
        (setq insert-directory-program "gls")))

    (when (or (and sys/macp (executable-find "gls"))
              (and (not sys/macp) (executable-find "ls")))
      ;; Using `insert-directory-program'
      (setq ls-lisp-use-insert-directory-program t)

      ;; Show directory first
      (setq dired-listing-switches "-alh --group-directories-first")

      ;; Quick sort dired buffers via hydra
      (use-package dired-quick-sort
        :bind (:map dired-mode-map
                    ("S" . hydra-dired-quick-sort/body))))

    ;; Show git info in dired
    (use-package dired-git-info
      :bind (:map dired-mode-map
                  (")" . dired-git-info-mode)))

    ;; Allow rsync from dired buffers
    (use-package dired-rsync
      :bind (:map dired-mode-map
                  ("C-c C-r" . dired-rsync)))

    ;; Colorful dired
    (use-package diredfl
      :hook (dired-mode . diredfl-mode))

    ;; Shows icons
    (use-package all-the-icons-dired
      :diminish
      :hook (dired-mode . (lambda ()
                            (when (icon-displayable-p)
                              (all-the-icons-dired-mode))))
      :init (setq all-the-icons-dired-monochrome nil)
      :config
      (with-no-warnings
        (defun my-all-the-icons-dired--refresh ()
          "Display the icons of files in a dired buffer."
          (all-the-icons-dired--remove-all-overlays)
          ;; NOTE: don't display icons it too many items
          (if (<= (count-lines (point-min) (point-max)) 1000)
              (save-excursion
                (goto-char (point-min))
                (while (not (eobp))
                  (when (dired-move-to-filename nil)
                    (let ((case-fold-search t))
                      (when-let* ((file (dired-get-filename 'relative 'noerror))
                                  (icon (if (file-directory-p file)
                                            (all-the-icons-icon-for-dir
                                             file
                                             :face 'all-the-icons-dired-dir-face
                                             :height 0.9
                                             :v-adjust all-the-icons-dired-v-adjust)
                                          (apply #'all-the-icons-icon-for-file
                                                 file
                                                 (append
                                                  '(:height 0.9)
                                                  `(:v-adjust ,all-the-icons-dired-v-adjust)
                                                  (when all-the-icons-dired-monochrome
                                                    `(:face ,(face-at-point))))))))
                        (if (member file '("." ".."))
                            (all-the-icons-dired--add-overlay (dired-move-to-filename) "   \t")
                          (all-the-icons-dired--add-overlay (dired-move-to-filename) (concat " " icon "\t"))))))
                  (forward-line 1)))
            (message "Not display icons because of too many items.")))
        (advice-add #'all-the-icons-dired--refresh :override #'my-all-the-icons-dired--refresh)))

    ;; Extra Dired functionality
    (use-package dired-aux :ensure nil)
    (use-package dired-x
      :ensure nil
      :demand t
      :config
      (let ((cmd (cond (sys/mac-x-p "open")
                       (sys/linux-x-p "xdg-open")
                       (sys/win32p "start")
                       (t ""))))
        (setq dired-guess-shell-alist-user
              `(("\\.pdf\\'" ,cmd)
                ("\\.docx\\'" ,cmd)
                ("\\.\\(?:djvu\\|eps\\)\\'" ,cmd)
                ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" ,cmd)
                ("\\.\\(?:xcf\\)\\'" ,cmd)
                ("\\.csv\\'" ,cmd)
                ("\\.tex\\'" ,cmd)
                ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" ,cmd)
                ("\\.\\(?:mp3\\|flac\\)\\'" ,cmd)
                ("\\.html?\\'" ,cmd)
                ("\\.md\\'" ,cmd))))

      (setq dired-omit-files
            (concat dired-omit-files
                    "\\|^.DS_Store$\\|^.projectile$\\|^.git*\\|^.svn$\\|^.vscode$\\|\\.js\\.meta$\\|\\.meta$\\|\\.elc$\\|^.emacs.*"))))

  ;; `find-dired' alternative using `fd'
  (when (executable-find "fd")
    (use-package fd-dired))

  (provide 'init-dired)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-dired.el ends here
#+end_src

**** TODO quickurl

**** TODO COMMENT ediff [why so ugly? how to use correcty]
#+begin_src emacs-lisp
  (use-package ediff
    :defer t
    :init
    (progn
      ;; first we set some sane defaults
      (setq-default
       ediff-window-setup-function 'ediff-setup-windows-plain
       ;; emacs is evil and decrees that vertical shall henceforth be horizontal
       ediff-split-window-function 'split-window-horizontally
       ediff-merge-split-window-function 'split-window-horizontally)
      ;; show org ediffs unfolded
      (require 'outline)
      (add-hook 'ediff-prepare-buffer-hook #'show-all)
      ;; restore window layout when done
      (add-hook 'ediff-quit-hook #'winner-undo)))
#+end_src

*** SYSTEM
**** gcmh
Garbage Collector Magic Hack
#+begin_src emacs-lisp
  (use-package gcmh
    :hook (emacs-startup . gcmh-mode)
    :custom
    (gcmh-idle-delay 'auto)
    (gcmh-auto-idle-delay-factor 10)
    (gcmh-high-cons-threshold #x1000000)) ; 16MB
#+end_src

**** restart-emacs
Provides a simple command to restart Emacs from within Emacs.
#+begin_src emacs-lisp
  ;; Versions of Emacs lower than 29 don't have a restart command, so add that.
  (use-package restart-emacs
    :when (version< emacs-version "29")
    :commands restart-emacs)
#+end_src

*** APPEARANCES
**** all-the-icons (the package)
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

***** COMMENT /Centaur's config (only example)/
#+begin_example emacs-lisp
  ;; NOTE: Must run `M-x all-the-icons-install-fonts', and install fonts manually on Windows
  (when centaur-icon
    (use-package all-the-icons
      :custom (all-the-icons-scale-factor 1.1)
      :init (unless (or sys/win32p
                        (daemonp)
                        (font-installed-p "all-the-icons"))
              (centaur-install-fonts))
      :config
      ;; Support more icons
      (let ((extension-icon-alist
             '(("bat"  all-the-icons-alltheicon "terminal" :face all-the-icons-lsilver)
               ("cmd"  all-the-icons-alltheicon "terminal" :face all-the-icons-lsilver)
               ("conf" all-the-icons-octicon "settings"    :v-adjust 0.0 :face all-the-icons-yellow)
               ("eln"  all-the-icons-octicon "file-binary" :v-adjust 0.0 :face all-the-icons-dsilver)
               ("epub" all-the-icons-faicon "book"         :height 1.0 :v-adjust -0.1 :face all-the-icons-green)
               ("exe"  all-the-icons-octicon "file-binary" :v-adjust 0.0 :face all-the-icons-dsilver)
               ("make" all-the-icons-fileicon "gnu"        :face all-the-icons-dorange)
               ("rss"  all-the-icons-octicon "rss"         :height 1.1 :v-adjust 0.0 :face all-the-icons-lorange)
               ("toml" all-the-icons-octicon "settings"    :v-adjust 0.0 :face all-the-icons-yellow)
               ("tsx"  all-the-icons-fileicon "tsx"        :height 1.0 :v-adjust -0.1 :face all-the-icons-cyan-alt)
               ("xpm"  all-the-icons-octicon "file-media"  :v-adjust 0.0 :face all-the-icons-dgreen))))
        (dolist (icon extension-icon-alist)
          (add-to-list 'all-the-icons-extension-icon-alist icon)))

      (let ((regexp-icon-alist
             '(("\\.[bB][iI][nN]$"               all-the-icons-octicon "file-binary" :v-adjust 0.0 :face all-the-icons-yellow)
               ("^config$"                       all-the-icons-octicon "settings"    :v-adjust 0.0 :face all-the-icons-dorange)
               ("\\.\\(ba\\|z\\)shrc$"           all-the-icons-alltheicon "script"   :height 0.9 :face all-the-icons-dpink)
               ("\\.\\(bash\\|zsh\\)*_?profile$" all-the-icons-alltheicon "script"   :height 0.9 :face all-the-icons-dred)
               ("\\.\\(ba\\|z\\)sh_history$"     all-the-icons-alltheicon "script"   :height 0.9 :face all-the-icons-dsilver)
               ("\\.zshenv$"                     all-the-icons-alltheicon "script"   :height 0.9 :face all-the-icons-dred)
               ("Cask\\'"                        all-the-icons-fileicon "elisp"      :height 1.0 :v-adjust -0.2 :face all-the-icons-blue)
               ("NEWS$"                          all-the-icons-faicon "newspaper-o"  :height 0.9 :v-adjust -0.2)
               ("^Rakefile$"                     all-the-icons-alltheicon "ruby-alt" :face all-the-icons-red))))
        (dolist (icon regexp-icon-alist)
          (add-to-list 'all-the-icons-regexp-icon-alist icon)))

      (let ((mode-icon-alist
             '((xwidget-webkit-mode           all-the-icons-faicon "chrome"          :v-adjust -0.1 :face all-the-icons-blue)
               (bongo-playlist-mode           all-the-icons-material "queue_music"   :height 1.2 :face all-the-icons-green)
               (bongo-library-mode            all-the-icons-material "library_music" :height 1.1 :face all-the-icons-green)
               (simple-mpc-mode               all-the-icons-faicon "music"           :v-adjust -0.1 :face all-the-icons-green)
               (gnus-group-mode               all-the-icons-fileicon "gnu"           :face all-the-icons-silver)
               (gnus-summary-mode             all-the-icons-octicon "inbox"          :height 1.0 :v-adjust 0.0 :face all-the-icons-orange)
               (gnus-article-mode             all-the-icons-octicon "mail"           :height 1.1 :v-adjust 0.0 :face all-the-icons-lblue)
               (message-mode                  all-the-icons-octicon "mail"           :height 1.1 :v-adjust 0.0 :face all-the-icons-lblue)
               (diff-mode                     all-the-icons-octicon "git-compare"    :v-adjust 0.0 :face all-the-icons-lred)
               (flycheck-error-list-mode      all-the-icons-octicon "checklist"      :height 1.1 :v-adjust 0.0 :face all-the-icons-lred)
               (newsticker-mode               all-the-icons-faicon "rss-square"      :v-adjust -0.1 :face all-the-icons-orange)
               (newsticker-treeview-mode      all-the-icons-faicon "rss-square"      :v-adjust -0.1 :face all-the-icons-orange)
               (newsticker-treeview-list-mode all-the-icons-octicon "rss"            :height 1.1 :v-adjust 0.0 :face all-the-icons-orange)
               (newsticker-treeview-item-mode all-the-icons-octicon "rss"            :height 1.1 :v-adjust 0.0 :face all-the-icons-lorange)
               (conf-mode                     all-the-icons-octicon "settings"       :v-adjust 0.0 :face all-the-icons-yellow)
               (conf-space-mode               all-the-icons-octicon "settings"       :v-adjust 0.0 :face all-the-icons-yellow)
               (gitconfig-mode                all-the-icons-octicon "settings"       :v-adjust 0.0 :face all-the-icons-dorange)
               (forge-topic-mode              all-the-icons-alltheicon "git"         :face all-the-icons-blue)
               (help-mode                     all-the-icons-faicon "info-circle"     :height 1.1 :v-adjust -0.1 :face all-the-icons-purple)
               (helpful-mode                  all-the-icons-faicon "info-circle"     :height 1.1 :v-adjust -0.1 :face all-the-icons-purple)
               (Info-mode                     all-the-icons-faicon "info-circle"     :height 1.1 :v-adjust -0.1)
               (cask-mode                     all-the-icons-fileicon "elisp"         :height 1.0 :v-adjust -0.2 :face all-the-icons-blue)
               (ein:notebooklist-mode         all-the-icons-faicon "book"            :face all-the-icons-lorange)
               (ein:notebook-mode             all-the-icons-fileicon "jupyter"       :height 1.2 :face all-the-icons-orange)
               (ein:notebook-multilang-mode   all-the-icons-fileicon "jupyter"       :height 1.2 :face all-the-icons-dorange)
               (nov-mode                      all-the-icons-faicon "book"            :height 1.0 :v-adjust -0.1 :face all-the-icons-green)
               (gfm-mode                      all-the-icons-octicon "markdown"       :face all-the-icons-lblue)
               (osx-dictionary-mode           all-the-icons-material "library_books" :face all-the-icons-lblue)
               (youdao-dictionary-mode        all-the-icons-material "library_books" :face all-the-icons-lblue)
               (fanyi-mode                    all-the-icons-material "library_books" :face all-the-icons-lblue))))
        (dolist (icon mode-icon-alist)
          (add-to-list 'all-the-icons-mode-icon-alist icon)))))
#+end_example

***** COMMENT all-the-icons-completion
#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (all-the-icons marginalia)
    :hook (markdown-mode . all-the-icons-completion-marginalia-setup))
#+end_src

***** COMMENT all-the-icons-dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

***** COMMENT all-the-icons-ibuffer
#+begin_src emacs-lisp
  (use-package all-the-icons-ibuffer
    :after all-the-icons
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
#+end_src

**** theme
After code is a list of good looking themes, use one of them.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :init
    (load-theme 'doom-badger t)
    (doom-themes-org-config))
#+END_SRC

***** good doom-themes list
- doom-badger
- doom-gruvbox
- doom-material-dark
- doom-monokai-machine
- doom-monokai-octagon
- doom-monokai-spectrum
- doom-moonlight
- doom-nord
- doom-oceanic-next
- doom-old-hope
- doom-wilmersdorf

***** doom-themes config example
#+BEGIN_EXAMPLE emacs-lisp
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_EXAMPLE

**** modeline
Modeline derived from DOOM emacs.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-time-icon nil)
    (doom-modeline-unicode-fallback t)
    ;; (doom-modeline-github t)
    (doom-modeline-modal-icon nil)
    (doom-modeline-display-misc-in-all-mode-lines nil)
    (doom-modeline-enable-word-count t)
    (doom-modeline-continuous-word-count-modes nil))
#+END_SRC

***** /doom-modeline official config (example)/
#+begin_example emacs-lisp
;; If non-nil, cause imenu to see `doom-modeline' declarations.
;; This is done by adjusting `lisp-imenu-generic-expression' to
;; include support for finding `doom-modeline-def-*' forms.
;; Must be set before loading doom-modeline.
(setq doom-modeline-support-imenu t)

;; How tall the mode-line should be. It's only respected in GUI.
;; If the actual char height is larger, it respects the actual height.
(setq doom-modeline-height 25)

;; How wide the mode-line bar should be. It's only respected in GUI.
(setq doom-modeline-bar-width 4)

;; Whether to use hud instead of default bar. It's only respected in GUI.
(setq doom-modeline-hud nil)

;; The limit of the window width.
;; If `window-width' is smaller than the limit, some information won't be
;; displayed. It can be an integer or a float number. `nil' means no limit."
(setq doom-modeline-window-width-limit 85)

;; How to detect the project root.
;; nil means to use `default-directory'.
;; The project management packages have some issues on detecting project root.
;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
;; to hanle sub-projects.
;; You can specify one if you encounter the issue.
(setq doom-modeline-project-detection 'auto)

;; Determines the style used by `doom-modeline-buffer-file-name'.
;;
;; Given ~/Projects/FOSS/emacs/lisp/comint.el
;;   auto => emacs/l/comint.el (in a project) or comint.el
;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
;;   truncate-with-project => emacs/l/comint.el
;;   truncate-except-project => ~/P/F/emacs/l/comint.el
;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
;;   truncate-all => ~/P/F/e/l/comint.el
;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
;;   relative-from-project => emacs/lisp/comint.el
;;   relative-to-project => lisp/comint.el
;;   file-name => comint.el
;;   buffer-name => comint.el<2> (uniquify buffer name)
;;
;; If you are experiencing the laggy issue, especially while editing remote files
;; with tramp, please try `file-name' style.
;; Please refer to https://github.com/bbatsov/projectile/issues/657.
(setq doom-modeline-buffer-file-name-style 'auto)

;; Whether display icons in the mode-line.
;; While using the server mode in GUI, should set the value explicitly.
(setq doom-modeline-icon t)

;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode'.
;; It respects `all-the-icons-color-icons'.
(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
(setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
(setq doom-modeline-buffer-modification-icon t)

;; Whether display the time icon. It respects variable `doom-modeline-icon'.
(setq doom-modeline-time-icon t)

;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
(setq doom-modeline-unicode-fallback nil)

;; Whether display the buffer name.
(setq doom-modeline-buffer-name t)

;; Whether display the minor modes in the mode-line.
(setq doom-modeline-minor-modes nil)

;; If non-nil, a word count will be added to the selection-info modeline segment.
(setq doom-modeline-enable-word-count nil)

;; Major modes in which to display word count continuously.
;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
;; remove the modes from `doom-modeline-continuous-word-count-modes'.
(setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

;; Whether display the buffer encoding.
(setq doom-modeline-buffer-encoding t)

;; Whether display the indentation information.
(setq doom-modeline-indent-info nil)

;; If non-nil, only display one number for checker information if applicable.
(setq doom-modeline-checker-simple-format t)

;; The maximum number displayed for notifications.
(setq doom-modeline-number-limit 99)

;; The maximum displayed length of the branch name of version control.
(setq doom-modeline-vcs-max-length 12)

;; Whether display the workspace name. Non-nil to display in the mode-line.
(setq doom-modeline-workspace-name t)

;; Whether display the perspective name. Non-nil to display in the mode-line.
(setq doom-modeline-persp-name t)

;; If non nil the default perspective name is displayed in the mode-line.
(setq doom-modeline-display-default-persp-name nil)

;; If non nil the perspective name is displayed alongside a folder icon.
(setq doom-modeline-persp-icon t)

;; Whether display the `lsp' state. Non-nil to display in the mode-line.
(setq doom-modeline-lsp t)

;; Whether display the GitHub notifications. It requires `ghub' package.
(setq doom-modeline-github nil)

;; The interval of checking GitHub.
(setq doom-modeline-github-interval (* 30 60))

;; Whether display the modal state.
;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
(setq doom-modeline-modal t)

;; Whether display the modal state icon.
;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
(setq doom-modeline-modal-icon t)

;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
(setq doom-modeline-mu4e nil)
;; also enable the start of mu4e-alert
(mu4e-alert-enable-mode-line-display)

;; Whether display the gnus notifications.
(setq doom-modeline-gnus t)

;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
(setq doom-modeline-gnus-timer 2)

;; Wheter groups should be excludede when gnus automatically being updated.
(setq doom-modeline-gnus-excluded-groups '("dummy.group"))

;; Whether display the IRC notifications. It requires `circe' or `erc' package.
(setq doom-modeline-irc t)

;; Function to stylize the irc buffer names.
(setq doom-modeline-irc-stylize 'identity)

;; Whether display the time. It respects `display-time-mode'.
(setq doom-modeline-time t)

;; Whether display the misc segment on all mode lines.
;; If nil, display only if the mode line is active.
(setq doom-modeline-display-misc-in-all-mode-lines t)

;; Whether display the environment version.
(setq doom-modeline-env-version t)
;; Or for individual languages
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
(setq doom-modeline-env-ruby-executable "ruby")
(setq doom-modeline-env-perl-executable "perl")
(setq doom-modeline-env-go-executable "go")
(setq doom-modeline-env-elixir-executable "iex")
(setq doom-modeline-env-rust-executable "rustc")

;; What to display as the version while a new one is being loaded
(setq doom-modeline-env-load-string "...")

;; By default, almost all segments are displayed only in the active window. To
;; display such segments in all windows, specify e.g.
(setq doom-modeline-always-visible-segments '(mu4e irc))

;; Hooks that run before/after the modeline version string is updated
(setq doom-modeline-before-update-env-hook nil)
(setq doom-modeline-after-update-env-hook nil)
#+end_example

**** shell
***** TODO shell-pop
Helps you to use shell easily on Emacs. Only one key action to work.
#+begin_src emacs-lisp
  (use-package shell-pop
    :bind ("<f2>" . shell-pop)
    :custom
    (shell-pop-shell-type '("eshell" "*eshell*" (lambda nil (eshell))))
    (shell-pop-window-position "full")
    (shell-pop-autocd-to-working-dir nil))
#+end_src

#+begin_example emacs-lisp
  (use-package shell-pop
    :defer t
    :init
    (progn
      (setq shell-pop-window-position shell-default-position
            shell-pop-window-size     shell-default-height
            shell-pop-term-shell      shell-default-term-shell
            shell-pop-full-span       shell-default-full-span)
      (make-shell-pop-command "eshell" eshell)
      (make-shell-pop-command "term" term shell-pop-term-shell)
      (make-shell-pop-command "ansi-term" ansi-term shell-pop-term-shell)
      (make-shell-pop-command "inferior-shell" inferior-shell)
      (make-shell-pop-command "multiterm" multiterm)

      (let* ((initial-shell-mode-name (format "%S-mode" shell-default-shell))
             (initial-shell-mode (intern initial-shell-mode-name)))
        (evil-set-initial-state initial-shell-mode 'insert))

      (when (fboundp 'spacemacs/make-variable-layout-local)
        (spacemacs/make-variable-layout-local 'shell-pop-last-shell-buffer-index 1
                                              'shell-pop-last-shell-buffer-name ""
                                              'shell-pop-last-buffer nil))

      (add-hook 'term-mode-hook 'ansi-term-handle-close)

      (spacemacs/set-leader-keys
        "'"   'spacemacs/default-pop-shell
        "atse" 'spacemacs/shell-pop-eshell
        "atsi" 'spacemacs/shell-pop-inferior-shell
        "atsm" 'spacemacs/shell-pop-multiterm
        "atst" 'spacemacs/shell-pop-ansi-term
        "atsT" 'spacemacs/shell-pop-term)
      (spacemacs/declare-prefix "'" "open shell"))
    :config
    (add-hook 'shell-pop-out-hook #'spacemacs//shell-pop-restore-window))
#+end_example

***** eshell & extensions
****** TODO eshell
https://www.masteringemacs.org/article/complete-guide-mastering-eshell
Eshell is an elisp shell. It has its own configuration parameters,
distinct from those of shell or ansi-terminal.
#+begin_src emacs-lisp
  (use-package eshell
    :ensure nil
    :commands eshell
    :bind ("C-<f2>" . project-eshell)
    :custom
    (eshell-buffer-shorthand t)
    (eshell-cmpl-ignore-case t)
    (eshell-error-if-no-glob t)
    (eshell-glob-case-insensitive t)
    (eshell-scroll-to-bottom-on-input 'all)
    (eshell-scroll-to-bottom-on-output 'all)
    ;; (eshell-list-files-after-cd t)
    (eshell-visual-commands '("vi" "screen" "top" "less" "more" "lazygit" "htop"))
    (eshell-visual-subcommands '(("git" "log" "diff" "show")))
    :config
    ;;;; Clear Eshell
    ;; Make eshell act like a standard unix terminal.
    (defun eshell-clear-buffer ()
      "Clear terminal"
      (interactive)
      (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)))

    (add-hook 'eshell-mode-hook
              #'(lambda()
                  (local-set-key (kbd "C-l") 'eshell-clear-buffer))))
#+end_src

#+begin_example emacs-lisp
  (use-package eshell
    :ensure nil
    :defines eshell-prompt-function
    :functions eshell/alias
    :hook (eshell-mode . (lambda ()
                           (bind-key "C-l" 'eshell/clear eshell-mode-map)
                           ;; Aliases
                           (eshell/alias "f" "find-file $1")
                           (eshell/alias "fo" "find-file-other-window $1")
                           (eshell/alias "d" "dired $1")
                           (eshell/alias "l" "ls -lFh")
                           (eshell/alias "ll" "ls -l")
                           (eshell/alias "la" "ls -lAFh")
                           (eshell/alias "lr" "ls -tRFh")
                           (eshell/alias "lrt" "ls -lFcrt")
                           (eshell/alias "lsa" "ls -lah")
                           (eshell/alias "lt" "ls -ltFh")))
    :config
    (with-no-warnings
      (defun eshell/clear ()
        "Clear the eshell buffer."
        (interactive)
        (let ((inhibit-read-only t))
          (erase-buffer)
          (eshell-send-input)))

      (defun eshell/emacs (&rest args)
        "Open a file (ARGS) in Emacs.  Some habits die hard."
        (if (null args)
            ;; If I just ran "emacs", I probably expect to be launching
            ;; Emacs, which is rather silly since I'm already in Emacs.
            ;; So just pretend to do what I ask.
            (bury-buffer)
          ;; We have to expand the file names or else naming a directory in an
          ;; argument causes later arguments to be looked for in that directory,
          ;; not the starting directory
          (mapc #'find-file (mapcar #'expand-file-name (flatten-tree (reverse args))))))
      (defalias 'eshell/e #'eshell/emacs)
      (defalias 'eshell/ec #'eshell/emacs)

      (defun eshell/ebc (&rest args)
        "Compile a file (ARGS) in Emacs. Use `compile' to do background make."
        (if (eshell-interactive-output-p)
            (let ((compilation-process-setup-function
                   (list 'lambda nil
                         (list 'setq 'process-environment
                               (list 'quote (eshell-copy-environment))))))
              (compile (eshell-flatten-and-stringify args))
              (pop-to-buffer compilation-last-buffer))
          (throw 'eshell-replace-command
                 (let ((l (eshell-stringify-list (flatten-tree args))))
                   (eshell-parse-command (car l) (cdr l))))))
      (put 'eshell/ebc 'eshell-no-numeric-conversions t)

      (defun eshell-view-file (file)
        "View FILE.  A version of `view-file' which properly rets the eshell prompt."
        (interactive "fView file: ")
        (unless (file-exists-p file) (error "%s does not exist" file))
        (let ((buffer (find-file-noselect file)))
          (if (eq (get (buffer-local-value 'major-mode buffer) 'mode-class)
                  'special)
              (progn
                (switch-to-buffer buffer)
                (message "Not using View mode because the major mode is special"))
            (let ((undo-window (list (window-buffer) (window-start)
                                     (+ (window-point)
                                        (length (funcall eshell-prompt-function))))))
              (switch-to-buffer buffer)
              (view-mode-enter (cons (selected-window) (cons nil undo-window))
                               'kill-buffer)))))

      (defun eshell/less (&rest args)
        "Invoke `view-file' on a file (ARGS).

  \"less +42 foo\" will go to line 42 in the buffer for foo."
        (while args
          (if (string-match "\\`\\+\\([0-9]+\\)\\'" (car args))
              (let* ((line (string-to-number (match-string 1 (pop args))))
                     (file (pop args)))
                (eshell-view-file file)
                (forward-line line))
            (eshell-view-file (pop args)))))
      (defalias 'eshell/more #'eshell/less))

    ;;  Display extra information for prompt
    (use-package eshell-prompt-extras
      :after esh-opt
      :defines eshell-highlight-prompt
      :commands (epe-theme-lambda epe-theme-dakrone epe-theme-pipeline)
      :init (setq eshell-highlight-prompt nil
                  eshell-prompt-function #'epe-theme-lambda))

    ;; Fish-like history autosuggestions
    (use-package esh-autosuggest
      :defines ivy-display-functions-alist
      :bind (:map eshell-mode-map
                  ([remap eshell-pcomplete] . completion-at-point))
      :hook ((eshell-mode . esh-autosuggest-mode)
             (eshell-mode . eshell-setup-ivy-completion))
      :init (defun eshell-setup-ivy-completion ()
              "Setup `ivy' completion in `eshell'."
              (setq-local ivy-display-functions-alist
                          (remq (assoc 'ivy-completion-in-region
                                       ivy-display-functions-alist)
                                ivy-display-functions-alist))))

    ;; `eldoc' support
    (use-package esh-help
      :init (setup-esh-help-eldoc))

    ;; `cd' to frequent directory in `eshell'
    (use-package eshell-z
      :hook (eshell-mode . (lambda () (require 'eshell-z)))))
#+end_example

#+begin_example emacs-lisp
 (use-package eshell
    :defer t
    :init
    (progn
      (spacemacs/register-repl 'eshell 'eshell)
      (setq eshell-cmpl-cycle-completions nil
            ;; auto truncate after 20k lines
            eshell-buffer-maximum-lines 20000
            ;; history size
            eshell-history-size 350
            ;; no duplicates in history
            eshell-hist-ignoredups t
            ;; my prompt is easy enough to see
            eshell-highlight-prompt nil
            ;; treat 'echo' like shell echo
            eshell-plain-echo-behavior t
            ;; cache directory
            eshell-directory-name (concat spacemacs-cache-directory "eshell/"))

      (when shell-protect-eshell-prompt
        (add-hook 'eshell-after-prompt-hook 'spacemacs//protect-eshell-prompt))

      (autoload 'eshell-delchar-or-maybe-eof "em-rebind")

      (add-hook 'eshell-mode-hook 'spacemacs//init-eshell)
      (add-hook 'eshell-mode-hook 'spacemacs/disable-hl-line-mode)
      (with-eval-after-load 'centered-cursor-mode
        (add-hook 'eshell-mode-hook 'spacemacs//inhibit-global-centered-cursor-mode)))
    :config
    (progn

      ;; Work around bug in eshell's preoutput-filter code.
      ;; Eshell doesn't call preoutput-filter functions in the context of the eshell
      ;; buffer. This breaks the xterm color filtering when the eshell buffer is updated
      ;; when it's not currently focused.
      ;; To remove if/when fixed upstream.
      (defun eshell-output-filter@spacemacs-with-buffer (fn process string)
        (let ((proc-buf (if process (process-buffer process)
                          (current-buffer))))
          (when proc-buf
            (with-current-buffer proc-buf
              (funcall fn process string)))))
      (advice-add
       #'eshell-output-filter
       :around
       #'eshell-output-filter@spacemacs-with-buffer)

      (require 'esh-opt)

      ;; quick commands
      (defalias 'eshell/e 'find-file-other-window)
      (defalias 'eshell/d 'dired)

      (require 'esh-var)
      (add-to-list 'eshell-variable-aliases-list
                   `("PAGER" ,(lambda (_indices) "cat") t))

      ;; support `em-smart'
      (when shell-enable-smart-eshell
        (require 'em-smart)
        (setq eshell-where-to-jump 'begin
              eshell-review-quick-commands nil
              eshell-smart-space-goes-to-end t)
        (add-hook 'eshell-mode-hook 'eshell-smart-initialize))

      ;; Visual commands
      (require 'em-term)
      (mapc (lambda (x) (add-to-list 'eshell-visual-commands x))
            '("el" "elinks" "htop" "less" "ssh" "tmux" "top"))

      ;; automatically truncate buffer after output
      (when (boundp 'eshell-output-filter-functions)
        (add-hook 'eshell-output-filter-functions #'eshell-truncate-buffer))))
#+end_example

****** COMMENT eshell custom prompt
From lambda emacs.
A nicer eshell prompt
https://gist.github.com/ekaschalk/f0ac91c406ad99e53bb97752683811a5
with some useful discussion of how it was put together
http://www.modernemacs.com/post/custom-eshell/ 
#+begin_src emacs-lisp
  (with-eval-after-load 'eshell
    (require 'dash)
    (require 's)

    (defmacro with-face (STR &rest PROPS)
      "Return STR propertized with PROPS."
      `(propertize ,STR 'face (list ,@PROPS)))

    (defmacro esh-section (NAME ICON FORM &rest PROPS)
      "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
      `(setq ,NAME
             (lambda () (when ,FORM
                          (-> ,ICON
                              (concat esh-section-delim ,FORM)
                              (with-face ,@PROPS))))))

    (defun esh-acc (acc x)
      "Accumulator for evaluating and concatenating esh-sections."
      (--if-let (funcall x)
          (if (s-blank? acc)
              it
            (concat acc esh-sep it))
        acc))

    (defun esh-prompt-func ()
      "Build `eshell-prompt-function'"
      (concat esh-header
              (-reduce-from 'esh-acc "" eshell-funcs)
              "\n"
              eshell-prompt-string))

    (esh-section esh-dir
                 "\xf07c"  ;  (faicon folder)
                 (abbreviate-file-name (eshell/pwd))
                 '(:foreground "#268bd2" :underline t))

    (esh-section esh-git
                 "\xe907"  ;  (git icon)
                 (with-eval-after-load 'magit
                   (magit-get-current-branch))
                 '(:foreground "#b58900"))

    (esh-section esh-python
                 "\xe928"  ;  (python icon)
                 (with-eval-after-load "virtualenvwrapper"
                   venv-current-name))

    (esh-section esh-clock
                 "\xf017"  ;  (clock icon)
                 (format-time-string "%H:%M" (current-time))
                 '(:foreground "forest green"))

    ;; Below I implement a "prompt number" section
    (setq esh-prompt-num 0)
    (add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
    (advice-add 'eshell-send-input :before
                (lambda (&rest args) (setq esh-prompt-num (cl-incf esh-prompt-num))))

    (esh-section esh-num
                 "\xf0c9"  ;  (list icon)
                 (number-to-string esh-prompt-num)
                 '(:foreground "brown"))

    ;; Separator between esh-sections
    (setq esh-sep " | ")  ; or "  "

    ;; Separator between an esh-section icon and form
    (setq esh-section-delim " ")

    ;; Eshell prompt header
    (setq esh-header "\n┌─")  ; or "\n "

    ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
    ;; your login, these can be the same.
    (setq eshell-prompt-regexp "^└─>> ") ;; note the '^' to get regex working right
    (setq eshell-prompt-string "└─>> ")

    ;; Choose which eshell-funcs to enable
    (setq eshell-funcs (list esh-dir esh-git esh-python esh-clock esh-num))

    ;; Enable the new eshell prompt
    (setq eshell-prompt-function 'esh-prompt-func))
#+end_src

****** COMMENT eshell magit
From lambda emacs.
#+begin_src emacs-lisp
  ;; Eshell Magit
  (defun eshell/magit ()
    "Function to open magit-status for the current directory"
    (interactive)
    (require 'magit)
    (magit-status-setup-buffer default-directory)
    nil)
#+end_src

****** COMMENT em-smart
#+begin_src emacs-lisp
  (use-package em-smart
    :ensure nil
    :hook (eshell-mode . eshell-smart-initialize)
    :custom
    ;; (eshell-review-quick-commands nil)
    ;; (eshell-smart-space-goes-to-end t)
    (eshell-where-to-jump 'after))
#+end_src

****** capf-autosuggest
Capf-autosuggest lets you preview the most recent matching history
element.
#+begin_src emacs-lisp
  (use-package capf-autosuggest
    :hook (eshell-mode . capf-autosuggest-mode))
#+end_src

****** COMMENT esh-help (need manpage)
This library adds the following help functions and support for Eshell:
- run-help function inspired by Zsh
- eldoc support
#+begin_src emacs-lisp
  (use-package esh-help
    :after eshell
    :demand
    :config (setup-esh-help-eldoc))
#+end_src

****** eshell-z
It keeps track of where you have been and how many commands you invoke
there, and provides a convenient way to jump to the directories you
actually use.
#+begin_src emacs-lisp
  (use-package eshell-z
    :after eshell
    :demand)
#+end_src

****** eshell-fringe-status
Quickly navigating to a specific parent directory in eshell.
#+begin_src emacs-lisp
  (use-package eshell-fringe-status
    :hook (eshell-mode . eshell-fringe-status-mode))
#+end_src

****** eshell-bookmark
Integrating eshell with bookmark.el.
#+begin_src emacs-lisp
  (use-package eshell-bookmark
    :hook (eshell-mode . eshell-bookmark-setup))
#+end_src

****** eshell-syntax-highlighting
Adds syntax highlighting to the Emacs Eshell.
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after eshell
    :demand
    :config
    ;; Enable in all Eshell buffers.
    (eshell-syntax-highlighting-global-mode))
#+end_src

****** COMMENT eshell-info-banner
A utility for creating an informative banner.
#+begin_src emacs-lisp
  (use-package eshell-info-banner
    :hook (eshell-banner-load . eshell-info-banner-update-banner))
#+end_src

****** COMMENT eshell-prompt-extras
#+begin_src emacs-lisp
  (use-package eshell-prompt-extras
    :after esh-opt
    :demand
    :custom
    (eshell-highlight-prompt nil)
    (eshell-prompt-function 'epe-theme-lambda))
#+end_src

***** TODO multi-term

***** TODO COMMENT exec-path-from-shell (only under linux or macos)
Environment
#+begin_src emacs-lisp
  (when (or sys/mac-x-p sys/linux-x-p (daemonp))
    (use-package exec-path-from-shell
      :init (exec-path-from-shell-initialize)))
#+end_src

**** anzu
Provides a minor mode which displays 'current match/total
matches' in the mode-line in various search modes. This makes it easy
to understand how many matches there are in the current buffer for
your search query.
#+begin_src emacs-lisp
  (use-package anzu
    :bind (([remap query-replace] . anzu-query-replace)
           ([remap query-replace-regexp] . anzu-query-replace-regexp)
           ("C-;" . anzu-replace-at-cursor-thing)
           :map isearch-mode-map
           ([remap isearch-query-replace] . anzu-isearch-query-replace)
           ([remap isearch-query-replace-regexp] . anzu-isearch-query-replace-regexp))
    ;:hook (after-init . global-anzu-mode)
    )
#+end_src

**** TODO COMMENT avy | ace(-jump) | dump-jump
#+begin_src emacs-lisp
  ;; Jump to things in Emacs tree-style
  (use-package avy
    :bind (("C-:"   . avy-goto-char)
           ("C-'"   . avy-goto-char-2)
           ("M-g f" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)
           ("M-g e" . avy-goto-word-0))
    :hook (after-init . avy-setup-default)
    :config (setq avy-all-windows nil
                  avy-all-windows-alt t
                  avy-background t
                  avy-style 'pre))

  ;; Kill text between the point and the character CHAR
  (use-package avy-zap
    :bind (("M-z" . avy-zap-to-char-dwim)
           ("M-Z" . avy-zap-up-to-char-dwim)))

  ;; Quickly follow links
  (use-package ace-link
    :defines (org-mode-map
              gnus-summary-mode-map
              gnus-article-mode-map
              ert-results-mode-map
              paradox-menu-mode-map
              elfeed-show-mode-map)
    :bind ("M-o" . ace-link-addr)
    :hook (after-init . ace-link-setup-default)
    :config
    (with-eval-after-load 'org
      (bind-key "M-o" #'ace-link-org org-mode-map))

    (with-eval-after-load 'gnus
      (bind-keys
       :map gnus-summary-mode-map
       ("M-o" . ace-link-gnus)
       :map gnus-article-mode-map
       ("M-o" . ace-link-gnus)))

    (with-eval-after-load 'ert
      (bind-key "o" #'ace-link-help ert-results-mode-map))

    (bind-keys
     :map package-menu-mode-map
     ("o" . ace-link-help)
     :map process-menu-mode-map
     ("o" . ace-link-help))
    (with-eval-after-load 'paradox
      (bind-key "o" #'ace-link-help paradox-menu-mode-map))

    (with-eval-after-load 'elfeed
      (bind-key "o" #'ace-link elfeed-show-mode-map)))

  ;; Jump to Chinese characters
  (use-package ace-pinyin
    :diminish
    :hook (after-init . ace-pinyin-global-mode))
#+end_src

spacemacs settings
#+begin_example emacs-lisp
  (use-package avy
    :defer t
    :commands (spacemacs/avy-open-url spacemacs/avy-goto-url avy-pop-mark avy-with)
    :init
    (progn
      (setq avy-all-windows 'all-frames)
      (setq avy-background t)
      (spacemacs/set-leader-keys
        "jb" 'avy-pop-mark
        "jj" 'evil-avy-goto-char-timer
        "jl" 'evil-avy-goto-line
        "ju" 'spacemacs/avy-goto-url
        "jU" 'spacemacs/avy-open-url
        "jw" 'evil-avy-goto-word-or-subword-1
        "xo" 'spacemacs/avy-open-url))
    :config
    (progn
      (defun spacemacs/avy-goto-url ()
        "Use avy to go to an URL in the buffer."
        (interactive)
        (avy-jump "https?://"))
      (defun spacemacs/avy-open-url ()
        "Use avy to select an URL in the buffer and open it."
        (interactive)
        (save-excursion
          (spacemacs/avy-goto-url)
          (browse-url-at-point)))))
#+end_example
**** TODO COMMENT popwin | popper | window-purpose
#+begin_src emacs-lisp
  ;; popwin
  (use-package popwin
    :hook (after-init . popwin-mode))
#+end_src

(with-eval-after-load 'popwin
(progn
(push '(occur-mode :position right :width 100) popwin:special-display-config)
(push '(grep-mode :position right :width 100) popwin:special-display-config)
(push '(special-mode :position right :width 100) popwin:special-display-config)))

#+begin_src emacs-lisp
  ;; Enforce rules for popups
  (use-package popper
    :defines popper-echo-dispatch-actions
    :commands popper-group-by-projectile
    :bind (:map popper-mode-map
                ("C-h z"     . popper-toggle-latest)
                ("C-<tab>"   . popper-cycle)
                ("C-M-<tab>" . popper-toggle-type))
    :hook (emacs-startup . popper-mode)
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$" "\\*Pp Eval Output\\*$"
            "\\*Compile-Log\\*"
            "\\*Completions\\*"
            "\\*Warnings\\*"
            "\\*Async Shell Command\\*"
            "\\*Apropos\\*"
            "\\*Backtrace\\*"
            "\\*Calendar\\*"
            "\\*Embark Actions\\*"
            "\\*Finder\\*"
            "\\*Kill Ring\\*"
            "\\*Go-Translate\\*"

            bookmark-bmenu-mode
            comint-mode
            compilation-mode
            help-mode helpful-mode
            tabulated-list-mode
            Buffer-menu-mode

            gnus-article-mode devdocs-mode
            grep-mode occur-mode rg-mode deadgrep-mode ag-mode pt-mode
            ivy-occur-mode ivy-occur-grep-mode
            youdao-dictionary-mode osx-dictionary-mode fanyi-mode

            "^\\*Process List\\*" process-menu-mode
            list-environment-mode cargo-process-mode

            "^\\*eshell.*\\*.*$"       eshell-mode
            "^\\*shell.*\\*.*$"        shell-mode
            "^\\*terminal.*\\*.*$"     term-mode
            "^\\*vterm[inal]*.*\\*.*$" vterm-mode

            "\\*DAP Templates\\*$" dap-server-log-mode
            "\\*ELP Profiling Restuls\\*" profiler-report-mode
            "\\*Flycheck errors\\*$" " \\*Flycheck checker\\*$"
            "\\*Paradox Report\\*$" "\\*package update results\\*$" "\\*Package-Lint\\*$"
            "\\*[Wo]*Man.*\\*$"
            "\\*ert\\*$" overseer-buffer-mode
            "\\*gud-debug\\*$"
            "\\*lsp-help\\*$" "\\*lsp session\\*$"
            "\\*quickrun\\*$"
            "\\*tldr\\*$"
            "\\*vc-.*\\*$"
            "^\\*elfeed-entry\\*$"
            "^\\*macro expansion\\**"

            "\\*Agenda Commands\\*" "\\*Org Select\\*" "\\*Capture\\*" "^CAPTURE-.*\\.org*"
            "\\*Gofmt Errors\\*$" "\\*Go Test\\*$" godoc-mode
            "\\*docker-.+\\*"
            "\\*prolog\\*" inferior-python-mode inf-ruby-mode swift-repl-mode
            "\\*rustfmt\\*$" rustic-compilation-mode rustic-cargo-clippy-mode
            rustic-cargo-outdated-mode rustic-cargo-test-moed))

    (with-eval-after-load 'projectile
      (setq popper-group-function #'popper-group-by-projectile))

    (when (display-grayscale-p)
      (setq popper-mode-line
            '(:eval (format " %s "
                            (all-the-icons-octicon
                             "pin"
                             :height 0.9
                             :v-adjust 0.0
                             :face 'mode-line-emphasis)))))

    (setq popper-echo-dispatch-actions t)
    :config
    (popper-echo-mode 1)

    (with-no-warnings
      (defun my-popper-fit-window-height (win)
        "Determine the height of popup window WIN by fitting it to the buffer's content."
        (fit-window-to-buffer
         win
         (floor (frame-height) 3)
         (floor (frame-height) 3)))
      (setq popper-window-height #'my-popper-fit-window-height)

      (defun popper-close-window-hack (&rest _)
        "Close popper window via `C-g'."
        ;; `C-g' can deactivate region
        (when (and (called-interactively-p 'interactive)
                   (not (region-active-p))
                   popper-open-popup-alist)
          (let ((window (caar popper-open-popup-alist)))
            (when (window-live-p window)
              (delete-window window)))))
      (advice-add #'keyboard-quit :before #'popper-close-window-hack)))
#+end_src

Look at this.
#+begin_example emacs-lisp
;; Shell Pop: leverage `popper'
(with-no-warnings
  (defvar shell-pop--frame nil)
  (defvar shell-pop--window nil)

  (defun shell-pop--shell (&optional arg)
    "Run shell and return the buffer."
    (cond ((fboundp 'vterm) (vterm arg))
          (sys/win32p (eshell arg))
          (t (shell))))

  (defun shell-pop--hide-frame ()
    "Hide child frame and refocus in parent frame."
    (when (and (childframe-workable-p)
               (frame-live-p shell-pop--frame)
               (frame-visible-p shell-pop--frame))
      (make-frame-invisible shell-pop--frame)
      (select-frame-set-input-focus (frame-parent shell-pop--frame))
      (setq shell-pop--frame nil)))

  (defun shell-pop-toggle ()
    "Toggle shell."
    (interactive)
    (shell-pop--hide-frame)
    (if (window-live-p shell-pop--window)
        (progn
          (delete-window shell-pop--window)
          (setq shell-pop--window nil))
      (setq shell-pop--window
            (get-buffer-window (shell-pop--shell)))))
  (bind-keys ([f9]  . shell-pop-toggle)
             ("C-`" . shell-pop-toggle))

  (when (childframe-workable-p)
    (defun shell-pop-posframe-hidehandler (_)
      "Hidehandler used by `shell-pop-posframe-toggle'."
      (not (eq (selected-frame) posframe--frame)))

    (defun shell-pop-posframe-toggle ()
      "Toggle shell in child frame."
      (interactive)
      (let* ((buffer (shell-pop--shell))
             (window (get-buffer-window buffer)))
        ;; Hide window: for `popper'
        (when (window-live-p window)
          (delete-window window))

        (if (and (frame-live-p shell-pop--frame)
                 (frame-visible-p shell-pop--frame))
            (progn
              ;; Hide child frame and refocus in parent frame
              (make-frame-invisible shell-pop--frame)
              (select-frame-set-input-focus (frame-parent shell-pop--frame))
              (setq shell-pop--frame nil))
          (let ((width  (max 100 (round (* (frame-width) 0.62))))
                (height (round (* (frame-height) 0.62))))
            ;; Shell pop in child frame
            (setq shell-pop--frame
                  (posframe-show
                   buffer
                   :poshandler #'posframe-poshandler-frame-center
                   :hidehandler #'shell-pop-posframe-hidehandler
                   :left-fringe 8
                   :right-fringe 8
                   :width width
                   :height height
                   :min-width width
                   :min-height height
                   :internal-border-width 3
                   :internal-border-color (face-background 'posframe-border nil t)
                   :background-color (face-background 'tooltip nil t)
                   :override-parameters '((cursor-type . t))
                   :respect-mode-line t
                   :accept-focus t))

            ;; Focus in child frame
            (select-frame-set-input-focus shell-pop--frame)

            (with-current-buffer buffer
              (setq-local cursor-type 'box) ; blink cursor
              (goto-char (point-max))
              (when (fboundp 'vterm-reset-cursor-point)
                (vterm-reset-cursor-point)))))))
    (bind-key "C-`" #'shell-pop-posframe-toggle)))
#+end_example

**** TODO visual-regexp

**** TODO font-lock+

**** TODO COMMENT dimmer
#+begin_src emacs-lisp
  ;;;; Dim inactive windows
  (use-package dimmer
    :hook (after-init . dimmer-mode)
    :custom
    (dimmer-prevent-dimming-predicates '(window-minibuffer-p))
    (dimmer-fraction 0.5)
    (dimmer-adjustment-mode :foreground)
    (dimmer-use-colorspace :rgb)
    (dimmer-watch-frame-focus-events nil)
    :config
    (dimmer-configure-which-key)
    (dimmer-configure-hydra)
    (dimmer-configure-magit)
    (dimmer-configure-posframe)
    (dimmer-configure-vertico))

  (defun dimmer-configure-vertico ()
    "Convenience settings for Dimmer & Vertico users."
    (with-no-warnings
      (add-to-list
       'dimmer-buffer-exclusion-regexps "^ \\*Vertico\\*$")))
#+end_src

**** TODO COMMENT svg-tag-mode
#+begin_src emacs-lisp
  ;;;; SVG Library (For Tags/Labels/etc.)
    ;;; SVG Tag Mode
  (use-package svg-tag-mode
    :when (image-type-available-p 'svg)
    :straight (:type git :host github :repo "rougier/svg-tag-mode")
    :hook (prog-mode . svg-tag-mode)
    :config
    (setq svg-tag-tags
          '(;; Replaces any occurence of :XXX: with a dynamic SVG tag displaying XXX
            ("\\(:[A-Z]+:\\)" . ((lambda (tag)
                                   (svg-tag-make tag :face 'success :inverse t :beg 1 :end -1))))
            ;; other tags
            ("DONE:"  . ((lambda (tag) (svg-tag-make "DONE:"  :face 'fringe  :inverse t ))))
            ("FIXME:" . ((lambda (tag) (svg-tag-make "FIXME:" :face 'error :inverse t))))
            ("HACK:"  . ((lambda (tag) (svg-tag-make "HACK:"  :face 'warning :inverse t))))
            ("NOTE:"  . ((lambda (tag) (svg-tag-make "NOTE:"  :face 'warning :inverse t))))
            ("TODO:"  . ((lambda (tag) (svg-tag-make "TODO:"  :face 'warning :inverse t)))))))
#+end_src

**** TODO COMMENT hl-line+
#+begin_src emacs-lisp
  ;;;; Highlight
  ;;;;; Highlight Lines
  ;; Highlight lines. You can toggle this off
  (use-package hl-line+
    :straight t
    :defer 1
    :hook
    ;; https://tech.toryanderson.com/2021/09/24/replacing-beacon.el-with-hl-line-flash/
    (window-scroll-functions . hl-line-flash)
    (focus-in . hl-line-flash)
    (post-command . hl-line-flash)
    :custom-face
    ;; subtle highlighting
    (hl-line ((t (:inherit highlight))))
    :custom
    (global-hl-line-mode nil)
    (hl-line-flash-show-period 0.5)
    ;; (hl-line-inhibit-highlighting-for-modes '(dired-mode))
    ;; (hl-line-overlay-priority -100) ;; sadly, seems not observed by diredfl
    (hl-line-when-idle-interval 5)
    :config
    (toggle-hl-line-when-idle 1 t))
#+end_src

**** TODO COMMENT lin
#+begin_src emacs-lisp
  ;;;;; LIN (Make HL Line Better)
  (use-package lin
    :straight t
    :config
    (setq lin-mode-hooks
          '(dired-mode-hook
            elfeed-search-mode-hook
            git-rebase-mode-hook
            grep-mode-hook
            ibuffer-mode-hook
            ilist-mode-hook
            log-view-mode-hook
            magit-log-mode-hook
            mu4e-headers-mode
            occur-mode-hook
            org-agenda-mode-hook
            proced-mode-hook
            tabulated-list-mode-hook))
    (lin-global-mode 1))
#+end_src

**** TODO COMMENT highlight-numbers
#+begin_src emacs-lisp
  ;;;;; Highlight Numbers & TODOS
  (use-package highlight-numbers
    :defer t
    :commands highlight-numbers-mode
    :init
    (add-hook 'prog-mode-hook #'highlight-numbers-mode))
#+end_src

**** TODO COMMENT hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :defer t
    :commands hl-todo-mode
    :init
    ;; (add-hook 'org-mode-hook #'hl-todo-mode)
    (add-hook 'prog-mode-hook #'hl-todo-mode)
    (add-hook 'markdown-mode-hook #'hl-todo-mode))
#+end_src

**** TODO COMMENT goggles | pulse | pulsar
Goggles highlights the modified region using pulse. Currently the
commands undo, yank, kill and delete are supported.
#+begin_src emacs-lisp
  (use-package goggles
    :hook ((prog-mode text-mode) . goggles-mode)
    :custom (goggles-pulse t)) ;; set to nil to disable pulsing
#+end_src

#+begin_src emacs-lisp
  (use-package pulse
    :straight (:type built-in)
    :defer 1
    :bind
    ("C-<return>" . pulse-line)
    :commands (pulse-line pulse-momentary-highlight-one-line)
    :config
    (setq pulse-delay 0.08)
    (defun pulse-line (&rest _)
      "Pulse the current line."
      (interactive)
      (pulse-momentary-highlight-one-line (point)))
    ;; pulse for commands
    (dolist (command '(scroll-up-command scroll-down-command
                                         recenter-top-bottom other-window))
      (advice-add command :after #'pulse-line))
    ;; pulse on window change
    (push 'pulse-line window-selection-change-functions))
#+end_src

**** TODO COMMENT crosshairs
#+begin_src emacs-lisp
  ;;;;; Crosshair Highlighting
  ;; Highlight cursor vertically and horizontally
  (use-package crosshairs
    :straight t
    :commands (crosshairs-highlight
               crosshairs-mode
               flash-crosshairs)
    :bind (:map lem+toggle-keys
                ("c" . crosshairs-mode))
    :custom-face
    (col-highlight ((t (:inherit hl-line))))
    :config
    ;; same colors for both hlines
    (setq col-highlight-vline-face-flag t))
#+end_src

**** TODO COMMENT pulsing-cursor
#+begin_src emacs-lisp
  ;;;; Pulsing Cursor
  (use-package pulsing-cursor
    :straight (:type git :host github :repo "jasonjckn/pulsing-cursor")
    :defer 1
    :custom-face
    (pulsing-cursor-overlay-face1 ((t (:inherit match))))
    :custom
    (pulsing-cursor-delay 1.0)
    (pulsing-cursor-interval .5)
    (pulsing-cursor-blinks 5)
    :config (pulsing-cursor-mode +1))
#+end_src

**** TODO Typo Mode

**** TODO ligatures.el

**** TODO sublimity

**** TODO ace-popup-menu

**** TODO yascroll-el

**** TODO COMMENT volatile-highlights
#+begin_src emacs-lisp
  ;; Highlight some operations
  (use-package volatile-highlights
    :diminish
    :hook (after-init . volatile-highlights-mode)
    :config
    (with-no-warnings
      (when (fboundp 'pulse-momentary-highlight-region)
        (defun my-vhl-pulse (beg end &optional _buf face)
          "Pulse the changes."
          (pulse-momentary-highlight-region beg end face))
        (advice-add #'vhl/.make-hl :override #'my-vhl-pulse))))

  ;; Pulse current line
  (use-package pulse
    :ensure nil
    :custom-face
    (pulse-highlight-start-face ((t (:inherit region))))
    (pulse-highlight-face ((t (:inherit region :extend t))))
    :hook (((dumb-jump-after-jump imenu-after-jump) . my-recenter-and-pulse)
           ((bookmark-after-jump magit-diff-visit-file next-error) . my-recenter-and-pulse-line))
    :init
    (with-no-warnings
      (defun my-pulse-momentary-line (&rest _)
        "Pulse the current line."
        (pulse-momentary-highlight-one-line (point)))

      (defun my-pulse-momentary (&rest _)
        "Pulse the region or the current line."
        (if (fboundp 'xref-pulse-momentarily)
            (xref-pulse-momentarily)
          (my-pulse-momentary-line)))

      (defun my-recenter-and-pulse(&rest _)
        "Recenter and pulse the region or the current line."
        (recenter)
        (my-pulse-momentary))

      (defun my-recenter-and-pulse-line (&rest _)
        "Recenter and pulse the current line."
        (recenter)
        (my-pulse-momentary-line))

      (dolist (cmd '(recenter-top-bottom
                     other-window windmove-do-window-select
                     ace-window aw--select-window
                     pager-page-down pager-page-up
                     treemacs-select-window
                     symbol-overlay-basic-jump))
        (advice-add cmd :after #'my-pulse-momentary-line))

      (dolist (cmd '(pop-to-mark-command
                     pop-global-mark
                     goto-last-change))
        (advice-add cmd :after #'my-recenter-and-pulse))))
#+end_src

**** TODO COMMENT winum | switch-window | ace-window | window-numbering
#+begin_src emacs-lisp
  ;; Quickly switch windows
  (use-package ace-window
    :pretty-hydra
    ((:title (pretty-hydra-title "Window Management" 'faicon "th" :height 1.1 :v-adjust -0.1)
             :foreign-keys warn :quit-key "q")
     ("Actions"
      (("TAB" other-window "switch")
       ("x" ace-delete-window "delete" :exit t)
       ("X" ace-delete-other-windows "delete other" :exit t)
       ("s" ace-swap-window "swap" :exit t)
       ("a" ace-select-window "select" :exit t)
       ("m" toggle-frame-maximized "maximize" :exit t)
       ("f" toggle-frame-fullscreen "fullscreen" :exit t))
      "Resize"
      (("h" shrink-window-horizontally "←")
       ("j" enlarge-window "↓")
       ("k" shrink-window "↑")
       ("l" enlarge-window-horizontally "→")
       ("n" balance-windows "balance" :exit t))
      "Split"
      (("r" split-window-right "horizontally")
       ("R" split-window-horizontally-instead "horizontally instead")
       ("v" split-window-below "vertically")
       ("V" split-window-vertically-instead "vertically instead")
       ("t" toggle-window-split "toggle"))
      "Zoom"
      (("+" text-scale-increase "in")
       ("=" text-scale-increase "in")
       ("-" text-scale-decrease "out")
       ("0" (text-scale-increase 0) "reset"))
      "Appearance"
      (("F" set-frame-font "font")
       ("T" centaur-load-theme "theme"))))
    :custom-face
    (aw-leading-char-face ((t (:inherit font-lock-keyword-face :bold t :height 2.0))))
    (aw-minibuffer-leading-char-face ((t (:inherit font-lock-keyword-face :bold t :height 1.0))))
    (aw-mode-line-face ((t (:inherit mode-line-emphasis :bold t))))
    :bind (([remap other-window] . ace-window)
           ("C-c w" . ace-window-hydra/body))
    :hook (emacs-startup . ace-window-display-mode)
    :config
    (defun toggle-window-split ()
      (interactive)
      (if (= (count-windows) 2)
          (let* ((this-win-buffer (window-buffer))
                 (next-win-buffer (window-buffer (next-window)))
                 (this-win-edges (window-edges (selected-window)))
                 (next-win-edges (window-edges (next-window)))
                 (this-win-2nd (not (and (<= (car this-win-edges)
                                             (car next-win-edges))
                                         (<= (cadr this-win-edges)
                                             (cadr next-win-edges)))))
                 (splitter
                  (if (= (car this-win-edges)
                         (car (window-edges (next-window))))
                      'split-window-horizontally
                    'split-window-vertically)))
            (delete-other-windows)
            (let ((first-win (selected-window)))
              (funcall splitter)
              (if this-win-2nd (other-window 1))
              (set-window-buffer (selected-window) this-win-buffer)
              (set-window-buffer (next-window) next-win-buffer)
              (select-window first-win)
              (if this-win-2nd (other-window 1))))
        (user-error "`toggle-window-split' only supports two windows")))

    ;; Bind hydra to dispatch list
    (add-to-list 'aw-dispatch-alist '(?w ace-window-hydra/body) t)

    ;; Select widnow via `M-1'...`M-9'
    (defun aw--select-window (number)
      "Slecet the specified window."
      (when (numberp number)
        (let ((found nil))
          (dolist (win (aw-window-list))
            (when (and (window-live-p win)
                       (eq number
                           (string-to-number
                            (window-parameter win 'ace-window-path))))
              (setq found t)
              (aw-switch-to-window win)))
          (unless found
            (message "No specified window: %d" number)))))
    (dotimes (n 9)
      (bind-key (format "M-%d" (1+ n))
                (lambda ()
                  (interactive)
                  (aw--select-window (1+ n))))))
#+end_src

*** MINIBUFFER & COMPLETE
**** vertico
Vertico provides a performant and minimalistic vertical completion UI
based on the default completion system.
#+BEGIN_SRC emacs-lisp
    (use-package vertico
      :hook (after-init . vertico-mode)
      :custom (vertico-cycle t))
#+END_SRC

***** COMMENT /config (example)/
#+begin_example emacs-lisp
;; Different scroll margin
(setq vertico-scroll-margin 0)

;; Show more candidates
(setq vertico-count 20)

;; Grow and shrink the Vertico minibuffer
(setq vertico-resize t)

;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
(setq vertico-cycle t)
#+end_example

**** vertico extensions
Comment out if you don't want the extension.
***** vertico-directory
Provides Ido-like navigation commands.
#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :ensure nil
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

***** vertico-indexed
Prefixes candidates with indices and allows you to select with prefix
arguments.

Use C-<number> RET to execute, C-<number> TAB to insert.

#+begin_src emacs-lisp
  (use-package vertico-indexed
    :after vertico
    :ensure nil
    :init (vertico-indexed-mode))
#+end_src

***** vertico-mouse
Adds mouse support.
#+begin_src emacs-lisp
  (use-package vertico-mouse
    :after vertico
    :ensure nil
    :init (vertico-mouse-mode))
#+end_src

***** vertico-multiform
This package is a Vertico extension for fine tuning the Vertico
display and other minibuffer modes per command or completion category.
#+begin_src emacs-lisp
  (use-package vertico-multiform
    :after vertico
    :ensure nil
    :init (vertico-multiform-mode)
    :bind (:map vertico-map
                ("M-G" . vertico-multiform-grid)))
#+end_src

***** COMMENT vertico-quick
Select using Avy-style quick keys.
#+begin_src emacs-lisp
  (use-package vertico-quick
    :after vertico
    :ensure nil
    :custom
    (vertico-quick1 "asdfg") ;Single level quick keys.
    (vertico-quick2 "jklh") ;Two level quick keys.
    :bind (:map vertico-map
                ("M-i" . vertico-quick-exit)
                ("C-M-i" . vertico-quick-insert)))
#+end_src

***** vertico-repeat
Enables repetition of Vertico sessions via the `vertico-repeat',
`vertico-repeat-last' and `vertico-repeat-select' commands.

It is necessary to register a minibuffer setup hook, which saves the
Vertico state for repetition.

In order to save the history across Emacs sessions, enable
`savehist-mode' and add `vertico-repeat-history' to
`savehist-additional-variables'.

#+begin_src emacs-lisp
  (use-package vertico-repeat
    :after vertico
    :ensure nil
    :bind ("M-R" . vertico-repeat)
    :hook (minibuffer-setup . vertico-repeat-save))
#+end_src

**** SUPER orderless
This package provides an orderless completion style that divides the
pattern into space-separated components, and matches candidates that
match all of the components in any order.

See document of =completion-styles-alist= for details.

1) ~basic config~::
   #+HEADER: :tangle (if (string= "BASIC" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (use-package orderless
       :after vertico
       :demand
       :config
       (orderless-define-completion-style +orderless-with-flex
         (orderless-matching-styles '(orderless-flex orderless-literal orderless-regexp)))
       :custom
       ;; (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp))
       (completion-styles '(orderless basic))
       (completion-category-defaults nil)
       (completion-category-overrides '((file (styles partial-completion initials flex))
                                        (command (styles +orderless-with-flex))
                                        (variable (styles +orderless-with-flex))
                                        (symbol (styles +orderless-with-flex))))
       ;; allow escaping space with backslash!
       (orderless-component-separator #'orderless-escapable-split-on-space))
   #+end_src

2) ~super config by minad~::
   #+HEADER: :tangle (if (string= "SUPER" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+BEGIN_SRC emacs-lisp
     (use-package orderless
       :after vertico
       :demand
       :config
       (defvar +orderless-dispatch-alist
         '((?% . char-fold-to-regexp)
           (?! . orderless-without-literal)
           (?`. orderless-initialism)
           (?= . orderless-literal)
           (?~ . orderless-flex)))

       ;; Recognizes the following patterns:
       ;; * ~flex flex~
       ;; * =literal literal=
       ;; * %char-fold char-fold%
       ;; * `initialism initialism`
       ;; * !without-literal without-literal!
       ;; * .ext (file extension)
       ;; * regexp$ (regexp matching at end)
       (defun +orderless-dispatch (pattern index _total)
         (cond
          ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
          ((string-suffix-p "$" pattern)
           `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
          ;; File extensions
          ((and
            ;; Completing filename or eshell
            (or minibuffer-completing-file-name
                (derived-mode-p 'eshell-mode))
            ;; File extension
            (string-match-p "\\`\\.." pattern))
           `(orderless-regexp . ,(concat "\\." (substring pattern 1) "[\x200000-\x300000]*$")))
          ;; Ignore single !
          ((string= "!" pattern) `(orderless-literal . ""))
          ;; Prefix and suffix
          ((if-let (x (assq (aref pattern 0) +orderless-dispatch-alist))
               (cons (cdr x) (substring pattern 1))
             (when-let (x (assq (aref pattern (1- (length pattern))) +orderless-dispatch-alist))
               (cons (cdr x) (substring pattern 0 -1)))))))

       ;; Define orderless style with flex by default
       (orderless-define-completion-style +orderless-with-flex
         (orderless-matching-styles '(orderless-flex orderless-literal orderless-regexp)))

       ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
       ;; There are many details to consider, but the following configurations all work well.
       ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
       ;; special styles for special completion categories, e.g., partial-completion for files.
       ;;
       ;; 1. (setq completion-styles '(orderless))
       ;; This configuration results in a very coherent completion experience,
       ;; since orderless is used always and exclusively. But it may not work
       ;; in all scenarios. Prefix expansion with TAB is not possible.
       ;;
       ;; 2. (setq completion-styles '(substring orderless))
       ;; By trying substring before orderless, TAB expansion is possible.
       ;; The downside is that you can observe the switch from substring to orderless
       ;; during completion, less coherent.
       ;;
       ;; 3. (setq completion-styles '(orderless basic))
       ;; Certain dynamic completion tables (completion-table-dynamic)
       ;; do not work properly with orderless. One can add basic as a fallback.
       ;; Basic will only be used when orderless fails, which happens only for
       ;; these special tables.
       ;;
       ;; 4. (setq completion-styles '(substring orderless basic))
       ;; Combine substring, orderless and basic.
       ;;
       (setq completion-styles '(orderless basic)
             completion-category-defaults nil
           ;;; Enable partial-completion for files.
           ;;; Either give orderless precedence or partial-completion.
           ;;; Note that completion-category-overrides is not really an override,
           ;;; but rather prepended to the default completion-styles.
             ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
             completion-category-overrides '((file (styles partial-completion initials flex)) ;; partial-completion is tried first
                                             ;; enable flex by default for symbols
                                             (command (styles +orderless-with-flex))
                                             (variable (styles +orderless-with-flex))
                                             (symbol (styles +orderless-with-flex)))
             orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
             orderless-style-dispatchers '(+orderless-dispatch)))
   #+END_SRC

***** Component matching styles
Each component of a pattern can match in any of several matching
styles. A matching style is simply a function from strings to strings
that maps a component to a regexp to match against, so it is easy to
define new matching styles. The predefined ones are:

- =orderless-regexp= the component is treated as a regexp that must
  match somewhere in the candidate.  This is simply the identity
  function!

- =orderless-literal= the component is treated as a literal string that
  must occur in the candidate.  This is just regexp-quote.

- =orderless-without-literal= the component is a treated as a literal
  string that must not occur in the candidate.  Note that nothing is
  highlighted for this matching style. You probably don’t want to use
  this style directly in orderless-matching-styles but with a style
  dispatcher instead. There is an example in the section on style
  dispatchers.

- =orderless-prefixes= the component is split at word endings and each
  piece must match at a word boundary in the candidate, occurring in
  that order.  This is similar to the built-in partial-completion
  completion-style. For example, re-re matches query-replace-regexp,
  recode-region and magit-remote-list-refs; f-d.t matches
  final-draft.txt.

- =orderless-initialism= each character of the component should appear
  as the beginning of a word in the candidate, in order.  This maps
  abc to \<a.*\<b.*\c.

- =orderless-strict-initialism= like initialism but only allow
  non-letters in between the matched words.  For example fb would
  match foo-bar but not foo-qux-bar.

- =orderless-strict-leading-initialism= like strict-initialism but
  require the first initial to match the candidate’s first word.  For
  example bb would match bar-baz but not foo-bar-baz.

- =orderless-strict-full-initialism= like strict-initialism but require
  the first initial to match the candidate’s first word and the last
  initial to be at the final word.  For example fbb would match
  foo-bar-baz but not foo-bar-baz-qux.

- =orderless-flex= the characters of the component should appear in that
  order in the candidate, but not necessarily consecutively.  This
  maps abc to a.*b.*c.

  The variable *orderless-matching-styles* can be set to a list of the
  desired matching styles to use. By default it enables the regexp and
  initialism styles.
  
**** marginalia
Marginalia can add annotations to be displayed with the completion
candidates.

There's no need to bind #'marginalia-cycle, not useful.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :hook (after-init . marginalia-mode))
#+END_SRC
    
**** TAB-SELECT corfu
1) ~Use <tab> to insert candidate and quit~::
   #+HEADER: :tangle (if (string= "TAB-INSERT" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (use-package corfu
       :custom
       (corfu-auto t)
       (corfu-cycle t)
       (corfu-auto-delay 0)
       (corfu-auto-prefix 2)
       (tab-always-indent 'complete)
       :custom-face
       (corfu-current ((t (:background "#22282c"))))
       :bind (:map corfu-map
                   ;; ("-" . corfu-insert-separator) ; Configure SPC for separator insertion
                   ([remap next-line] . nil)
                   ([remap previous-line] . nil)
                   ("\r" . nil))
       :hook (after-init . global-corfu-mode)
       :config
       (corfu-indexed-mode 1) ; for indexed csndidate selection
       (defun corfu-enable-in-minibuffer ()
         "Enable Corfu in the minibuffer if `completion-at-point' is bound."
         (when (where-is-internal #'completion-at-point (list (current-local-map)))
           ;; (setq-local corfu-auto nil) ; Enable/disable auto completion
           (corfu-mode 1)))
       (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))
   #+end_src

2) ~Use <tab> to select candidate and C-g to quit if necessary~::
   #+HEADER: :tangle (if (string= "TAB-SELECT" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (use-package corfu
       :custom
       (corfu-auto t)
       (corfu-cycle t)
       (corfu-preselect-first nil)
       (corfu-auto-delay 0)
       (corfu-auto-prefix 2)
       (tab-always-indent 'complete)
       :custom-face
       (corfu-current ((t (:background "#22282c"))))
       :bind (:map corfu-map
                   ;; ("-" . corfu-insert-separator) ; Configure SPC for separator insertion
                   ("<tab>" . corfu-next)
                   ("S-<tab>" . corfu-previous)
                   ([remap next-line] . nil)
                   ([remap previous-line] . nil)
                   ("\r" . nil))
       :hook (after-init . global-corfu-mode)
       :config
       ;; (corfu-indexed-mode 1) ; for indexed csndidate selection
       (defun corfu-enable-in-minibuffer ()
         "Enable Corfu in the minibuffer if `completion-at-point' is bound."
         (when (where-is-internal #'completion-at-point (list (current-local-map)))
           ;; (setq-local corfu-auto nil) ; Enable/disable auto completion
           (corfu-mode 1)))
       (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))
   #+end_src

***** COMMENT corfu example
#+begin_example emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
    #+end_example

**** TODO corfu-terminal

**** TODO COMMENT corfu-doc
#+begin_src emacs-lisp
  ;;;;; Corfu Doc
  (use-package corfu-doc
    :straight (corfu-doc :type git :host github :repo "galeo/corfu-doc")
    :hook   (corfu-mode . corfu-doc-mode)
    :bind (:map corfu-map
                ("C-d" . corfu-doc-toggle)
                ;;        ;; This is a manual toggle for the documentation window.
                ;;        ([remap corfu-show-documentation] . corfu-doc-toggle) ; Remap the default doc command
                ;; Scroll in the documentation window
                ("M-k" . corfu-doc-scroll-up)
                ("M-j" . corfu-doc-scroll-down))
    :custom
    (corfu-doc-max-width 70)
    (corfu-doc-max-height 20))
#+end_src

**** cape
Cape provides a bunch of Completion At Point Extensions which can be
used in combination with my Corfu completion UI or the default
completion UI.
#+begin_src emacs-lisp
  (use-package cape
    ;; :bind (("M-p p" . completion-at-point) ;; capf
    ;;        ("M-p t" . complete-tag)        ;; etags
    ;;        ("M-p d" . cape-dabbrev)        ;; or dabbrev-completion
    ;;        ("M-p h" . cape-history)
    ;;        ("M-p f" . cape-file)
    ;;        ("M-p k" . cape-keyword)
    ;;        ("M-p s" . cape-symbol)
    ;;        ("M-p a" . cape-abbrev)
    ;;        ("M-p i" . cape-ispell)
    ;;        ("M-p l" . cape-line)
    ;;        ("M-p w" . cape-dict)
    ;;        ("M-p \\" . cape-tex)
    ;;        ("M-p &" . cape-sgml)
    ;;        ("M-p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions #'cape-tex)
    ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
    ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;; (add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
    ;; (add-to-list 'completion-at-point-functions #'cape-dict)
    ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
    ;; (add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src

***** cape examples
#+begin_example emacs-lisp
;; Use Company backends as Capfs.
(setq-local completion-at-point-functions
  (mapcar #'cape-company-to-capf
    (list #'company-files #'company-ispell #'company-dabbrev)))

(defvar emojis
  '((":-D" . "😀")
    (";-)" . "😉")
    (":-/" . "😕")
    (":-(" . "🙁")
    (":-*" . "😙")))

(defun emoji-backend (action &optional arg &rest _)
  (pcase action
    ('prefix (and (memq (char-before) '(?: ?\;))
                  (cons (string (char-before)) t)))
    ('candidates (all-completions arg emojis))
    ('annotation (concat " " (cdr (assoc arg emojis))))
    ('post-completion
     (let ((str (buffer-substring (- (point) 3) (point))))
       (delete-region (- (point) 3) (point))
     (insert (cdr (assoc str emojis)))))))

;; Register emoji backend with `completion-at-point'
(setq completion-at-point-functions
      (list (cape-company-to-capf #'emoji-backend)))

;; Register emoji backend with Company.
(setq company-backends '(emoji-backend))

;; Use the company-dabbrev and company-elisp backends together.
(setq completion-at-point-functions
      (list
       (cape-company-to-capf
        (apply-partially #'company--multi-backend-adapter
                         '(company-dabbrev company-elisp)))))

;; Merge the dabbrev, dict and keyword capfs, display candidates together.
(setq-local completion-at-point-functions
            (list (cape-super-capf #'cape-dabbrev #'cape-dict #'cape-keyword)))

(setq-local completion-at-point-functions
            (list (cape-capf-buster #'some-caching-capf)))
#+end_example

**** TODO consult (a newer version should have consult-fd and others)
Consult provides practical commands based on the Emacs completion
function completing-read.
#+BEGIN_SRC emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ;; ("C-c h" . consult-history)
           ;; ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line

           ("M-s o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-s O" . occur)			   ;Default key-bind is "M-s o"
           ("M-s m" . consult-mark)
           ("M-s k" . consult-global-mark)
           ("M-s i" . consult-imenu)
           ("M-s I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ;; ("M-s d" . consult-find)
           ;; ("M-s D" . consult-locate)
           ;; ("M-s g" . consult-grep)
           ;; ("M-s G" . consult-git-grep)
           ("M-s g" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s M-l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    ;; The :init configuration is always executed (Not lazy)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)
    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; (setq vertico-multiform-commands
    ;;       '((consult-line buffer)
    ;;         (consult-imenu buffer)
    ;;         (consult-outline buffer)
    ;;         (consult-imenu-multi buffer)
    ;;         (consult-org-heading buffer)
    ;;         (consult-ripgrep buffer)
    ;;         (consult-git-grep buffer)
    ;;         (consult-project-buffer buffer)
    ;;         (consult-project-extra-find buffer)
    ;;         (consult-project-extra-find-other-window buffer)))
    )
#+END_SRC

**** consult extensions
***** consult-dir
Consult-dir allows you to easily insert directory paths into the
minibuffer prompt in Emacs.
#+begin_src emacs-lisp
  (use-package consult-dir
    :bind (([remap list-directory] . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)))
#+end_src
***** TODO COMMENT consult-flycheck
#+begin_src emacs-lisp
  (use-package consult-flycheck
    :after (consult flycheck))
#+end_src

**** embark
Embark makes it easy to choose a command to run based on what is near
point, both during a minibuffer completion session and in normal
buffers.
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :custom
    (embark-quit-after-action nil)
    ;; (embark-verbose-indicator-display-action '(display-buffer-in-side-window (side . left))) 
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\*Embark Actions\\*"
                   display-buffer-in-side-window
                   (side . left)
                   (window-parameters (mode-line-format . none)))))
#+END_SRC

Consult users will also want the embark-consult package.
#+BEGIN_SRC emacs-lisp
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

**** COMMENT wgrep
wgrep allows you to edit a grep buffer and apply those changes to the
file buffer like sed interactively.
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :commands wgrep-change-to-wgrep-mode
    :custom (wgrep-auto-save-buffer t))
#+END_SRC

#+begin_src emacs-lisp
  ;; Writable `grep' buffer
  (use-package wgrep
    :init
    (setq wgrep-auto-save-buffer t
          wgrep-change-readonly-file t))
#+end_src

**** TODO tempel

*** TODO COMMENT INPUT METHODS
**** pyim
#+begin_src emacs-lisp
  (use-package pyim
    :demand t
    :config
    ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
    (use-package pyim-basedict
      :demand t
      :config (pyim-basedict-enable))

    (setq default-input-method "pyim")

    ;; 我使用全拼
    (setq pyim-default-scheme 'quanpin)

    ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
    ;; 我自己使用的中英文动态切换规则是：
    ;; 1. 光标只有在注释里面时，才可以输入中文。
    ;; 2. 光标前是汉字字符时，才能输入中文。
    ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
    (setq-default pyim-english-input-switch-functions
                  '(pyim-probe-dynamic-english
                    pyim-probe-isearch-mode
                    pyim-probe-program-mode
                    pyim-probe-org-structure-template))

    ;; (setq-default pyim-punctuation-half-width-functions
    ;;               '(pyim-probe-punctuation-line-beginning
    ;;                 pyim-probe-punctuation-after-punctuation))

    ;; 开启拼音搜索功能
    (pyim-isearch-mode 1)

    ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
    ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
    ;; 手动安装 posframe 包。
    ;; (setq pyim-page-tooltip 'posframe)
    ;; (setq pyim-page-tooltip 'popup)

    ;; 选词框显示5个候选词
    ;; (setq pyim-page-length 5)

    :bind
    (("C-M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
     ;; ("C-;" . pyim-delete-word-from-personal-buffer)
     ))
#+end_src

*** TODO make packages in after-init-hook or defer N
*** TODO direddred

*** TODO crux
Useful additional commands.

*** org-mode
Settings about org-mode & extensions.
**** org
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :commands (org-mode)
    :custom
    (org-clock-idle-time 10)
    (org-goto-auto-isearch nil)
    (org-refile-targets '((nil . (:maxlevel . 5))))
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
    (org-refile-allow-creating-parent-nodes 'confirm)

    ;; Aesthetics & UI
    ;; (org-adapt-indentation 'headline-data) ;; adapt indentation only for data lines
    (org-catch-invisible-edits 'smart)
    ;; (org-cycle-separator-lines 0) ;; no empty lines in collapsed view
    ;; (org-ellipsis "…") ;; nicer elipses "↷" "↴" "▼"
    (org-fontify-quote-and-verse-blocks t) ;; make quotes stand out
    ;; (org-hide-emphasis-markers t)  ;; hide emph markers
    ;; (org-hide-leading-stars t)  ;; hide leading stars
    (org-image-actual-width  500) ;; show all images at 500px using imagemagik
    ;; (org-insert-heading-respect-content t) ;; insert new headings after subtree
    ;; (org-list-allow-alphabetical t) ;; allow alphabetical list
    ;; (org-pretty-entities t) ;; make latex look good, etc.
    ;; (org-pretty-entities-include-sub-superscripts t) ;; prettify sub/superscripts
    ;; (org-read-date-prefer-future 'time) ;; Incomplete dates refer to future dates & times
    ;; (org-startup-folded t) ;; start org in outline
    (org-startup-indented t) ;; start with indentation of headlines
    ;; (org-auto-align-tags nil) ;; don't auto-align tags
    (org-tags-column 0) ;; place tags directly next to headline text

    ;; Footnotes
    ;; (org-footnote-section nil) ;; place footnotes locally
    (org-footnote-auto-adjust t) ;; renumber footnotes

    ;; Insertion/Yanking
    ;; (org-M-RET-may-split-line '((default . t)))  ;; don't split line when creating a new headline, list item, or table field
    (org-yank-adjusted-subtrees t)  ;; adjust subtrees to depth when yanked
    ;; (org-yank-folded-subtrees t) ;; fold subtrees on yank

    ;; Lists
    ;; Demote sequence for list bullets
    (org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
    ;; (org-list-indent-offset 1) ;; increase sub-item indentation

    ;; Logging
    ;; (org-log-done 'time)		   ;or 'note
    ;; (org-closed-keep-when-no-todo t)
    ;; (org-log-into-drawer t)
    ;; (org-log-state-notes-insert-after-drawers nil)
    ;; (org-log-redeadline nil) ;; don't log the time a task was rescheduled/redeadlined.
    ;; (org-log-reschedule nil)

    ;; Movement
    (org-return-follows-link t) ;; make RET follow links
    (org-special-ctrl-a/e t)  ;; better movement in headers

    ;; Searching
    (org-imenu-depth 8) ;; scan to depth 8 w/imenu
    ;; (imenu-auto-rescan t) ;; make sure imenu refreshes

    ;; Source block settings
    ;; (org-src-fontify-natively t) ;; use lang-specific fontification
    (org-src-window-setup 'split-window-below) ;; edit source in other window
    ;; (org-src-tab-acts-natively t) ;; use lang bindings
    ;; (org-confirm-babel-evaluate t) ;; confirm evaluation

    ;; TODOS
    (org-use-fast-todo-selection 'expert) ;; don't use popup window for todos
    ;; don't set to DONE if children aren’t DONE
    (org-enforce-todo-dependencies t)
    (org-enforce-todo-checkbox-dependencies t)
    :custom-face
    (org-table ((t (:family "Sarasa Term SC"))))
    :config
    (defun inn/org-goto-end-of-subtree ()
      (interactive)
      (org-end-of-subtree))
    :bind(("C-c l" . org-store-link)
          ("C-c a" . org-agenda)
          ("C-c c" . org-capture)
          ("C-c b" . org-switchb)
          :map org-mode-map
          ("C-c s" . org-show-entry)
          ("C-c h" . org-hide-entry)
          ("C-c C-'" . org-edit-special)
          ("C-c C-;" . org-toggle-comment)
          ("C-c C-S-u" . inn/org-goto-end-of-subtree)
          :map org-src-mode-map
          ("C-c C-'" . org-edit-src-exit)))
#+end_src

**** COMMENT org extensions
***** org-appear
Org-Appear (Show Markup/Pretty Entities)
show markup at point -- this should be part of org!
#+begin_src emacs-lisp
  (use-package org-appear
    :straight (:type git :host github :repo "awth13/org-appear"
                     :branch "master")
    :commands (org-appear-mode)
    :custom
    (org-appear-autoemphasis  t)
    (org-appear-autolinks nil)
    (org-appear-autosubmarkers t)
    :hook (org-mode . org-appear-mode))
#+end_src

***** org-modern & org-modern-indent
Org Modern (Display properties, bullets, etc)
A nicer set of default display options
#+begin_src emacs-lisp
  (use-package org-modern
    :straight (:type git :host github :repo "minad/org-modern")
    :hook (org-mode . org-modern-mode)
    :custom-face
    (org-modern-label ((t (:height 1.0 :inherit ,(if lambda-themes-set-variable-pitch 'variable-pitch 'default)))))
    :custom
    (org-modern-hide-stars nil) ;; compatibility w/org-indent
    ;; don't use other faces
    (org-modern-priority nil)
    (org-modern-todo nil)
    (org-modern-tag t)
    ;; Customize this per your font
    (org-modern-label-border .25)
    ;; Note that these stars allow differentiation of levels
    ;; "①" "②" "③" "④" "⑤" "⑥" "⑦"
    (org-modern-star ["⦶" "⦷" "⦹" "⊕" "⍟" "⊛" "⏣" "❂"]))
#+end_src

Make org-modern work better with org-indent
#+begin_src emacs-lisp
  (use-package org-modern-indent
    :straight (:type git :host github :repo "jdtsmith/org-modern-indent")
    :hook (org-indent-mode . org-modern-indent-mode)
    :custom-face
    (org-modern-indent-line ((t (:height 1.0 :inherit lem-ui-default-font :inherit lambda-meek)))))
#+end_src

***** org-autolist
Org Autolist (Smart Lists)
Better list behavior
#+begin_src emacs-lisp
  (use-package org-autolist
    :straight (:type git :host github :repo "calvinwyoung/org-autolist")
    :hook (org-mode . org-autolist-mode))
#+end_src

***** org-download
Drag and drop images to Emacs org-mode. Courtesy of abo-abo.
https://github.com/abo-abo/org-download.
#+begin_src emacs-lisp
  (use-package org-download
    :commands (org-download-yank org-download-screenshot org-download-image)
    :custom
    (org-download-method 'directory)
    (org-download-image-dir (concat org-directory "org-pictures/"))
    (org-download-image-latex-width 500)
    (org-download-timestamp "%Y-%m-%d"))
#+end_src

**** TODO COMMENT org-agenda
#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :commands (org-agenda)
    :custom
    ;; Agenda logging
    (org-agenda-start-with-log-mode t)

    ;; Agenda styling
    (org-agenda-tags-column 0)
    ;; (org-agenda-block-separator ?–)
    (org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    (org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")

    ;; Display properties
    (org-agenda-tags-column org-tags-column)
    (org-agenda-show-inherited-tags nil)
    (org-agenda-window-setup 'only-window)
    (org-agenda-restore-windows-after-quit t)

    ;; from stack overflow https://stackoverflow.com/a/22900459/6277148
    ;; note that the formatting is nicer that just using '%b'
    (org-agenda-prefix-format
     '((agenda . " %-18c%?-10t ")
       (timeline . "  % s")
       (todo . " ")
       (tags . " ")
       (search . " %i %-12:c")))

    ;; Scheduling
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-timestamp-if-done t)
    (org-agenda-todo-ignore-scheduled 'future)
    (org-agenda-todo-ignore-deadlines 'far)
    (org-agenda-sorting-strategy
     '((agenda time-up) (todo time-up) (tags time-up) (search time-up)))
    (calendar-week-start-day 1) ;; Start week on Monday

    ;; Agenda Custom Commands
    ;; Configure custom agenda views
    ;; https://orgmode.org/manual/Storing-searches.html#Storing-searches
    ;; https://systemcrafters.cc/emacs-from-scratch/organize-your-life-with-org-mode/

    (org-agenda-custom-commands
     '(("d" "Dashboard"
        ((agenda "" ((org-agenda-span 'day)))
         (tags-todo "DEADLINE=\"<today>\""
                    ((org-agenda-overriding-header "Due Today!")))
         (tags-todo "+DEADLINE<\"<+5d>\"+DEADLINE>\"<today>\""
                    ((org-agenda-overriding-header "Due Soon")))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Tasks")))
         (tags-todo "email" ((org-agenda-overriding-header "Email")))
         ))

       ("n" "Next Tasks"
        ((todo "NEXT"
               ((org-agenda-overriding-header "Next Tasks")))))

       ("W" "Work Tasks" tags-todo "+work")

       ;; Low-effort next actions
       ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
         (org-agenda-max-todos 20)
         (org-agenda-files org-agenda-files)))

       ("w" "Workflow Status"
        ((todo "WAIT"
               ((org-agenda-overriding-header "Waiting on External")
                (org-agenda-files org-agenda-files)))
         (todo "REVIEW"
               ((org-agenda-overriding-header "In Review")
                (org-agenda-files org-agenda-files)))
         (todo "PLAN"
               ((org-agenda-overriding-header "In Planning")
                (org-agenda-todo-list-sublevels nil)
                (org-agenda-files org-agenda-files)))
         (todo "BACKLOG"
               ((org-agenda-overriding-header "Project Backlog")
                (org-agenda-todo-list-sublevels nil)
                (org-agenda-files org-agenda-files)))
         (todo "READY"
               ((org-agenda-overriding-header "Ready for Work")
                (org-agenda-files org-agenda-files)))
         (todo "ACTIVE"
               ((org-agenda-overriding-header "Active Projects")
                (org-agenda-files org-agenda-files)))
         (todo "COMPLETED"
               ((org-agenda-overriding-header "Completed Projects")
                (org-agenda-files org-agenda-files)))
         (todo "CANCELED"
               ((org-agenda-overriding-header "Cancelled Projects")
                (org-agenda-files org-agenda-files))))))))
#+end_src

**** TODO COMMENT org narrow functions
#+begin_src emacs-lisp
  ;;;;; Narrow & Advance/Retreat
  ;; Functions to advance forwards or backwards through narrowed tree
  (defun lem-org-advance ()
    (interactive)
    (when (buffer-narrowed-p)
      (goto-char (point-min))
      (widen)
      (org-forward-heading-same-level 1))
    (org-narrow-to-subtree))

  (defun lem-org-retreat ()
    (interactive)
    (when (buffer-narrowed-p)
      (goto-char (point-min))
      (widen)
      (org-backward-heading-same-level 1))
    (org-narrow-to-subtree))

  ;;;;; Clone and Narrow
  (defun lem-clone-buffer-and-narrow ()
    "Clone buffer and narrow outline tree"
    (interactive)
    (let ((buf (clone-indirect-buffer-other-window nil nil)))
      (with-current-buffer buf
        (cond ((derived-mode-p 'org-mode)
               (org-narrow-to-element))
              ((derived-mode-p 'markdown-mode)
               (markdown-narrow-to-subtree))))
      (switch-to-buffer-other-window buf)))
#+end_src

**** ob package lazy load
Avoid `org-babel-do-load-languages' since it does an eager require.
#+begin_src emacs-lisp
  (use-package ob-python
    :ensure nil
    :commands (org-babel-execute:python)
    :config
    (progn
      (setq org-babel-python-command "python3"))) ;Default to python 3.x

  (use-package ob-shell
    :ensure nil
    :commands (org-babel-execute:sh
               org-babel-expand-body:sh
               org-babel-execute:bash
               org-babel-expand-body:bash))

  (use-package ob-lisp
    :ensure nil
    :commands (org-babel-execute:lisp))

  (use-package ob-latex
    :ensure nil
    :commands (org-babel-execute:latex))

  ;;; Org Babel Tangle
  (use-package ob-tangle :ensure nil)
#+end_src

**** ox-pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :after ox
    :demand
    :bind ("C-c d" . org-pandoc-export-to-docx)
    ;; let pandoc support chinese path.
    :config (modify-coding-system-alist 'process "pandoc" 'cp936))
#+end_src

**** TODO COMMENT org-tree-slide
#+begin_src emacs-lisp
  ;; Presentation
  (use-package org-tree-slide
    :diminish
    :functions (org-display-inline-images
                org-remove-inline-images)
    :bind (:map org-mode-map
                ("s-<f7>" . org-tree-slide-mode)
                :map org-tree-slide-mode-map
                ("<left>" . org-tree-slide-move-previous-tree)
                ("<right>" . org-tree-slide-move-next-tree)
                ("S-SPC" . org-tree-slide-move-previous-tree)
                ("SPC" . org-tree-slide-move-next-tree))
    :hook ((org-tree-slide-play . (lambda ()
                                    (text-scale-increase 4)
                                    (org-display-inline-images)
                                    (read-only-mode 1)))
           (org-tree-slide-stop . (lambda ()
                                    (text-scale-increase 0)
                                    (org-remove-inline-images)
                                    (read-only-mode -1))))
    :init (setq org-tree-slide-header nil
                org-tree-slide-slide-in-effect t
                org-tree-slide-heading-emphasis nil
                org-tree-slide-cursor-init t
                org-tree-slide-modeline-display 'outside
                org-tree-slide-skip-done nil
                org-tree-slide-skip-comments t
                org-tree-slide-skip-outline-level 3))
#+end_src

**** TODO org-present | org-download | org-cliplink | org-rich-yank | valign | org-transclusion

**** TODO outshine | outorg

*** TODO text-mode
**** TODO COMMENT olivetti
#+begin_src emacs-lisp
  ;; Nice writing
  (use-package olivetti
    :diminish
    :bind ("<f7>" . olivetti-mode)
    :init (setq olivetti-body-width 0.62))
#+end_src

*** TODO COMMENT prog-mode
#+begin_src emacs-lisp
  ;; Prettify Symbols
  ;; `global-prettify-symbols-mode' is provided by prog-mode.el
  (use-package prog-mode
    :ensure nil
    :config (global-prettify-symbols-mode t))
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)

#+end_src

;; (add-hook 'prog-mode-hook 'global-display-line-numbers-mode)

#+begin_src emacs-lisp
  (defun prelude-local-comment-auto-fill ()
    (set (make-local-variable 'comment-auto-fill-only-comments) t))

  ;; show the name of the current function definition in the modeline
  (require 'which-func)
  (which-function-mode 1)

  ;; font-lock annotations like TODO in source code
  (require 'hl-todo)
  (global-hl-todo-mode 1)

  (defun prelude-prog-mode-defaults ()
    "Default coding hook, useful with any programming language."
    (when (and (executable-find ispell-program-name)
               prelude-flyspell)
      (flyspell-prog-mode))
    (when prelude-guru
      (guru-mode +1)
      (diminish 'guru-mode))
    (smartparens-mode +1)
    (prelude-enable-whitespace)
    (prelude-local-comment-auto-fill))

  (setq prelude-prog-mode-hook 'prelude-prog-mode-defaults)

  (add-hook 'prog-mode-hook (lambda ()
                              (run-hooks 'prelude-prog-mode-hook)))

  ;; enable on-the-fly syntax checking
  (if (fboundp 'global-flycheck-mode)
      (global-flycheck-mode +1)
    (add-hook 'prog-mode-hook 'flycheck-mode))
#+end_src

#+begin_src emacs-lisp
  ;;;;; Outline Navigation
  ;; Navigate elisp files easily. Outline is a built-in library and we can easily
  ;; configure it to treatment elisp comments as headings.
  (use-package outline
    :straight (:type built-in)
    :hook (prog-mode . outline-minor-mode)
    :bind (:map outline-minor-mode-map
                ("<tab>"   . outline-cycle)
                ("S-<tab>" . outline-cycle-buffer)
                ("M-j"     . outline-move-subtree-down)
                ("M-k"     . outline-move-subtree-up)
                ("M-h"     . outline-promote)
                ("M-l"     . outline-demote))
    :config
    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                ;; prevent `outline-level' from being overwritten by `lispy'
                (setq-local outline-level #'outline-level)
                ;; setup heading regexp specific to `emacs-lisp-mode'
                (setq-local outline-regexp ";;;\\(;* \\)")
                ;; heading alist allows for subtree-like folding
                (setq-local outline-heading-alist
                            '((";;; " . 1)
                              (";;;; " . 2)
                              (";;;;; " . 3)
                              (";;;;;; " . 4)
                              (";;;;;;; " . 5))))))
#+end_src

#+begin_src emacs-lisp
  ;; init-prog.el --- Initialize programming configurations.	-*- lexical-binding: t -*-

  ;; Copyright (C) 2006-2022 Vincent Zhang

  ;; Author: Vincent Zhang <seagle0128@gmail.com>
  ;; URL: https://github.com/seagle0128/.emacs.d

  ;; This file is not part of GNU Emacs.
  ;;
  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 3, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.
  ;;

  ;;; Commentary:
  ;;
  ;; General programming configurations.
  ;;

  ;;; Code:

  (require 'init-custom)
  (require 'init-const)

  ;; Prettify Symbols
  ;; e.g. display “lambda” as “λ”
  (use-package prog-mode
    :ensure nil
    :hook (prog-mode . prettify-symbols-mode)
    :init
    (setq-default prettify-symbols-alist centaur-prettify-symbols-alist)
    (setq prettify-symbols-unprettify-at-point 'right-edge))

  ;; Tree-sitter: need dynamic module feature
  (when (and centaur-tree-sitter (functionp 'module-load))
    (use-package tree-sitter
      :ensure tree-sitter-langs
      :diminish
      :hook ((after-init . global-tree-sitter-mode)
             (tree-sitter-after-on . tree-sitter-hl-mode))))

  ;; Search tool
  (use-package grep
    :ensure nil
    :commands grep-apply-setting
    :config
    (cond
     ((executable-find "ugrep")
      (grep-apply-setting
       'grep-command "ugrep --color=auto -0In -e ")
      (grep-apply-setting
       'grep-template "ugrep --color=auto -0In -e <R> <D>")
      (grep-apply-setting
       'grep-find-command '("ugrep --color=auto -0Inr -e ''" . 30))
      (grep-apply-setting
       'grep-find-template "ugrep <C> -0Inr -e <R> <D>"))
     ((executable-find "rg")
      (grep-apply-setting
       'grep-command "rg --color=auto --null -nH --no-heading -e ")
      (grep-apply-setting
       'grep-template "rg --color=auto --null --no-heading -g '!*/' -e <R> <D>")
      (grep-apply-setting
       'grep-find-command '("rg --color=auto --null -nH --no-heading -e ''" . 38))
      (grep-apply-setting
       'grep-find-template "rg --color=auto --null -nH --no-heading -e <R> <D>"))))

  ;; Cross-referencing commands
  (use-package xref
    :ensure nil
    :config
    (with-no-warnings
      ;; Use faster search tool
      (when emacs/>=28p
        (add-to-list 'xref-search-program-alist
                     '(ugrep . "xargs -0 ugrep <C> --null -ns -e <R>"))
        (cond
         ((executable-find "ugrep")
          (setq xref-search-program 'ugrep))
         ((executable-find "rg")
          (setq xref-search-program 'ripgrep))))

      ;; Select from xref candidates with Ivy
      (if emacs/>=28p
          (setq xref-show-definitions-function #'xref-show-definitions-completing-read
                xref-show-xrefs-function #'xref-show-definitions-completing-read)
        (use-package ivy-xref
          :after ivy
          :init
          (when emacs/>=27p
            (setq xref-show-definitions-function #'ivy-xref-show-defs))
          (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)))))

  ;; Jump to definition
  (use-package dumb-jump
    :pretty-hydra
    ((:title (pretty-hydra-title "Dump Jump" 'faicon "anchor")
             :color blue :quit-key "q")
     ("Jump"
      (("j" dumb-jump-go "Go")
       ("o" dumb-jump-go-other-window "Go other window")
       ("e" dumb-jump-go-prefer-external "Go external")
       ("x" dumb-jump-go-prefer-external-other-window "Go external other window"))
      "Other"
      (("i" dumb-jump-go-prompt "Prompt")
       ("l" dumb-jump-quick-look "Quick look")
       ("b" dumb-jump-back "Back"))))
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g i" . dumb-jump-go-prompt)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window)
           ("C-M-j" . dumb-jump-hydra/body))
    :init
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq dumb-jump-prefer-searcher 'rg
          dumb-jump-selector 'ivy))

  ;; Code styles
  (use-package editorconfig
    :diminish
    :hook (after-init . editorconfig-mode))

  ;; Run commands quickly
  (use-package quickrun
    :bind (("C-<f5>" . quickrun)
           ("C-c X"  . quickrun)))

  ;; Browse devdocs.io documents using EWW
  (when emacs/>=27p
    (use-package devdocs
      :commands (devdocs--installed-docs devdocs--available-docs)
      :bind (:map prog-mode-map
                  ("M-<f1>" . devdocs-dwim)
                  ("C-h D"  . devdocs-dwim))
      :init
      (defconst devdocs-major-mode-docs-alist
        '((c-mode          . ("c"))
          (c++-mode        . ("cpp"))
          (python-mode     . ("python~3.10" "python~2.7"))
          (ruby-mode       . ("ruby~3.1"))
          (go-mode         . ("go"))
          (rustic-mode     . ("rust"))
          (css-mode        . ("css"))
          (html-mode       . ("html"))
          (julia-mode      . ("julia~1.8"))
          (js-mode         . ("javascript" "jquery"))
          (js2-mode        . ("javascript" "jquery"))
          (emacs-lisp-mode . ("elisp")))
        "Alist of major-mode and docs.")

      (mapc
       (lambda (mode)
         (add-hook (intern (format "%s-hook" (car mode)))
                   (lambda ()
                     (setq-local devdocs-current-docs (cdr mode)))))
       devdocs-major-mode-docs-alist)

      (setq devdocs-data-dir (expand-file-name "devdocs" user-emacs-directory))

      (defun devdocs-dwim()
        "Look up a DevDocs documentation entry.

  Install the doc if it's not installed."
        (interactive)
        ;; Install the doc if it's not installed
        (mapc
         (lambda (slug)
           (unless (member slug (let ((default-directory devdocs-data-dir))
                                  (seq-filter #'file-directory-p
                                              (when (file-directory-p devdocs-data-dir)
                                                (directory-files "." nil "^[^.]")))))
             (mapc
              (lambda (doc)
                (when (string= (alist-get 'slug doc) slug)
                  (devdocs-install doc)))
              (devdocs--available-docs))))
         (alist-get major-mode devdocs-major-mode-docs-alist))

        ;; Lookup the symbol at point
        (devdocs-lookup nil (thing-at-point 'symbol t)))))

  ;; Misc. programming modes
  (when emacs/>=27p
    (use-package csv-mode))

  (use-package cask-mode)
  (use-package cmake-mode)
  (use-package csharp-mode)
  (use-package julia-mode)
  (use-package lua-mode)
  (use-package mermaid-mode)
  (use-package plantuml-mode)
  (use-package powershell)
  (use-package rmsbolt)                   ; A compiler output viewer
  (use-package scala-mode)
  (use-package swift-mode)
  (use-package v-mode)
  (use-package vimrc-mode)

  (use-package protobuf-mode
    :hook (protobuf-mode . (lambda ()
                             (setq imenu-generic-expression
                                   '((nil "^[[:space:]]*\\(message\\|service\\|enum\\)[[:space:]]+\\([[:alnum:]]+\\)" 2))))))

  (use-package nxml-mode
    :ensure nil
    :mode (("\\.xaml$" . xml-mode)))

  ;; New `conf-toml-mode' in Emacs 26
  (unless (fboundp 'conf-toml-mode)
    (use-package toml-mode))

  ;; Batch Mode eXtras
  (use-package bmx-mode
    :after company
    :diminish
    :hook (after-init . bmx-mode-setup-defaults))

  ;; Fish shell
  (use-package fish-mode
    :hook (fish-mode . (lambda ()
                         (add-hook 'before-save-hook
                                   #'fish_indent-before-save))))

  (provide 'init-prog)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-prog.el ends here

#+end_src

**** TODO COMMENT flymake | flycheck | flycheck-pos-tip | flycheck-indication-mode
use aspell with ispell & flycheck

;; flyspell-mode does spell-checking on the fly as you type
(require 'flyspell)
(setq ispell-program-name "aspell" ; use aspell instead of ispell
ispell-extra-args '("--sug-mode=ultra"))

#+begin_src emacs-lisp
  (use-package flymake
    :straight (:type built-in)
    :hook (prog-mode . flymake-mode)
    :custom
    (flymake-fringe-indicator-position 'left-fringe)
    (flymake-suppress-zero-counters t)
    (flymake-start-on-flymake-mode t)
    (flymake-no-changes-timeout nil)
    (flymake-start-on-save-buffer t)
    (flymake-proc-compilation-prevents-syntax-check t)
    (flymake-wrap-around nil)
    ;; Customize mode-line
    (flymake-mode-line-counter-format '("" flymake-mode-line-error-counter flymake-mode-line-warning-counter flymake-mode-line-note-counter ""))
    (flymake-mode-line-format '(" " flymake-mode-line-exception flymake-mode-line-counters)))
#+end_src

#+begin_src emacs-lisp
  (use-package flycheck
    :diminish
    :commands flycheck-redefine-standard-error-levels
    :hook (after-init . global-flycheck-mode)
    :init (setq flycheck-global-modes
                '(not text-mode outline-mode fundamental-mode lisp-interaction-mode
                      org-mode diff-mode shell-mode eshell-mode term-mode vterm-mode)
                flycheck-emacs-lisp-load-path 'inherit
                flycheck-indication-mode (if (display-graphic-p)
                                             'right-fringe
                                           'right-margin)
                ;; Only check while saving and opening files
                flycheck-check-syntax-automatically '(save mode-enabled))
    :config
    ;; Prettify indication styles
    (when (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'flycheck-fringe-bitmap-arrow
        [16 48 112 240 112 48 16] nil nil 'center))
    (flycheck-redefine-standard-error-levels "⏴" 'flycheck-fringe-bitmap-arrow)

    ;; Display Flycheck errors
    (if (childframe-workable-p)
        (use-package flycheck-posframe
          :custom-face
          (flycheck-posframe-face ((t (:foreground ,(face-foreground 'success)))))
          (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
          (flycheck-posframe-background-face ((t (:inherit tooltip))))
          (flycheck-posframe-border-face ((t (:inherit posframe-border))))
          :hook (flycheck-mode . flycheck-posframe-mode)
          :init
          (setq flycheck-posframe-border-width 1)
          (add-hook 'flycheck-posframe-inhibit-functions
                    (lambda (&rest _) (bound-and-true-p company-backend)))
          :config
          (with-no-warnings
            ;; FIXME: Add paddings to the child frame.
            ;; @see https://github.com/alexmurray/flycheck-posframe/issues/28
            (defun my-flycheck-posframe-show-posframe (errors)
              "Display ERRORS, using posframe.el library."
              (posframe-hide flycheck-posframe-buffer)
              (when (and errors
                         (not (run-hook-with-args-until-success 'flycheck-posframe-inhibit-functions)))
                (let ((poshandler (intern (format "posframe-poshandler-%s" flycheck-posframe-position)))
                      (str (flycheck-posframe-format-errors errors)))
                  (unless (functionp poshandler)
                    (setq poshandler nil))
                  (flycheck-posframe-check-position)
                  (posframe-show
                   flycheck-posframe-buffer
                   :string (concat (propertize "\n" 'face '(:height 0.3))
                                   str
                                   (propertize "\n\n" 'face '(:height 0.3)))
                   :background-color (face-background 'flycheck-posframe-background-face nil t)
                   :position (point)
                   :left-fringe 8
                   :right-fringe 8
                   :max-width (round (* (frame-width) 0.62))
                   :max-height (round (* (frame-height) 0.62))
                   :internal-border-width flycheck-posframe-border-width
                   :internal-border-color (face-background 'flycheck-posframe-border-face nil t)
                   :poshandler poshandler
                   :hidehandler #'flycheck-posframe-hidehandler))))
            (advice-add #'flycheck-posframe-show-posframe :override #'my-flycheck-posframe-show-posframe)))
      (use-package flycheck-popup-tip
        :hook (flycheck-mode . flycheck-popup-tip-mode))))
#+end_src

**** TODO auto-yasnippets

**** TODO COMMENT yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight (:type git :host github :repo "joaotavora/yasnippet")
    :defer 1
    :bind (:map yas-minor-mode-map
                ("C-'" . yas-expand))
    :config
    ;; NOTE: need to specify dirs; does not look in non-snippet subdirs
    (ignore-errors (mkdir (concat lem-all-snippets-dir "lem-snippets/")))
    (ignore-errors (mkdir (concat lem-all-snippets-dir "yasnippet-snippets/")))
    (setq yas-snippet-dirs `(,(concat lem-all-snippets-dir "lem-snippets/") ; custom snippets
                             ,(concat lem-all-snippets-dir "yasnippet-snippets/") ; yas snippets
                             ))
    (setq yas--loaddir yas-snippet-dirs)
    (setq yas-installed-snippets-dir yas-snippet-dirs)
    (setq yas--default-user-snippets-dir yas-snippet-dirs)
    ;; see https://emacs.stackexchange.com/a/30150/11934
    (defun lem-yas-org-mode-hook ()
      (setq-local yas-buffer-local-condition
                  '(not (org-in-src-block-p t))))
    (add-hook 'org-mode-hook #'lem-yas-org-mode-hook)
    ;; suppress warnings when expanding
    (with-eval-after-load 'warnings
      (push '(yasnippet backquote-change) warning-suppress-types))
    (yas-global-mode 1))
#+end_src

#+begin_src emacs-lisp
  ;; Yet another snippet extension
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook (after-init . yas-global-mode))

  ;; Collection of yasnippet snippets
  (use-package yasnippet-snippets)
#+end_src

**** TODO yasnippet-snippets
#+begin_src emacs-lisp
  ;; the official snippet collection https://github.com/AndreaCrotti/yasnippet-snippets
  (use-package yasnippet-snippets
    :straight (:type git :host github :repo "AndreaCrotti/yasnippet-snippets")
    :after (yasnippet)
    :config
    (setq yasnippet-snippets-dir (concat lem-all-snippets-dir "yasnippet-snippets")))
#+end_src

**** TODO libe-py-plugin

**** TODO format-all
#+begin_src emacs-lisp
  ;; format all, formatter for almost languages
  ;; great for programmers
  (use-package format-all
    :diminish
    :hook (prog-mode . format-all-ensure-formatter)
    :bind ("C-c f" . #'format-all-buffer))
#+end_src

**** TODO move-dup
#+begin_src emacs-lisp
  ;; move-dup, move/copy line or region
  (use-package move-dup
    :hook (after-init . global-move-dup-mode))
#+end_src
(global-set-key [M-up] 'move-dup-move-lines-up)
(global-set-key [M-down] 'move-dup-move-lines-down)
(global-set-key [M-S-up] 'move-dup-move-lines-up)
(global-set-key [M-S-down] 'move-dup-move-lines-down)

(global-set-key (kbd "C-c d") 'move-dup-duplicate-down)
(global-set-key (kbd "C-c u") 'move-dup-duplicate-up)

**** TODO quickrun
#+begin_src emacs-lisp
  (use-package quickrun)
#+end_src

**** TODO eglot
#+begin_src emacs-lisp
  ;; If you don't like eglot/lsp-mode for specific languages, some alternatives are:
  ;; - `java-mode' with `meghanada-mode' & `meghanada-server'
  ;; - `python-mode' with `elpy'

  ;;; Code:

  (use-package eglot
    :hook ((c-mode
            c++-mode
            go-mode
            java-mode
            js-mode
            python-mode
            rust-mode
            web-mode) . eglot-ensure)
    :bind (("C-c e f" . #'eglot-format)
           ("C-c e a" . #'eglot-code-actions)
           ("C-c e i" . #'eglot-code-action-organize-imports)
           ("C-c e q" . #'eglot-code-action-quickfix))
    :config
    ;; (setq eglot-ignored-server-capabilities '(:documentHighlightProvider))
    (add-to-list 'eglot-server-programs '(web-mode "vls"))
    (defun eglot-actions-before-save()
      (add-hook 'before-save-hook
                (lambda ()
                  (call-interactively #'eglot-format)
                  (call-interactively #'eglot-code-action-organize-imports))))
    (add-hook 'eglot--managed-mode-hook #'eglot-actions-before-save))

  (provide 'init-eglot)
#+end_src

#+begin_src emacs-lisp
  ;; init-lsp.el --- Initialize LSP configurations.	-*- lexical-binding: t -*-

  ;; Copyright (C) 2018-2022 Vincent Zhang

  ;; Author: Vincent Zhang <seagle0128@gmail.com>
  ;; URL: https://github.com/seagle0128/.emacs.d

  ;; This file is not part of GNU Emacs.
  ;;
  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 3, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.
  ;;

  ;;; Commentary:
  ;;
  ;; Language Server Protocol (LSP) configurations.
  ;;

  ;;; Code:

  (require 'init-const)
  (require 'init-custom)
  (require 'init-funcs)

  (pcase centaur-lsp
    ('eglot
     (use-package eglot
       :hook ((prog-mode . (lambda ()
                             (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode)
                               (eglot-ensure))))
              ((markdown-mode yaml-mode) . eglot-ensure))))
    ('lsp-mode
     ;; Performace tuning
     ;; @see https://emacs-lsp.github.io/lsp-mode/page/performance/
     (setq read-process-output-max (* 1024 1024)) ;; 1MB
     (setenv "LSP_USE_PLISTS" "true")

     ;; Emacs client for the Language Server Protocol
     ;; https://github.com/emacs-lsp/lsp-mode#supported-languages
     (use-package lsp-mode
       :diminish
       :defines lsp-clients-python-library-directories
       :commands (lsp-enable-which-key-integration
                  lsp-format-buffer
                  lsp-organize-imports
                  lsp-install-server)
       :custom-face
       (lsp-headerline-breadcrumb-path-error-face
        ((t :underline (:style wave :color ,(face-foreground 'error))
            :inherit lsp-headerline-breadcrumb-path-face)))
       (lsp-headerline-breadcrumb-path-warning-face
        ((t :underline (:style wave :color ,(face-foreground 'warning))
            :inherit lsp-headerline-breadcrumb-path-face)))
       (lsp-headerline-breadcrumb-path-info-face
        ((t :underline (:style wave :color ,(face-foreground 'success))
            :inherit lsp-headerline-breadcrumb-path-face)))
       (lsp-headerline-breadcrumb-path-hint-face
        ((t :underline (:style wave :color ,(face-foreground 'success))
            :inherit lsp-headerline-breadcrumb-path-face)))

       (lsp-headerline-breadcrumb-symbols-error-face
        ((t :inherit lsp-headerline-breadcrumb-symbols-face
            :underline (:style wave :color ,(face-foreground 'error)))))
       (lsp-headerline-breadcrumb-symbols-warning-face
        ((t :inherit lsp-headerline-breadcrumb-symbols-face
            :underline (:style wave :color ,(face-foreground 'warning)))))
       (lsp-headerline-breadcrumb-symbols-info-face
        ((t :inherit lsp-headerline-breadcrumb-symbols-face
            :underline (:style wave :color ,(face-foreground 'success)))))
       (lsp-headerline-breadcrumb-symbols-hint-face
        ((t :inherit lsp-headerline-breadcrumb-symbols-face
            :underline (:style wave :color ,(face-foreground 'success)))))
       :hook ((prog-mode . (lambda ()
                             (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode)
                               (lsp-deferred))))
              ((markdown-mode yaml-mode) . lsp-deferred)
              (lsp-mode . (lambda ()
                            ;; Integrate `which-key'
                            (lsp-enable-which-key-integration)

                            ;; Format and organize imports
                            (unless (apply #'derived-mode-p centaur-lsp-format-on-save-ignore-modes)
                              (add-hook 'before-save-hook #'lsp-format-buffer t t)
                              (add-hook 'before-save-hook #'lsp-organize-imports t t)))))
       :bind (:map lsp-mode-map
                   ("C-c C-d" . lsp-describe-thing-at-point)
                   ([remap xref-find-definitions] . lsp-find-definition)
                   ([remap xref-find-references] . lsp-find-references))
       :init (setq lsp-keymap-prefix "C-c l"
                   lsp-keep-workspace-alive nil
                   lsp-signature-auto-activate nil
                   lsp-modeline-code-actions-enable nil
                   lsp-modeline-diagnostics-enable nil
                   lsp-modeline-workspace-status-enable nil
                   lsp-headerline-breadcrumb-enable nil

                   lsp-semantic-tokens-enable t
                   lsp-progress-spinner-type 'progress-bar-filled

                   lsp-enable-file-watchers nil
                   lsp-enable-folding nil
                   lsp-enable-symbol-highlighting nil
                   lsp-enable-text-document-color nil

                   lsp-enable-indentation nil
                   lsp-enable-on-type-formatting nil

                   ;; For `lsp-clients'
                   lsp-clients-python-library-directories '("/usr/local/" "/usr/"))
       :config
       (with-no-warnings
         ;; Disable `lsp-mode' in `git-timemachine-mode'
         (defun my-lsp--init-if-visible (fn &rest args)
           (unless (bound-and-true-p git-timemachine-mode)
             (apply fn args)))
         (advice-add #'lsp--init-if-visible :around #'my-lsp--init-if-visible)

         ;; Enable `lsp-mode' in sh/bash/zsh
         (defun my-lsp-bash-check-sh-shell (&rest _)
           (and (eq major-mode 'sh-mode)
                (memq sh-shell '(sh bash zsh))))
         (advice-add #'lsp-bash-check-sh-shell :override #'my-lsp-bash-check-sh-shell)

         ;; Only display icons in GUI
         (defun my-lsp-icons-get-symbol-kind (fn &rest args)
           (and (icon-displayable-p) (apply fn args)))
         (advice-add #'lsp-icons-get-by-symbol-kind :around #'my-lsp-icons-get-symbol-kind)

         (defun my-lsp-icons-get-by-file-ext (fn &rest args)
           (and (icon-displayable-p) (apply fn args)))
         (advice-add #'lsp-icons-get-by-file-ext :around #'my-lsp-icons-get-by-file-ext)

         (defun my-lsp-icons-all-the-icons-material-icon (icon-name face fallback &optional feature)
           (if (and (icon-displayable-p)
                    (lsp-icons--enabled-for-feature feature))
               (all-the-icons-material icon-name
                                       :face face)
             (propertize fallback 'face face)))
         (advice-add #'lsp-icons-all-the-icons-material-icon
                     :override #'my-lsp-icons-all-the-icons-material-icon))

       (defun lsp-update-server ()
         "Update LSP server."
         (interactive)
         ;; Equals to `C-u M-x lsp-install-server'
         (lsp-install-server t)))

     (use-package lsp-ui
       :custom-face
       (lsp-ui-sideline-code-action ((t (:inherit warning))))
       :pretty-hydra
       ((:title (pretty-hydra-title "LSP UI" 'faicon "rocket" :face 'all-the-icons-green)
                :color amaranth :quit-key "q")
        ("Doc"
         (("d e" (progn
                   (lsp-ui-doc-enable (not lsp-ui-doc-mode))
                   (setq lsp-ui-doc-enable (not lsp-ui-doc-enable)))
           "enable" :toggle lsp-ui-doc-mode)
          ("d s" (setq lsp-ui-doc-include-signature (not lsp-ui-doc-include-signature))
           "signature" :toggle lsp-ui-doc-include-signature)
          ("d t" (setq lsp-ui-doc-position 'top)
           "top" :toggle (eq lsp-ui-doc-position 'top))
          ("d b" (setq lsp-ui-doc-position 'bottom)
           "bottom" :toggle (eq lsp-ui-doc-position 'bottom))
          ("d p" (setq lsp-ui-doc-position 'at-point)
           "at point" :toggle (eq lsp-ui-doc-position 'at-point))
          ("d h" (setq lsp-ui-doc-header (not lsp-ui-doc-header))
           "header" :toggle lsp-ui-doc-header)
          ("d f" (setq lsp-ui-doc-alignment 'frame)
           "align frame" :toggle (eq lsp-ui-doc-alignment 'frame))
          ("d w" (setq lsp-ui-doc-alignment 'window)
           "align window" :toggle (eq lsp-ui-doc-alignment 'window)))
         "Sideline"
         (("s e" (progn
                   (lsp-ui-sideline-enable (not lsp-ui-sideline-mode))
                   (setq lsp-ui-sideline-enable (not lsp-ui-sideline-enable)))
           "enable" :toggle lsp-ui-sideline-mode)
          ("s h" (setq lsp-ui-sideline-show-hover (not lsp-ui-sideline-show-hover))
           "hover" :toggle lsp-ui-sideline-show-hover)
          ("s d" (setq lsp-ui-sideline-show-diagnostics (not lsp-ui-sideline-show-diagnostics))
           "diagnostics" :toggle lsp-ui-sideline-show-diagnostics)
          ("s s" (setq lsp-ui-sideline-show-symbol (not lsp-ui-sideline-show-symbol))
           "symbol" :toggle lsp-ui-sideline-show-symbol)
          ("s c" (setq lsp-ui-sideline-show-code-actions (not lsp-ui-sideline-show-code-actions))
           "code actions" :toggle lsp-ui-sideline-show-code-actions)
          ("s i" (setq lsp-ui-sideline-ignore-duplicate (not lsp-ui-sideline-ignore-duplicate))
           "ignore duplicate" :toggle lsp-ui-sideline-ignore-duplicate))
         "Action"
         (("h" backward-char "←")
          ("j" next-line "↓")
          ("k" previous-line "↑")
          ("l" forward-char "→")
          ("C-a" mwim-beginning-of-code-or-line nil)
          ("C-e" mwim-end-of-code-or-line nil)
          ("C-b" backward-char nil)
          ("C-n" next-line nil)
          ("C-p" previous-line nil)
          ("C-f" forward-char nil)
          ("M-b" backward-word nil)
          ("M-f" forward-word nil)
          ("c" lsp-ui-sideline-apply-code-actions "apply code actions"))))
       :bind (("C-c u" . lsp-ui-imenu)
              :map lsp-ui-mode-map
              ("M-<f6>" . lsp-ui-hydra/body)
              ("s-<return>" . lsp-ui-sideline-apply-code-actions)
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references))
       :hook (lsp-mode . lsp-ui-mode)
       :init
       (setq lsp-ui-sideline-show-diagnostics nil
             lsp-ui-sideline-ignore-duplicate t
             lsp-ui-doc-delay 0.1
             lsp-ui-imenu-colors `(,(face-foreground 'font-lock-keyword-face)
                                   ,(face-foreground 'font-lock-string-face)
                                   ,(face-foreground 'font-lock-constant-face)
                                   ,(face-foreground 'font-lock-variable-name-face)))
       ;; Set correct color to borders
       (defun my-lsp-ui-doc-set-border ()
         "Set the border color of lsp doc."
         (setq lsp-ui-doc-border
               (if (facep 'posframe-border)
                   (face-background 'posframe-border nil t)
                 (face-foreground 'shadow nil t))))
       (my-lsp-ui-doc-set-border)
       (add-hook 'after-load-theme-hook #'my-lsp-ui-doc-set-border t)
       :config
       (with-no-warnings
         ;; Display peek in child frame if possible
         ;; @see https://github.com/emacs-lsp/lsp-ui/issues/441
         (defvar lsp-ui-peek--buffer nil)
         (defun lsp-ui-peek--peek-display (fn src1 src2)
           (if (childframe-workable-p)
               (-let* ((win-width (frame-width))
                       (lsp-ui-peek-list-width (/ (frame-width) 2))
                       (string (-some--> (-zip-fill "" src1 src2)
                                 (--map (lsp-ui-peek--adjust win-width it) it)
                                 (-map-indexed 'lsp-ui-peek--make-line it)
                                 (-concat it (lsp-ui-peek--make-footer)))))
                 (setq lsp-ui-peek--buffer (get-buffer-create " *lsp-peek--buffer*"))
                 (posframe-show lsp-ui-peek--buffer
                                :string (mapconcat 'identity string "")
                                :min-width (frame-width)
                                :internal-border-color (face-background 'posframe-border nil t)
                                :internal-border-width 1
                                :poshandler #'posframe-poshandler-frame-center))
             (funcall fn src1 src2)))
         (defun lsp-ui-peek--peek-destroy (fn)
           (if (childframe-workable-p)
               (progn
                 (when (bufferp lsp-ui-peek--buffer)
                   (posframe-hide lsp-ui-peek--buffer))
                 (setq lsp-ui-peek--last-xref nil))
             (funcall fn)))
         (advice-add #'lsp-ui-peek--peek-new :around #'lsp-ui-peek--peek-display)
         (advice-add #'lsp-ui-peek--peek-hide :around #'lsp-ui-peek--peek-destroy)

         ;; Handle docs
         (defun my-lsp-ui-doc--handle-hr-lines nil
           (let (bolp next before after)
             (goto-char 1)
             (while (setq next (next-single-property-change (or next 1) 'markdown-hr))
               (when (get-text-property next 'markdown-hr)
                 (goto-char next)
                 (setq bolp (bolp)
                       before (char-before))
                 (delete-region (point) (save-excursion (forward-visible-line 1) (point)))
                 (setq after (char-after (1+ (point))))
                 (insert
                  (concat
                   (and bolp (not (equal before ?\n)) (propertize "\n" 'face '(:height 0.5)))
                   (propertize "\n" 'face '(:height 0.5))
                   (propertize " "
                               ;; :align-to is added with lsp-ui-doc--fix-hr-props
                               'display '(space :height (1))
                               'lsp-ui-doc--replace-hr t
                               'face `(:background ,(face-foreground 'font-lock-comment-face)))
                   ;; :align-to is added here too
                   (propertize " " 'display '(space :height (1)))
                   (and (not (equal after ?\n)) (propertize " \n" 'face '(:height 0.5)))))))))
         (advice-add #'lsp-ui-doc--handle-hr-lines :override #'my-lsp-ui-doc--handle-hr-lines)))

     ;; Ivy integration
     (use-package lsp-ivy
       :after lsp-mode
       :bind (:map lsp-mode-map
                   ([remap xref-find-apropos] . lsp-ivy-workspace-symbol)
                   ("C-s-." . lsp-ivy-global-workspace-symbol))
       :config
       (with-no-warnings
         (when (icon-displayable-p)
           (defconst lsp-ivy-symbol-kind-icons
             `(,(all-the-icons-material "find_in_page" :height 0.9 :v-adjust -0.15) ; Unknown - 0
               ,(all-the-icons-faicon "file-o" :height 0.9 :v-adjust -0.02) ; File - 1
               ,(all-the-icons-material "view_module" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-lblue) ; Module - 2
               ,(all-the-icons-material "view_module" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue) ; Namespace - 3
               ,(all-the-icons-octicon "package" :height 0.9 :v-adjust -0.15) ; Package - 4
               ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange) ; Class - 5
               ,(all-the-icons-faicon "cube" :height 0.9 :v-adjust -0.02 :face 'all-the-icons-purple) ; Method - 6
               ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02) ; Property - 7
               ,(all-the-icons-octicon "tag" :height 0.95 :v-adjust 0 :face 'all-the-icons-lblue) ; Field - 8
               ,(all-the-icons-faicon "cube" :height 0.9 :v-adjust -0.02 :face 'all-the-icons-lpurple) ; Constructor - 9
               ,(all-the-icons-material "storage" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange) ; Enum - 10
               ,(all-the-icons-material "share" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-lblue) ; Interface - 11
               ,(all-the-icons-faicon "cube" :height 0.9 :v-adjust -0.02 :face 'all-the-icons-purple) ; Function - 12
               ,(all-the-icons-octicon "tag" :height 0.95 :v-adjust 0 :face 'all-the-icons-lblue) ; Variable - 13
               ,(all-the-icons-faicon "cube" :height 0.9 :v-adjust -0.02 :face 'all-the-icons-purple) ; Constant - 14
               ,(all-the-icons-faicon "text-width" :height 0.9 :v-adjust -0.02) ; String - 15
               ,(all-the-icons-material "format_list_numbered" :height 0.95 :v-adjust -0.15) ; Number - 16
               ,(all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue) ; Boolean - 17
               ,(all-the-icons-material "view_array" :height 0.95 :v-adjust -0.15) ; Array - 18
               ,(all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-blue) ; Object - 19
               ,(all-the-icons-faicon "key" :height 0.9 :v-adjust -0.02) ; Key - 20
               ,(all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0) ; Null - 21
               ,(all-the-icons-material "format_align_right" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue) ; EnumMember - 22
               ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange) ; Struct - 23
               ,(all-the-icons-octicon "zap" :height 0.9 :v-adjust 0 :face 'all-the-icons-orange) ; Event - 24
               ,(all-the-icons-material "control_point" :height 0.9 :v-adjust -0.15) ; Operator - 25
               ,(all-the-icons-faicon "arrows" :height 0.9 :v-adjust -0.02) ; TypeParameter - 26
               ))

           (lsp-defun my-lsp-ivy--format-symbol-match
                      ((sym &as &SymbolInformation :kind :location (&Location :uri))
                       project-root)
                      "Convert the match returned by `lsp-mode` into a candidate string."
                      (let* ((sanitized-kind (if (length> lsp-ivy-symbol-kind-icons kind) kind 0))
                             (type (elt lsp-ivy-symbol-kind-icons sanitized-kind))
                             (typestr (if lsp-ivy-show-symbol-kind (format "%s " type) ""))
                             (pathstr (if lsp-ivy-show-symbol-filename
                                          (propertize (format " · %s" (file-relative-name (lsp--uri-to-path uri) project-root))
                                                      'face font-lock-comment-face)
                                        "")))
                        (concat typestr (lsp-render-symbol-information sym ".") pathstr)))
           (advice-add #'lsp-ivy--format-symbol-match :override #'my-lsp-ivy--format-symbol-match))))

     ;; Debug
     (use-package dap-mode
       :defines dap-python-executable
       :functions dap-hydra/nil
       :diminish
       :bind (:map lsp-mode-map
                   ("<f5>" . dap-debug)
                   ("M-<f5>" . dap-hydra))
       :hook ((after-init     . dap-auto-configure-mode)
              (dap-stopped    . (lambda (_) (dap-hydra)))
              (dap-terminated . (lambda (_) (dap-hydra/nil)))

              (python-mode            . (lambda () (require 'dap-python)))
              (ruby-mode              . (lambda () (require 'dap-ruby)))
              (go-mode                . (lambda () (require 'dap-go)))
              (java-mode              . (lambda () (require 'dap-java)))
              ((c-mode c++-mode)      . (lambda () (require 'dap-lldb)))
              ((objc-mode swift-mode) . (lambda () (require 'dap-lldb)))
              (php-mode               . (lambda () (require 'dap-php)))
              (elixir-mode            . (lambda () (require 'dap-elixir)))
              ((js-mode js2-mode)     . (lambda () (require 'dap-chrome)))
              (powershell-mode        . (lambda () (require 'dap-pwsh))))
       :init (when (executable-find "python3")
               (setq dap-python-executable "python3")))

     ;; `lsp-mode' and `treemacs' integration
     (use-package lsp-treemacs
       :after lsp-mode
       :bind (:map lsp-mode-map
                   ("C-<f8>" . lsp-treemacs-errors-list)
                   ("M-<f8>" . lsp-treemacs-symbols)
                   ("s-<f8>" . lsp-treemacs-java-deps-list))
       :init (lsp-treemacs-sync-mode 1)
       :config
       (with-eval-after-load 'ace-window
         (when (boundp 'aw-ignored-buffers)
           (push 'lsp-treemacs-symbols-mode aw-ignored-buffers)
           (push 'lsp-treemacs-java-deps-mode aw-ignored-buffers)))

       (with-no-warnings
         (when (icon-displayable-p)
           (treemacs-create-theme "centaur-colors"
                                  :extends "doom-colors"
                                  :config
                                  (progn
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "repo" :height 1.0 :v-adjust -0.1 :face 'all-the-icons-blue))
                                     :extensions (root))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue))
                                     :extensions (boolean-data))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "settings_input_component" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-orange))
                                     :extensions (class))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "palette" :height 0.95 :v-adjust -0.15))
                                     :extensions (color-palette))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "square-o" :height 0.95 :v-adjust -0.15))
                                     :extensions (constant))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "file-text-o" :height 0.95 :v-adjust -0.05))
                                     :extensions (document))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "storage" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-orange))
                                     :extensions (enumerator))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "format_align_right" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue))
                                     :extensions (enumitem))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "bolt" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-orange))
                                     :extensions (event))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue))
                                     :extensions (field))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "search" :height 0.95 :v-adjust -0.05))
                                     :extensions (indexer))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "filter_center_focus" :height 0.95 :v-adjust -0.15))
                                     :extensions (intellisense-keyword))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "share" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue))
                                     :extensions (interface))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue))
                                     :extensions (localvariable))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "cube" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-purple))
                                     :extensions (method))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "view_module" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue))
                                     :extensions (namespace))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "format_list_numbered" :height 0.95 :v-adjust -0.15))
                                     :extensions (numeric))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "control_point" :height 0.95 :v-adjust -0.2))
                                     :extensions (operator))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
                                     :extensions (property))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "format_align_center" :height 0.95 :v-adjust -0.15))
                                     :extensions (snippet))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "text-width" :height 0.9 :v-adjust -0.05))
                                     :extensions (string))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange))
                                     :extensions (structure))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "format_align_center" :height 0.95 :v-adjust -0.15))
                                     :extensions (template))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "chevron-right" :height 0.75 :v-adjust 0.1 :face 'font-lock-doc-face))
                                     :extensions (collapsed) :fallback "+")
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "chevron-down" :height 0.75 :v-adjust 0.1 :face 'font-lock-doc-face))
                                     :extensions (expanded) :fallback "-")
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-binary" :height 0.9  :v-adjust 0.0 :face 'font-lock-doc-face))
                                     :extensions (classfile))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-blue))
                                     :extensions (default-folder-opened))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-blue))
                                     :extensions (default-folder))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-green))
                                     :extensions (default-root-folder-opened))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-green))
                                     :extensions (default-root-folder))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-binary" :height 0.9 :v-adjust 0.0 :face 'font-lock-doc-face))
                                     :extensions ("class"))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-zip" :height 0.9 :v-adjust 0.0 :face 'font-lock-doc-face))
                                     :extensions (file-type-jar))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                                     :extensions (folder-open))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'font-lock-doc-face))
                                     :extensions (folder))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-orange))
                                     :extensions (folder-type-component-opened))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-orange))
                                     :extensions (folder-type-component))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-green))
                                     :extensions (folder-type-library-opened))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-green))
                                     :extensions (folder-type-library))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-pink))
                                     :extensions (folder-type-maven-opened))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-pink))
                                     :extensions (folder-type-maven))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'font-lock-type-face))
                                     :extensions (folder-type-package-opened))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'font-lock-type-face))
                                     :extensions (folder-type-package))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "plus" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                                     :extensions (icon-create))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "list" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                                     :extensions (icon-flat))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-material "share" :height 0.95 :v-adjust -0.2 :face 'all-the-icons-lblue))
                                     :extensions (icon-hierarchical))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "link" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                                     :extensions (icon-link))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "refresh" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                                     :extensions (icon-refresh))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "chain-broken" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                                     :extensions (icon-unlink))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-alltheicon "java" :height 1.0 :v-adjust 0.0 :face 'all-the-icons-orange))
                                     :extensions (jar))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "book" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-green))
                                     :extensions (library))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "folder-open" :face 'all-the-icons-lblue))
                                     :extensions (packagefolder-open))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue))
                                     :extensions (packagefolder))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-faicon "archive" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                                     :extensions (package))
                                    (treemacs-create-icon
                                     :icon (format "%s " (all-the-icons-octicon "repo" :height 1.0 :v-adjust -0.1 :face 'all-the-icons-blue))
                                     :extensions (java-project))))

           (setq lsp-treemacs-theme "centaur-colors"))))

     ;; Python
     (use-package lsp-pyright
       :preface
       ;; Use yapf to format
       (defun lsp-pyright-format-buffer ()
         (interactive)
         (when (and (executable-find "yapf") buffer-file-name)
           (call-process "yapf" nil nil nil "-i" buffer-file-name)))
       :hook (python-mode . (lambda ()
                              (require 'lsp-pyright)
                              (add-hook 'after-save-hook #'lsp-pyright-format-buffer t t)))
       :init (when (executable-find "python3")
               (setq lsp-pyright-python-executable-cmd "python3")))

     ;; C/C++/Objective-C
     (use-package ccls
       :defines projectile-project-root-files-top-down-recurring
       :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda () (require 'ccls)))
       :config
       (with-eval-after-load 'projectile
         (setq projectile-project-root-files-top-down-recurring
               (append '("compile_commands.json" ".ccls")
                       projectile-project-root-files-top-down-recurring)))
       (with-no-warnings
         ;; FIXME: fail to call ccls.xref
         ;; @see https://github.com/emacs-lsp/emacs-ccls/issues/109
         (cl-defmethod my-lsp-execute-command
           ((_server (eql ccls)) (command (eql ccls.xref)) arguments)
           (when-let ((xrefs (lsp--locations-to-xref-items
                              (lsp--send-execute-command (symbol-name command) arguments))))
             (xref--show-xrefs xrefs nil)))
         (advice-add #'lsp-execute-command :override #'my-lsp-execute-command)))

     ;; Swift
     (use-package lsp-sourcekit)

     ;; Julia
     (use-package lsp-julia
       :hook (julia-mode . (lambda () (require 'lsp-julia))))

     ;; Java
     (use-package lsp-java
       :hook (java-mode . (lambda () (require 'lsp-java))))))

  (when (memq centaur-lsp '(lsp-mode eglot))
    ;; Enable LSP in org babel
    ;; https://github.com/emacs-lsp/lsp-mode/issues/377
    (cl-defmacro lsp-org-babel-enable (lang)
      "Support LANG in org source code block."
      (cl-check-type lang string)
      (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
             (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
        `(progn
           (defun ,intern-pre (info)
             (setq buffer-file-name (or (->> info caddr (alist-get :file))
                                        "org-src-babel.tmp"))
             (pcase centaur-lsp
               ('eglot
                (when (fboundp 'eglot-ensure)
                  (eglot-ensure)))
               ('lsp-mode
                (when (fboundp 'lsp-deferred)
                  ;; Avoid headerline conflicts
                  (setq-local lsp-headerline-breadcrumb-enable nil)
                  (lsp-deferred)))
               (_
                (user-error "LSP:: invalid `centaur-lsp' type"))))
           (put ',intern-pre 'function-documentation
                (format "Enable `%s' in the buffer of org source block (%s)."
                        centaur-lsp (upcase ,lang)))

           (if (fboundp ',edit-pre)
               (advice-add ',edit-pre :after ',intern-pre)
             (progn
               (defun ,edit-pre (info)
                 (,intern-pre info))
               (put ',edit-pre 'function-documentation
                    (format "Prepare local buffer environment for org source block (%s)."
                            (upcase ,lang))))))))

    (defconst org-babel-lang-list
      '("go" "python" "ipython" "ruby" "js" "css" "sass" "c" "rust" "java" "cpp" "c++"))
    (add-to-list 'org-babel-lang-list "shell")
    (dolist (lang org-babel-lang-list)
      (eval `(lsp-org-babel-enable ,lang))))

  (provide 'init-lsp)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-lsp.el ends here

#+end_src

#+begin_src emacs-lisp
  (use-package lsp-mode
    :defer t
    :init
    (setq lsp-server-install-dir (concat spacemacs-cache-directory "lsp/")
          lsp-session-file (concat lsp-server-install-dir (file-name-nondirectory ".lsp-session-v1"))
          lsp-eslint-library-choices-file (concat lsp-server-install-dir ".lsp-eslint-choices")
          lsp-yaml-schema-store-local-db (concat lsp-server-install-dir "lsp-yaml-schemas.json")
          lsp-vetur-global-snippets-dir (concat spacemacs-start-directory "snippets/vetur"))
    ;; If you find something else should be ignored, you could also set them here
    :config
    (progn
      (if lsp-use-upstream-bindings
          (spacemacs/lsp-bind-upstream-keys)
        (spacemacs/lsp-bind-keys))
      (setq lsp-prefer-capf t)
      (add-hook 'lsp-after-open-hook (lambda ()
                                       "Setup xref jump handler"
                                       (spacemacs//setup-lsp-jump-handler)))))
#+end_src

**** TODO make script executable in linux

;; make a shell script executable automatically on save
(add-hook 'after-save-hook
'executable-make-buffer-file-executable-if-script-p)
          
**** TODO COMMENT rainbow-delimiters & rainbow-identifiers & rainbow-mode & color-identifiers
#+begin_src emacs-lisp
  ;;;; Delimiters & Identifiers
  ;;;;; Visualization of Delimiters (Rainbow Delimiters)
  ;; https://github.com/Fanael/rainbow-delimiters Useful package that will highlight
  ;; delimiters such as parentheses, brackets or braces according to their depth. Each
  ;; successive level is highlighted in a different color. This makes it easy to spot
  ;; matching delimiters, orient yourself in the code, and tell which statements are at
  ;; a given depth.
  (use-package rainbow-delimiters
    :commands rainbow-delimiters-mode
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  ;; https://github.com/Fanael/rainbow-identifiers Rainbow identifiers mode is an Emacs
  ;; minor mode providing highlighting of identifiers based on their names. Each
  ;; identifier gets a color based on a hash of its name.
  (use-package rainbow-identifiers
    :commands rainbow-identifiers-mode)
#+end_src

#+begin_src emacs-lisp
  ;; Colorize color names in buffers
  (use-package rainbow-mode
    :diminish
    :defines helpful-mode-map
    :bind (:map help-mode-map
                ("w" . rainbow-mode))
    :hook ((html-mode php-mode helpful-mode) . rainbow-mode)
    :init (with-eval-after-load 'helpful
            (bind-key "w" #'rainbow-mode helpful-mode-map))
    :config
    (with-no-warnings
      ;; HACK: Use overlay instead of text properties to override `hl-line' faces.
      ;; @see https://emacs.stackexchange.com/questions/36420
      (defun my-rainbow-colorize-match (color &optional match)
        (let* ((match (or match 0))
               (ov (make-overlay (match-beginning match) (match-end match))))
          (overlay-put ov 'ovrainbow t)
          (overlay-put ov 'face `((:foreground ,(if (> 0.5 (rainbow-x-color-luminance color))
                                                    "white" "black"))
                                  (:background ,color)))))
      (advice-add #'rainbow-colorize-match :override #'my-rainbow-colorize-match)

      (defun my-rainbow-clear-overlays ()
        "Clear all rainbow overlays."
        (remove-overlays (point-min) (point-max) 'ovrainbow t))
      (advice-add #'rainbow-turn-off :after #'my-rainbow-clear-overlays)))

  ;; Highlight brackets according to their depth
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

**** TODO embrace ??

**** TODO COMMENT highlight-indent-guides-mode | indent-guide
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq-default highlight-indent-guides-method 'character
                  highlight-indent-guides-character ?\│
                  ;; default is \x2502 but it is very slow on Mac
                  ;; highlight-indent-guides-character ?\xFFE8
                  highlight-indent-guides-responsive 'top
                  highlight-indent-guides-auto-odd-face-perc 5
                  highlight-indent-guides-auto-even-face-perc 5
                  highlight-indent-guides-auto-character-face-perc 15
                  highlight-indent-guides-auto-enabled t))
#+end_src

**** TODO flymake-collection

**** TODO multi-compile

**** TODO bug-hunter

**** TODO esup

**** TODO citre (Ctags)
#+begin_src emacs-lisp
  ;; init-ctags.el --- Initialize TAGS configurations.	-*- lexical-binding: t -*-

  ;; Copyright (C) 2018-2022 Vincent Zhang

  ;; Author: Vincent Zhang <seagle0128@gmail.com>
  ;; URL: https://github.com/seagle0128/.emacs.d

  ;; This file is not part of GNU Emacs.
  ;;
  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 3, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.
  ;;

  ;;; Commentary:
  ;;
  ;; TAGS configurations.
  ;;

  ;;; Code:

  (require 'init-const)
  (require 'init-custom)

  ;; Ctags IDE on the True Editor
  ;; @see https://github.com/universal-ctags/citre#quick-start
  (use-package citre
    :diminish
    :commands citre-jump-back
    :functions projectile-project-root
    :bind (:map prog-mode-map
                ("C-x c j" . citre-jump+)
                ("C-x c k" . citre-jump-back+)
                ("C-x c p" . citre-peek)
                ("C-x c a" . citre-ace-peek)
                ("C-x c u" . citre-update-this-tags-file))
    :init
    (setq citre-auto-enable-citre-mode-modes '(prog-mode)
          citre-default-create-tags-file-location 'global-cache
          citre-use-project-root-when-creating-tags t
          citre-prompt-language-for-ctags-command t)

    (with-eval-after-load 'projectile
      (setq citre-project-root-function #'projectile-project-root))

    (defun citre-jump+ ()
      "Jump to the definition of the symbol at point.
  Fallback to `xref-find-definitions'."
      (interactive)
      (condition-case _
          (citre-jump)
        (error (call-interactively #'xref-find-definitions))))

    (defun citre-jump-back+ ()
      "Go back to the position before last `citre-jump'.
  Fallback to `xref-go-back'."
      (interactive)
      (condition-case _
          (citre-jump-back)
        (error (call-interactively #'xref-go-back))))
    :config
    (with-no-warnings
      ;; Use Citre xref backend as a fallback
      (define-advice xref--create-fetcher (:around (fn &rest args) fallback)
        (let ((fetcher (apply fn args))
              (citre-fetcher
               (let ((xref-backend-functions '(citre-xref-backend t)))
                 (ignore xref-backend-functions)
                 (apply fn args))))
          (lambda ()
            (or (with-demoted-errors "%s, fallback to citre"
                  (funcall fetcher))
                (funcall citre-fetcher)))))

      ;; Combine completions from Citre and lsp
      (defun lsp-citre-capf-function ()
        "A capf backend that tries lsp first, then Citre."
        (let ((lsp-result (cond
                           ((bound-and-true-p lsp-mode)
                            (and (fboundp #'lsp-completion-at-point)
                                 (lsp-completion-at-point)))
                           ((bound-and-true-p eglot--managed-mode)
                            (and (fboundp #'eglot-completion-at-point)
                                 (eglot-completion-at-point))))))
          (if (and lsp-result
                   (try-completion
                    (buffer-substring (nth 0 lsp-result)
                                      (nth 1 lsp-result))
                    (nth 2 lsp-result)))
              lsp-result
            (citre-completion-at-point))))

      (defun enable-lsp-citre-capf-backend ()
        "Enable the lsp + Citre capf backend in current buffer."
        (add-hook 'completion-at-point-functions #'lsp-citre-capf-function nil t))

      (add-hook 'citre-mode-hook #'enable-lsp-citre-capf-backend)))

  (provide 'init-ctags)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-ctags.el ends here
#+end_src

*** TODO COMMENT program languages
May look at spacemacs' [[file:~/emacs.init/spacemacs/layers/LAYERS.org::*Programming languages][Programming languages]]
**** TODO python
***** cabin's
#+begin_src emacs-lisp
  ;;;###autoload
  (defun check-run-command (command arg-string)
    "Find the EXEC-FILE and run the BODY."

    (if (not (executable-find command))
        (message "[ERROR]: <%s> not found!" command)
      (save-buffer)
      (shell-command (format "%s %s" command arg-string))
      (revert-buffer t t t)))

  ;; BE CAREFUL! Maybe bugs here, always call this function manually.
  ;;;###autoload
  (defun python-isort ()
    "Sort the imports with isort."
    (interactive)
    (check-run-command "isort"
                       (format "--atomic --profile=black %s"
                               (buffer-file-name))))

  ;; BE CAREFUL! Maybe bugs here, always call this function manually.
  ;;;###autoload
  (defun python-remove-all-unused-imports ()
    "Remove all the unused imports, do NOT use pyimport, as it has bugs.
  eg.from datetime import datetime."
    (interactive)
    (check-run-command "autoflake"
                       (format "-i --remove-all-unused-imports %s"
                               (buffer-file-name))))

  (add-hook
   'python-mode-hook
   (lambda ()
     (define-key python-mode-map (kbd "C-c p s") 'python-isort)
     (define-key python-mode-map (kbd "C-c p r") 'python-remove-all-unused-imports)))

#+end_src
***** rational's
#+begin_src emacs-lisp
  ;;; rational-python.el --- python configuration      -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022
  ;; SPDX-License-Identifier: MIT

  ;; Author: System Crafters Community
  ;; Keywords: python

  ;;; Commentary:

  ;; Python development environment configuration.  Several python
  ;; packages can be installed with `pip'. Many of these are needed by
  ;; the Emacs packages used in this configuration.

  ;; * autopep8      -- automatically formats python code to conform to PEP 8 style guide
  ;; * black         -- uncompromising code formatter
  ;; * flake8        -- style guide enforcement
  ;; * importmagic   -- automatically add, remove, manage imports
  ;; * ipython       -- interactive python shell
  ;; * yapf          -- formatter for python code

  ;; Emacs packages to support python development:
  ;; * anaconda      -- code navigation, documentation and completion
  ;; * blacken       -- buffer formatting on save using black
  ;;                    (need to pip install black)
  ;; * eglot         -- language server integration
  ;;                    (need to pip install pyright)
  ;; * numpydoc      -- python doc templates, uses `yasnippets'
  ;; * pythonic      -- utility packages for running python in different
  ;;                    environments (dependency of anaconda)
  ;; * pyvenv        -- virtualenv wrapper

  ;; Suggested additional keybindings for python-mode
  ;; (with-eval-after-load "python"
  ;;   (define-key python-mode-map (kbd "C-c C-n") #'numpydoc-generate)
  ;;   (define-key python-mode-map (kbd "C-c e n") #'flymake-goto-next-error)
  ;;   (define-key python-mode-map (kbd "C-c e p") #'flymake-goto-prev-error))

  ;; Suggested keybindings for pyvenv mode
  ;; (with-eval-after-load "pyvenv"
  ;;   (define-key pyvenv-mode-map (kbd "C-c p a") #'pyvenv-activate)
  ;;   (define-key pyvenv-mode-map (kbd "C-c p d") #'pyvenv-deactivate)
  ;;   (define-key pyvenv-mode-map (kbd "C-c p w") #'pyvenv-workon))

  ;;; Code:

  (rational-package-install-package 'anaconda-mode)
  (rational-package-install-package 'blacken)
  (rational-package-install-package 'eglot)
  (rational-package-install-package 'numpydoc)
  (rational-package-install-package 'pyvenv)

  ;; Hooks
  (add-hook 'python-mode-hook #'anaconda-mode)
  (add-hook 'python-mode-hook #'blacken-mode)
  (add-hook 'python-mode-hook #'eldoc-mode)
  (add-hook 'python-mode-hook #'eglot-ensure)
  (add-hook 'python-mode-hook #'pyvenv-mode)
  (add-hook 'python-mode-hook #'pyvenv-tracking-mode)

  
  ;;; anaconda
  ;; move anaconda python installation directory to
  ;; `rational-config-var-directory'
  (customize-set-variable
   'anaconda-mode-installation-directory
   (expand-file-name "anaconda-mode" rational-config-var-directory))

  ;; for those who use posframe, use it to show docs
  (when (and (package-installed-p 'posframe)
             (featurep 'posframe))
    (customize-set-variable 'anaconda-mode-use-posframe-show-doc t))

  
  ;;; pyvenv
  ;; restart python when the virtual environment changes
  (add-hook 'pyvenv-post-activate-hooks #'pyvenv-restart-python)

  ;; default to the commonly used "venv" folder for the virtual
  ;; environment
  (customize-set-variable 'pyvenv-default-virtual-env-name "venv")

  
  ;;; python mode
  (customize-set-variable 'python-indent-guess-indent-offset-verbose nil)


  
  ;;; numpydoc
  (customize-set-variable 'numpydoc-insert-examples-block nil)
  (customize-set-variable 'numpydoc-template-long nil)

  (provide 'rational-python)
  ;;; rational-python.el ends here
#+end_src
***** purcell's
#+begin_src emacs-lisp
    ;;; init-python.el --- Python editing -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:

  ;; I use nix + direnv instead of virtualenv/pyenv/pyvenv, and it is an
  ;; approach which extends to other languages too. I recorded a
  ;; screencast about this: https://www.youtube.com/watch?v=TbIHRHy7_JM


  (setq auto-mode-alist
        (append '(("SConstruct\\'" . python-mode)
                  ("SConscript\\'" . python-mode))
                auto-mode-alist))

  (setq python-shell-interpreter "python3")

  (require-package 'pip-requirements)

  (when (maybe-require-package 'toml-mode)
    (add-to-list 'auto-mode-alist '("poetry\\.lock\\'" . toml-mode)))

  (when (maybe-require-package 'reformatter)
    (reformatter-define black :program "black" :args '("-")))

  (provide 'init-python)
  ;;; init-python.el ends here
#+end_src
***** prelude's
(require 'electric)
(require 'prelude-programming)

;; Code navigation, documentation lookup and completion for Python
(prelude-require-package 'anaconda-mode)

(when (boundp 'company-backends)
(prelude-require-package 'company-anaconda)
(add-to-list 'company-backends 'company-anaconda))

(defcustom prelude-python-mode-set-encoding-automatically nil
"Non-nil values enable auto insertion of '# coding: utf-8' on python buffers."
:type 'boolean
:group 'prelude)

;;; Encoding detection/insertion logic
;;
;; Adapted from ruby-mode.el
;;
;; This logic was useful in Python 2, but it's not really needed in Python 3.
(defun prelude-python--encoding-comment-required-p ()
(re-search-forward "[^\0-\177]" nil t))

(defun prelude-python--detect-encoding ()
(let ((coding-system
(or save-buffer-coding-system
buffer-file-coding-system)))
(if coding-system
(symbol-name
(or (coding-system-get coding-system 'mime-charset)
(coding-system-change-eol-conversion coding-system nil)))
"ascii-8bit")))

(defun prelude-python--insert-coding-comment (encoding)
(let ((newlines (if (looking-at "^\\s *$") "\n" "\n\n")))
(insert (format "# coding: %s" encoding) newlines)))

(defun prelude-python-mode-set-encoding ()
"Insert a magic comment header with the proper encoding if necessary."
(save-excursion
(widen)
(goto-char (point-min))
(when (prelude-python--encoding-comment-required-p)
(goto-char (point-min))
(let ((coding-system (prelude-python--detect-encoding)))
(when coding-system
(if (looking-at "^#!") (beginning-of-line 2))
(cond ((looking-at "\\s *#\\s *.*\\(en\\)?coding\\s *:\\s *\\([-a-z0-9_]*\\)")
;; update existing encoding comment if necessary
(unless (string= (match-string 2) coding-system)
(goto-char (match-beginning 2))
(delete-region (point) (match-end 2))
(insert coding-system)))
((looking-at "\\s *#.*coding\\s *[:=]"))
(t (prelude-python--insert-coding-comment coding-system)))
(when (buffer-modified-p)
(basic-save-buffer-1)))))))

;;; python-mode setup

(when (fboundp 'exec-path-from-shell-copy-env)
(exec-path-from-shell-copy-env "PYTHONPATH"))

(defun prelude-python-mode-defaults ()
"Defaults for Python programming."
(subword-mode +1)
(anaconda-mode +1)
(eldoc-mode +1)
(setq-local electric-layout-rules
'((?: . (lambda ()
(and (zerop (first (syntax-ppss)))
(python-info-statement-starts-block-p)
'after)))))
(when (fboundp #'python-imenu-create-flat-index)
(setq-local imenu-create-index-function
#'python-imenu-create-flat-index))
(add-hook 'post-self-insert-hook
#'electric-layout-post-self-insert-function nil 'local)
(when prelude-python-mode-set-encoding-automatically
(add-hook 'after-save-hook 'prelude-python-mode-set-encoding nil 'local)))

(setq prelude-python-mode-hook 'prelude-python-mode-defaults)

(add-hook 'python-mode-hook (lambda ()
(run-hooks 'prelude-python-mode-hook)))

(provide 'prelude-python)

;;; prelude-python.el ends here

*** COMMENT help systems
**** helpful
Helpful is an alternative to the built-in Emacs help that provides
much more contextual information.
#+begin_src emacs-lisp
  (use-package helpful
    :bind (([remap describe-command] . helpful-command)
           ([remap describe-function] . helpful-callable)
           ([remap describe-key] . helpful-key)
           ([remap describe-symbol] . helpful-symbol)
           ([remap describe-variable] . helpful-variable)
           ("C-h F" . helpful-function)
           ("C-h ." . helpful-at-point)))
#+end_src

**** TODO COMMENT elisp-demos
#+begin_src emacs-lisp
  ;;;;; Elisp Demos
  ;; Provide examples of Elisp code
  (use-package elisp-demos
    :defer 1
    :config
    ;; inject demos into helpful
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

**** info-colors
Info-colors, make the info manual as colorful.
#+begin_src emacs-lisp
  (use-package info-colors
    :hook (Info-selection . info-colors-fontify-node))
#+end_src

**** TODO COMMENT help-at-pt
#+begin_src emacs-lisp
  ;;;;; Help At Point
  (use-package help-at-pt
    :straight (:type built-in)
    :custom
    (help-at-pt-timer-delay 0.1)
    (help-at-pt-display-when-idle '(flymake-diagnostic)))
#+end_src

*** TODO COMMENT dictionary functions | youdao-dictionary | auto-dictionary-mode | hunspell | define-word | google-translate
#+begin_src emacs-lisp
  ;; A multi dictionaries interface
  (when emacs/>=27p
    (use-package fanyi
      :bind (("C-c d f" . fanyi-dwim)
             ("C-c d d" . fanyi-dwim2)
             ("C-c d h" . fanyi-from-history))
      :custom (fanyi-providers '(fanyi-haici-provider fanyi-longman-provider)))

    (use-package go-translate
      :bind (("C-c d g" . gts-do-translate))
      :init (setq gts-translate-list '(("en" "zh") ("zh" "en")))))

  ;; Youdao Dictionary
  (use-package youdao-dictionary
    :bind (("C-c y"   . my-youdao-dictionary-search-at-point)
           ("C-c d Y" . my-youdao-dictionary-search-at-point)
           ("C-c d y" . youdao-dictionary-search-async)
           :map youdao-dictionary-mode-map
           ("h"       . my-youdao-dictionary-help)
           ("?"       . my-youdao-dictionary-help))
    :init
    (setq url-automatic-caching t)
    (setq youdao-dictionary-use-chinese-word-segmentation t) ; 中文分词
    :config
    (with-no-warnings
      (with-eval-after-load 'hydra
        (defhydra youdao-dictionary-hydra (:color blue)
          ("p" youdao-dictionary-play-voice-of-current-word "play voice of current word")
          ("y" youdao-dictionary-play-voice-at-point "play voice at point")
          ("q" quit-window "quit")
          ("C-g" nil nil)
          ("h" nil nil)
          ("?" nil nil))
        (defun my-youdao-dictionary-help ()
          "Show help in `hydra'."
          (interactive)
          (let ((hydra-hint-display-type 'message))
            (youdao-dictionary-hydra/body))))

      (defun my-youdao-dictionary-search-at-point ()
        "Search word at point and display result with `posframe', `pos-tip' or buffer."
        (interactive)
        (if (posframe-workable-p)
            (youdao-dictionary-search-at-point-posframe)
          (youdao-dictionary-search-at-point)))

      (defun my-youdao-dictionary--posframe-tip (string)
        "Show STRING using `posframe-show'."
        (unless (posframe-workable-p)
          (error "Posframe not workable"))

        (if-let ((word (youdao-dictionary--region-or-word)))
            (progn
              (with-current-buffer (get-buffer-create youdao-dictionary-buffer-name)
                (let ((inhibit-read-only t))
                  (erase-buffer)
                  (youdao-dictionary-mode)
                  (insert (propertize "\n" 'face '(:height 0.5)))
                  (insert string)
                  (insert (propertize "\n" 'face '(:height 0.5)))
                  (set (make-local-variable 'youdao-dictionary-current-buffer-word) word)))
              (posframe-show
               youdao-dictionary-buffer-name
               :position (point)
               :left-fringe 16
               :right-fringe 16
               :max-width (/ (frame-width) 2)
               :max-height (/ (frame-height) 2)
               :background-color (face-background 'tooltip nil t)
               :internal-border-color (face-background 'posframe-border nil t)
               :internal-border-width 1)
              (unwind-protect
                  (push (read-event) unread-command-events)
                (progn
                  (posframe-hide youdao-dictionary-buffer-name)
                  (other-frame 0)))
              (message "Nothing to look up"))))
      (advice-add #'youdao-dictionary--posframe-tip
                  :override #'my-youdao-dictionary--posframe-tip)))
#+end_src

*** TODO xah-fly-keys | ergoemacs-mode | hydra | meow

*** TODO dump-jump

*** TODO emmet-mode

*** TODO COMMENT workgroups2 | perspective |persp-mode
#+begin_src emacs-lisp
  ;; Windows/buffers sets shared among frames + save/load.
  (use-package persp-mode
    :diminish
    :defines (recentf-exclude ivy-ignore-buffers)
    :commands (get-current-persp persp-contain-buffer-p)
    :hook ((after-init . persp-mode)
           (persp-mode . persp-load-frame)
           (kill-emacs . persp-save-frame))
    :init (setq persp-keymap-prefix (kbd "C-x p")
                persp-nil-name "default"
                persp-set-last-persp-for-new-frames nil
                persp-kill-foreign-buffer-behaviour 'kill
                persp-auto-resume-time (if centaur-dashboard 0 1.0))
    :config
    ;; Save and load frame parameters (size & position)
    (defvar persp-frame-file (expand-file-name "persp-frame" persp-save-dir)
      "File of saving frame parameters.")

    (defun persp-save-frame ()
      "Save the current frame parameters to file."
      (interactive)
      (when (and (display-graphic-p) centaur-restore-frame-geometry persp-mode)
        (condition-case error
            (with-temp-buffer
              (erase-buffer)
              (insert
               ";;; -*- mode: emacs-lisp; coding: utf-8-unix -*-\n"
               ";;; This is the previous frame parameters.\n"
               ";;; Last generated " (current-time-string) ".\n"
               "(setq initial-frame-alist\n"
               (format "      '((top . %d)\n" (eval (frame-parameter nil 'top)))
               (format "        (left . %d)\n" (eval (frame-parameter nil 'left)))
               (format "        (width . %d)\n" (eval (frame-parameter nil 'width)))
               (format "        (height . %d)\n" (eval (frame-parameter nil 'height)))
               (format "        (fullscreen . %s)))\n" (frame-parameter nil 'fullscreen)))
              (write-file persp-frame-file))
          (error
           (warn "persp frame: %s" (error-message-string error))))))

    (defun persp-load-frame ()
      "Load frame with the previous frame's geometry."
      (interactive)
      (when (and (display-graphic-p) centaur-restore-frame-geometry persp-mode)
        (condition-case error
            (progn
              (fix-fullscreen-cocoa)
              (load persp-frame-file nil t)

              ;; NOTE: Only usable in `emacs-startup-hook' while not `window-setup-hook'.
              (add-hook 'emacs-startup-hook
                        (lambda ()
                          "Adjust initial frame position."
                          ;; Handle multiple monitors gracefully
                          (when (or (>= (eval (frame-parameter nil 'top)) (display-pixel-height))
                                    (>= (eval (frame-parameter nil 'left)) (display-pixel-width)))
                            (set-frame-parameter nil 'top 0)
                            (set-frame-parameter nil 'left 0)))))
          (error
           (warn "persp frame: %s" (error-message-string error))))))

    (with-no-warnings
      ;; Don't save if the state is not loaded
      (defvar persp-state-loaded nil
        "Whether the state is loaded.")

      (defun my-persp-after-load-state (&rest _)
        (setq persp-state-loaded t))
      (advice-add #'persp-load-state-from-file :after #'my-persp-after-load-state)
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (add-hook 'find-file-hook #'my-persp-after-load-state)))

      (defun my-persp-asave-on-exit (fn &optional interactive-query opt)
        (if persp-state-loaded
            (funcall fn interactive-query opt)
          t))
      (advice-add #'persp-asave-on-exit :around #'my-persp-asave-on-exit))

    ;; Don't save dead or temporary buffers
    (add-hook 'persp-filter-save-buffers-functions
              (lambda (b)
                "Ignore dead and unneeded buffers."
                (or (not (buffer-live-p b))
                    (string-prefix-p " *" (buffer-name b)))))
    (add-hook 'persp-filter-save-buffers-functions
              (lambda (b)
                "Ignore temporary buffers."
                (let ((bname (file-name-nondirectory (buffer-name b))))
                  (or (string-prefix-p ".newsrc" bname)
                      (string-prefix-p "magit" bname)
                      (string-prefix-p "COMMIT_EDITMSG" bname)
                      (string-prefix-p "Pfuture-Callback" bname)
                      (string-prefix-p "treemacs-persist" bname)
                      (string-match-p "\\.elc\\|\\.tar\\|\\.gz\\|\\.zip\\'" bname)
                      (string-match-p "\\.bin\\|\\.so\\|\\.dll\\|\\.exe\\'" bname)))))

    ;; Don't save persp configs in `recentf'
    (with-eval-after-load 'recentf
      (push persp-save-dir recentf-exclude))

    ;; Ivy Integration
    (with-eval-after-load 'ivy
      (add-to-list 'ivy-ignore-buffers
                   (lambda (b)
                     (when persp-mode
                       (if-let ((persp (get-current-persp)))
                           (not (persp-contain-buffer-p b persp))
                         nil)))))

    ;; Eshell integration
    (persp-def-buffer-save/load
     :mode 'eshell-mode :tag-symbol 'def-eshell-buffer
     :save-vars '(major-mode default-directory))

    ;; Shell integration
    (persp-def-buffer-save/load
     :mode 'shell-mode :tag-symbol 'def-shell-buffer
     :mode-restore-function (lambda (_) (shell))
     :save-vars '(major-mode default-directory)))
#+end_src

*** TODO posframe

*** TODO fullframe

*** TODO dimmer

*** TODO COMMENT diredfl & diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook
    ((prog-mode . diff-hl-mode)
     (text-mode . diff-hl-mode)
     (dired-mode . diff-hl-dired-mode)
     (magit-pre-refresh . diff-hl-magit-pre-refresh)
     (magit-post-refresh . diff-hl-magit-post-refresh))
    :custom
    (diff-hl-side 'left)
    (diff-hl-fringe-bmp-function 'cpm--diff-hl-fringe-bmp-from-type)
    (diff-hl-fringe-face-function 'cpm--diff-hl-fringe-face-from-type)
    (diff-hl-margin-symbols-alist
     '((insert . "┃")
       (delete . "┃")
       (change . "┃")
       (unknown . "?")
       (ignored . "i")))
    :init
    (defun cpm--diff-hl-fringe-face-from-type (type _pos)
      (intern (format "cpm--diff-hl-%s" type)))

    (defun cpm--diff-hl-fringe-bmp-from-type(type _pos)
      (intern (format "cpm--diff-hl-%s" type)))

    (defun cpm--diff-hl-set-render-mode ()
      (diff-hl-margin-mode (if window-system -1 1)))
    :config
    (diff-hl-margin-mode 1)
    (define-fringe-bitmap 'diff-hl-insert
      [#b00000011] nil nil '(center repeated))
    (define-fringe-bitmap 'diff-hl-change
      [#b00000011] nil nil '(center repeated))
    (define-fringe-bitmap 'diff-hl-delete
      [#b00000011] nil nil '(center repeated)))
#+end_src

#+begin_src emacs-lisp
  ;; Highlight uncommitted changes using VC
  (use-package diff-hl
    :bind (:map diff-hl-command-map
                ("SPC" . diff-hl-mark-hunk))
    :hook ((after-init . global-diff-hl-mode)
           (dired-mode . diff-hl-dired-mode)
           ((after-init after-load-theme server-after-make-frame) . my-set-diff-hl-faces))
    :init (setq diff-hl-draw-borders nil)
    :config
    ;; Highlight on-the-fly
    (diff-hl-flydiff-mode 1)

    ;; Set fringe style
    (setq-default fringes-outside-margins t)

    (defun my-set-diff-hl-faces ()
      "Set `diff-hl' faces."
      (custom-set-faces
       `(diff-hl-change ((t (:foreground ,(face-foreground 'custom-changed) :background nil))))
       '(diff-hl-insert ((t (:inherit diff-added :background nil))))
       '(diff-hl-delete ((t (:inherit diff-removed :background nil))))))

    (with-no-warnings
      (defun my-diff-hl-fringe-bmp-function (_type _pos)
        "Fringe bitmap function for use as `diff-hl-fringe-bmp-function'."
        (define-fringe-bitmap 'my-diff-hl-bmp
          (vector (if sys/macp #b11100000 #b11111100))
          1 8
          '(center t)))
      (setq diff-hl-fringe-bmp-function #'my-diff-hl-fringe-bmp-function)

      (unless (display-graphic-p)
        ;; Fall back to the display margin since the fringe is unavailable in tty
        (diff-hl-margin-mode 1)
        ;; Avoid restoring `diff-hl-margin-mode'
        (with-eval-after-load 'desktop
          (add-to-list 'desktop-minor-mode-table
                       '(diff-hl-margin-mode nil))))

      ;; Integration with magit
      (with-eval-after-load 'magit
        (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
        (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))))
#+end_src

*** TODO COMMENT dired-narrow & dired-quick-sort
#+begin_src emacs-lisp
  ;;;; Narrow Dired to Match Filter
  (use-package dired-narrow
    :bind* (:map dired-mode-map
                 ("/" . dired-narrow)))

  ;;;; Dired Sort
  (use-package dired-quick-sort
    :bind* (:map dired-mode-map
                 ("s" . hydra-dired-quick-sort/body)))
#+end_src

*** TODO COMMENT peep-dired
#+begin_src emacs-lisp
  ;;;; Peep Dired
  (use-package peep-dired
    :commands (peep-dired)
    :bind* (:map dired-mode-map
                 ("P" . peep-dired)
                 :map peep-dired-mode-map
                 ("j"    . peep-dired-next-file)
                 ("k"    . peep-dired-prev-file)
                 ("RET"  . lem-peep-dired-open)
                 ("TAB"  . lem-other-window))
    :config
    ;; helper function for opening files in full window
    (defun lem-peep-dired-open ()
      "open files from peep-dired & clean-up"
      (interactive)
      (peep-dired-kill-buffers-without-window)
      (dired-find-file)
      (delete-other-windows))
    (setq peep-dired-ignored-extensions '("mkv" "iso" "mp4" "pdf" "gif"))
    (setq peep-dired-cleanup-eagerly nil)
    (setq peep-dired-enable-on-directories t)
    (setq peep-dired-cleanup-on-disable t))
#+end_src

*** TODO COMMENT dired-ranger
#+begin_src emacs-lisp
  ;;;; Dired Ranger
  ;; https://github.com/Fuco1/dired-hacks#dired-ranger
  ;; Very helpful way of copying/moving files
  ;; Note that to move first you need to copy the file and then go to the target directory and move
  (use-package dired-ranger
    :after dired
    :bind (:map dired-mode-map
                ("s-c"  . dired-ranger-copy)
                ("s-m"  . dired-ranger-move)
                ("s-v"  . dired-ranger-paste)))
#+end_src

*** TODO scratch

*** TODO COMMENT expand-region | easy-kill
#+begin_src emacs-lisp
  ;; Increase selected region by semantic units
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src

*** TODO subword | superword

*** TODO COMMENT multiple-cursors
#+begin_src emacs-lisp
  ;; Multiple cursors
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c"   . mc/edit-lines)
           ("C->"           . mc/mark-next-like-this)
           ("C-<"           . mc/mark-previous-like-this)
           ("C-c C-<"       . mc/mark-all-like-this)
           ("C-M->"         . mc/skip-to-next-like-this)
           ("C-M-<"         . mc/skip-to-previous-like-this)
           ("s-<mouse-1>"   . mc/add-cursor-on-click)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)
           :map mc/keymap
           ("C-|" . mc/vertical-align-with-space)))
#+end_src

*** TODO highlight-escape-sequences

*** TODO COMMENT git-blame | git-modes | git-timemachine | git-link | git-commit | git-gutter | git-gutter+ | git-gutter-fringe | git-gutter-fringe+ | gited | git-messenger | smeargle | ghub
#+begin_src emacs-lisp
  ;; settings for committing using magit
  (use-package git-commit
    :after magit
    :hook (git-commit-mode . cpm/git-commit-auto-fill-everywhere)
    :custom (git-commit-summary-max-length 50)
    :preface
    (defun cpm/git-commit-auto-fill-everywhere ()
      "Ensures that the commit body does not exceed 80 characters."
      (setq fill-column 80)
      (setq-local comment-auto-fill-only-comments nil))
    :config
    (with-eval-after-load 'meow
      (add-hook 'git-commit-mode-hook
                (lambda ()
                  (meow-insert-mode)))))
#+end_src

#+begin_example emacs-lisp
;;; init-git.el --- Git SCM support -*- lexical-binding: t -*-
;;; Commentary:

;; See also init-github.el.

;;; Code:

;; TODO: link commits from vc-log to magit-show-commit
;; TODO: smerge-mode
(require-package 'git-blamed)
(require-package 'git-modes)
(when (maybe-require-package 'git-timemachine)
(global-set-key (kbd "C-x v t") 'git-timemachine-toggle))

(require-package 'git-link)

(when (maybe-require-package 'magit)
(setq-default magit-diff-refine-hunk t)

;; Hint: customize `magit-repository-directories' so that you can use C-u M-F12 to
;; quickly open magit on any one of your projects.
(global-set-key [(meta f12)] 'magit-status)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch)

(defun sanityinc/magit-or-vc-log-file (&optional prompt)
(interactive "P")
(if (and (buffer-file-name)
(eq 'Git (vc-backend (buffer-file-name))))
(if prompt
(magit-log-buffer-file-popup)
(magit-log-buffer-file t))
(vc-print-log)))

(with-eval-after-load 'vc
(define-key vc-prefix-map (kbd "l") 'sanityinc/magit-or-vc-log-file)))


(with-eval-after-load 'magit
(define-key magit-status-mode-map (kbd "C-M-<up>") 'magit-section-up))

(maybe-require-package 'magit-todos)

(require-package 'fullframe)
(with-eval-after-load 'magit
(fullframe magit-status magit-mode-quit-window))

(when (maybe-require-package 'git-commit)
(add-hook 'git-commit-mode-hook 'goto-address-mode))


(when *is-a-mac*
(with-eval-after-load 'magit
(add-hook 'magit-mode-hook (lambda () (local-unset-key [(meta h)])))))



;; Convenient binding for vc-git-grep
(with-eval-after-load 'vc
(define-key vc-prefix-map (kbd "f") 'vc-git-grep))



;;; git-svn support

;; (when (maybe-require-package 'magit-svn)
;;   (require-package 'magit-svn)
;;   (autoload 'magit-svn-enabled "magit-svn")
;;   (defun sanityinc/maybe-enable-magit-svn-mode ()
;;     (when (magit-svn-enabled)
;;       (magit-svn-mode)))
;;   (add-hook 'magit-status-mode-hook #'sanityinc/maybe-enable-magit-svn-mode))

(with-eval-after-load 'compile
(dolist (defn (list '(git-svn-updated "^\t[A-Z]\t\\(.*\\)$" 1 nil nil 0 1)
'(git-svn-needs-update "^\\(.*\\): needs update$" 1 nil nil 2 1)))
(add-to-list 'compilation-error-regexp-alist-alist defn)
(add-to-list 'compilation-error-regexp-alist (car defn))))

(defvar git-svn--available-commands nil "Cached list of git svn subcommands")
(defun git-svn--available-commands ()
(or git-svn--available-commands
(setq git-svn--available-commands
(sanityinc/string-all-matches
"^  \\([a-z\\-]+\\) +"
(shell-command-to-string "git svn help") 1))))

(autoload 'vc-git-root "vc-git")

(defun git-svn (dir command)
"Run a git svn subcommand in DIR."
(interactive (list (read-directory-name "Directory: ")
(completing-read "git-svn command: " (git-svn--available-commands) nil t nil nil (git-svn--available-commands))))
(let* ((default-directory (vc-git-root dir))
(compilation-buffer-name-function (lambda (major-mode-name) "*git-svn*")))
(compile (concat "git svn " command))))


(provide 'init-git)
;;; init-git.el ends here
#+end_example

#+begin_src emacs-lisp
  ;; Walk through git revisions of a file
  (use-package git-timemachine
    :custom-face
    (git-timemachine-minibuffer-author-face ((t (:inherit success))))
    (git-timemachine-minibuffer-detail-face ((t (:inherit warning))))
    :bind (:map vc-prefix-map
                ("t" . git-timemachine))
    :hook ((git-timemachine-mode . (lambda ()
                                     "Improve `git-timemachine' buffers."
                                     ;; Display different colors in mode-line
                                     (if (facep 'mode-line-active)
                                         (face-remap-add-relative 'mode-line-active 'custom-state)
                                       (face-remap-add-relative 'mode-line 'custom-state))

                                     ;; Highlight symbols in elisp
                                     (and (derived-mode-p 'emacs-lisp-mode)
                                          (fboundp 'highlight-defined-mode)
                                          (highlight-defined-mode t))

                                     ;; Display line numbers
                                     (and (derived-mode-p 'prog-mode 'yaml-mode)
                                          (fboundp 'display-line-numbers-mode)
                                          (display-line-numbers-mode t))))
           (before-revert . (lambda ()
                              (when (bound-and-true-p git-timemachine-mode)
                                (user-error "Cannot revert the timemachine buffer"))))))
#+end_src

#+begin_src emacs-lisp
  ;; Pop up last commit information of current line
  (use-package git-messenger
    :bind (:map vc-prefix-map
                ("p" . git-messenger:popup-message)
                :map git-messenger-map
                ("m" . git-messenger:copy-message))
    :init (setq git-messenger:show-detail t
                git-messenger:use-magit-popup t)
    :config
    (with-no-warnings
      (with-eval-after-load 'hydra
        (defhydra git-messenger-hydra (:color blue)
          ("s" git-messenger:popup-show "show")
          ("c" git-messenger:copy-commit-id "copy hash")
          ("m" git-messenger:copy-message "copy message")
          ("," (catch 'git-messenger-loop (git-messenger:show-parent)) "go parent")
          ("q" git-messenger:popup-close "quit")))

      (defun my-git-messenger:format-detail (vcs commit-id author message)
        (if (eq vcs 'git)
            (let ((date (git-messenger:commit-date commit-id))
                  (colon (propertize ":" 'face 'font-lock-comment-face)))
              (concat
               (format "%s%s %s \n%s%s %s\n%s  %s %s \n"
                       (propertize "Commit" 'face 'font-lock-keyword-face) colon
                       (propertize (substring commit-id 0 8) 'face 'font-lock-comment-face)
                       (propertize "Author" 'face 'font-lock-keyword-face) colon
                       (propertize author 'face 'font-lock-string-face)
                       (propertize "Date" 'face 'font-lock-keyword-face) colon
                       (propertize date 'face 'font-lock-string-face))
               (propertize (make-string 38 ?─) 'face 'font-lock-comment-face)
               message
               (propertize "\nPress q to quit" 'face '(:inherit (font-lock-comment-face italic)))))
          (git-messenger:format-detail vcs commit-id author message)))

      (defun my-git-messenger:popup-message ()
        "Popup message with `posframe', `pos-tip', `lv' or `message', and dispatch actions with `hydra'."
        (interactive)
        (let* ((hydra-hint-display-type 'message)
               (vcs (git-messenger:find-vcs))
               (file (buffer-file-name (buffer-base-buffer)))
               (line (line-number-at-pos))
               (commit-info (git-messenger:commit-info-at-line vcs file line))
               (commit-id (car commit-info))
               (author (cdr commit-info))
               (msg (git-messenger:commit-message vcs commit-id))
               (popuped-message (if (git-messenger:show-detail-p commit-id)
                                    (my-git-messenger:format-detail vcs commit-id author msg)
                                  (cl-case vcs
                                    (git msg)
                                    (svn (if (string= commit-id "-")
                                             msg
                                           (git-messenger:svn-message msg)))
                                    (hg msg)))))
          (setq git-messenger:vcs vcs
                git-messenger:last-message msg
                git-messenger:last-commit-id commit-id)
          (run-hook-with-args 'git-messenger:before-popup-hook popuped-message)
          (git-messenger-hydra/body)
          (cond ((and (fboundp 'posframe-workable-p) (posframe-workable-p))
                 (let ((buffer-name "*git-messenger*"))
                   (posframe-show buffer-name
                                  :string (concat (propertize "\n" 'face '(:height 0.3))
                                                  popuped-message
                                                  "\n"
                                                  (propertize "\n" 'face '(:height 0.3)))
                                  :left-fringe 8
                                  :right-fringe 8
                                  :max-width (round (* (frame-width) 0.62))
                                  :max-height (round (* (frame-height) 0.62))
                                  :internal-border-width 1
                                  :internal-border-color (face-background 'posframe-border nil t)
                                  :background-color (face-background 'tooltip nil t))
                   (unwind-protect
                       (push (read-event) unread-command-events)
                     (posframe-hide buffer-name))))
                ((and (fboundp 'pos-tip-show) (display-graphic-p))
                 (pos-tip-show popuped-message))
                ((fboundp 'lv-message)
                 (lv-message popuped-message)
                 (unwind-protect
                     (push (read-event) unread-command-events)
                   (lv-delete-window)))
                (t (message "%s" popuped-message)))
          (run-hook-with-args 'git-messenger:after-popup-hook popuped-message)))
      (advice-add #'git-messenger:popup-close :override #'ignore)
      (advice-add #'git-messenger:popup-message :override #'my-git-messenger:popup-message)))
#+end_src

#+begin_src emacs-lisp
  (defun version-control/init-git-gutter ()
    (use-package git-gutter
      :defer t
      :init
      (progn
        ;; If you enable global minor mode
        (when version-control-global-margin
          (run-with-idle-timer 1 nil 'global-git-gutter-mode))
        (setq git-gutter:update-interval 2
              git-gutter:modified-sign " "
              git-gutter:added-sign "+"
              git-gutter:deleted-sign "-"
              git-gutter:diff-option "-w"
              git-gutter:hide-gutter t
              git-gutter:ask-p nil
              git-gutter:verbosity 0
              git-gutter:handled-backends '(git hg bzr svn)
              git-gutter:hide-gutter t))
      :config
      (spacemacs|hide-lighter git-gutter-mode)
      ;; Do not activate git-gutter in pdf-view-mode, see #15106
      (when (configuration-layer/layer-used-p 'pdf)
        (add-to-list 'git-gutter:disabled-modes 'pdf-view-mode))))

  (defun version-control/init-git-gutter-fringe ()
    (use-package git-gutter-fringe
      :defer t
      :init
      (progn
        (spacemacs|do-after-display-system-init
         (with-eval-after-load 'git-gutter
           (require 'git-gutter-fringe)))
        (setq git-gutter-fr:side (if (eq version-control-diff-side 'left)
                                     'left-fringe 'right-fringe)))))

  (defun version-control/init-git-gutter+ ()
    (use-package git-gutter+
      :if (eq version-control-diff-tool 'git-gutter+)
      :defer t
      :init
      (progn
        ;; If you enable global minor mode
        (when version-control-global-margin
          (add-hook 'magit-pre-refresh-hook
                    #'spacemacs//git-gutter+-refresh-in-all-buffers)
          (run-with-idle-timer 1 nil 'global-git-gutter+-mode))
        (setq
         git-gutter+-modified-sign " "
         git-gutter+-added-sign "+"
         git-gutter+-deleted-sign "-"
         git-gutter+-diff-option "-w"
         git-gutter+-hide-gutter t))
      ;; identify magit changes
      :config
      (spacemacs|hide-lighter git-gutter+-mode)
      ;; Do not activate git-gutter in pdf-view-mode, see #15106
      (when (configuration-layer/layer-used-p 'pdf)
        (add-to-list 'git-gutter+-disabled-modes 'pdf-view-mode))))

  (defun version-control/init-git-gutter-fringe+ ()
    (use-package git-gutter-fringe+
      :defer t
      :init
      (progn
        (spacemacs|do-after-display-system-init
         (with-eval-after-load 'git-gutter+
           (require 'git-gutter-fringe+)))
        (setq git-gutter-fr+-side (if (eq version-control-diff-side 'left)
                                      'left-fringe 'right-fringe)))
      :config
      (progn
        ;; custom graphics that works nice with half-width fringes
        (fringe-helper-define 'git-gutter-fr+-added nil
                              "..X...."
                              "..X...."
                              "XXXXX.."
                              "..X...."
                              "..X....")

        (fringe-helper-define 'git-gutter-fr+-deleted nil
                              "......."
                              "......."
                              "XXXXX.."
                              "......."
                              ".......")

        (fringe-helper-define 'git-gutter-fr+-modified nil
                              "..X...."
                              ".XXX..."
                              "XX.XX.."
                              ".XXX..."
                              "..X...."))))
#+end_src

*** TODO comint

*** TODO regex-tool

*** TODO re-builder

*** TODO sudo-edit

*** TODO gnuplot

*** TODO envrc (with direnv installed)

*** TODO COMMENT hl-todo
#+begin_src emacs-lisp
  ;; Highlight TODO and similar keywords in comments and strings
  (use-package hl-todo
    :custom-face
    (hl-todo ((t (:inherit default :height 0.9 :width condensed :weight bold :underline nil :inverse-video t))))
    :bind (:map hl-todo-mode-map
                ([C-f3]    . hl-todo-occur)
                ("C-c t p" . hl-todo-previous)
                ("C-c t n" . hl-todo-next)
                ("C-c t o" . hl-todo-occur)
                ("C-c t i" . hl-todo-insert))
    :hook (after-init . global-hl-todo-mode)
    :init (setq hl-todo-require-punctuation t
                hl-todo-highlight-punctuation ":")
    :config
    (dolist (keyword '("BUG" "DEFECT" "ISSUE"))
      (add-to-list 'hl-todo-keyword-faces `(,keyword . "#e45649")))
    (dolist (keyword '("TRICK" "WORKAROUND"))
      (add-to-list 'hl-todo-keyword-faces `(,keyword . "#d0bf8f")))
    (dolist (keyword '("DEBUG" "STUB"))
      (add-to-list 'hl-todo-keyword-faces `(,keyword . "#7cb8bb"))))
#+end_src

*** TODO move-text

*** TODO COMMENT smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :defer t
    :commands (sp-point-in-string-or-comment sp-forward-symbol sp-split-sexp sp-newline sp-up-sexp)
    :init
    (progn
      ;; settings
      (setq sp-show-pair-delay
            ;; Use this form to allow users to override this setting from
            ;; dotspacemacs/user-init
            (or (bound-and-true-p sp-show-pair-delay) 0.2)
            ;; fix paren highlighting in normal mode
            sp-show-pair-from-inside t
            sp-cancel-autoskip-on-backward-movement nil
            sp-highlight-pair-overlay nil
            sp-highlight-wrap-overlay nil
            sp-highlight-wrap-tag-overlay nil)
      (spacemacs/add-to-hooks #'spacemacs//activate-smartparens
                              '(prog-mode-hook comint-mode-hook))
      ;; enable smartparens-mode in `eval-expression'
      (add-hook 'minibuffer-setup-hook 'spacemacs//conditionally-enable-smartparens-mode)
      ;; toggles
      (spacemacs|add-toggle smartparens
                            :status (or (bound-and-true-p smartparens-mode)
                                        (bound-and-true-p smartparens-strict-mode))
                            :on (spacemacs//activate-smartparens)
                            :off (spacemacs//deactivate-smartparens)
                            :documentation "Enable smartparens."
                            :evil-leader "tp")
      (spacemacs|add-toggle smartparens-globally
                            :status (or smartparens-global-mode smartparens-global-strict-mode)
                            :on (spacemacs//activate-smartparens t)
                            :off (spacemacs//deactivate-smartparens t)
                            :documentation "Enable smartparens globally."
                            :evil-leader "t C-p")
      ;; key bindings
      (spacemacs/set-leader-keys
       "js" 'sp-split-sexp
       "jn" 'sp-newline))
    :config
    (progn
      (require 'smartparens-config)
      (spacemacs|diminish smartparens-mode " ⓟ" " p")
      (spacemacs//adaptive-smartparent-pair-overlay-face)
      (add-hook 'spacemacs-post-theme-change-hook
                'spacemacs//adaptive-smartparent-pair-overlay-face)
      (show-smartparens-global-mode +1)
      ;; don't create a pair with single quote in minibuffer
      (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
      (sp-pair "{" nil :post-handlers
               '(:add (spacemacs/smartparens-pair-newline-and-indent "RET")))
      (sp-pair "[" nil :post-handlers
               '(:add (spacemacs/smartparens-pair-newline-and-indent "RET")))
      (when dotspacemacs-smart-closing-parenthesis
        (define-key evil-insert-state-map ")"
          'spacemacs/smart-closing-parenthesis))))
#+end_src

*** TODO COMMENT undo-tree
#+begin_src emacs-lisp
  ;; Treat undo history as a tree
  (use-package undo-tree
    :diminish
    :hook (after-init . global-undo-tree-mode)
    :init
    (setq undo-tree-visualizer-timestamps t
          undo-tree-enable-undo-in-region nil
          undo-tree-auto-save-history nil)

    ;; HACK: keep the diff window
    (with-no-warnings
      (make-variable-buffer-local 'undo-tree-visualizer-diff)
      (setq-default undo-tree-visualizer-diff t)))
#+end_src

#+begin_src emacs-lisp
  ;; supercharge your undo/redo with undo-tree
  (require 'undo-tree)
  ;; autosave the undo-tree history
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t)
  (global-undo-tree-mode)
  (diminish 'undo-tree-mode)
#+end_src

spacemacs settings
#+begin_example emacs-lisp
  (use-package undo-tree
    :defer t
    :init
    (progn
      (setq undo-tree-visualizer-timestamps t
            undo-tree-visualizer-diff t
            ;; See `vim-style-enable-undo-region'.
            undo-tree-enable-undo-in-region t
            ;; 10X bump of the undo limits to avoid issues with premature
            ;; Emacs GC which truncages the undo history very aggresively
            undo-limit 800000
            undo-strong-limit 12000000
            undo-outer-limit 120000000
            undo-tree-history-directory-alist
            `(("." . ,(let ((dir (expand-file-name "undo-tree-history" spacemacs-cache-directory)))
                        (if (file-exists-p dir)
                            (unless (file-accessible-directory-p dir)
                              (warn "Cannot access directory `%s'.
 Perhaps you don't have required permissions, or it's not a directory.
 See variable `undo-tree-history-directory-alist'." dir))
                          (make-directory dir))
                        dir))))
      (global-undo-tree-mode))
    :config
    (progn
      ;; restore diff window after quit.  TODO fix upstream
      (defun spacemacs/undo-tree-restore-default ()
        (setq undo-tree-visualizer-diff t))
      (advice-add 'undo-tree-visualizer-quit :after #'spacemacs/undo-tree-restore-default)
      (spacemacs|hide-lighter undo-tree-mode)
      (evilified-state-evilify-map undo-tree-visualizer-mode-map
        :mode undo-tree-visualizer-mode
        :bindings
        (kbd "j") 'undo-tree-visualize-redo
        (kbd "k") 'undo-tree-visualize-undo
        (kbd "h") 'undo-tree-visualize-switch-branch-left
        (kbd "l") 'undo-tree-visualize-switch-branch-right)))
#+end_example
*** TODO zop-to-char

*** TODO key-chord

*** TODO hungry-delete

*** TODO tree-sitter

*** TODO hippie-expand

*** TODO COMMENT imenu-list
#+begin_src emacs-lisp
  ;;;; Imenu list outline
  ;; Make a useful outline buffer
  ;; Binding set to toggle "o"
  (use-package imenu-list
    :commands (imenu-list-smart-toggle imenu-list-minor-mode)
    :config
    (setq imenu-list-focus-after-activation t
          imenu-list-auto-resize t
          imenu-list-position 'left))
#+end_src

*** TODO COMMENT tab-bookmark & tabspaces
#+begin_src emacs-lisp
  ;;;; Tab Bookmark
  ;; Bookmark window configurations in a tab
  ;; NOTE: would be good to get this working with tabspaces
  (use-package tab-bookmark
    :straight (:type git :host github :repo "minad/tab-bookmark")
    :commands (tab-bookmark tab-bookmark-open)
    :bind (:map project-prefix-map
                ("m" . tab-bookmark)))

  ;;;; Tab Workspaces

  (use-package tabspaces
    :straight (:type git :host github :repo "mclear-tools/tabspaces")
    :hook (after-init . tabspaces-mode)
    ;; Add some functions to the project map
    :bind (:map project-prefix-map
                ("p" . tabspaces-open-or-create-project-and-workspace))
    :custom
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Home")
    :config
    (defun lem--consult-tabspaces ()
      "Deactivate isolated buffers when not using tabspaces."
      (require 'consult)
      (cond (tabspaces-mode
             ;; hide full buffer list (still available with "b")
             (consult-customize consult--source-buffer :hidden t :default nil)
             (add-to-list 'consult-buffer-sources 'consult--source-workspace))
            (t
             (consult-customize consult--source-buffer :hidden nil :default t)
             (setq consult-buffer-sources (remove #'consult--source-workspace consult-buffer-sources)))))
    (add-hook 'tabspaces-mode-hook #'lem--consult-tabspaces))
#+end_src

*** TODO pandoc-mode

*** TODO palimpsest

*** TODO COMMENT page-break-lines
#+begin_src emacs-lisp
  ;; Display ugly ^L page breaks as tidy horizontal lines
  (use-package page-break-lines
    :diminish
    :hook (after-init . global-page-break-lines-mode))
#+end_src

#+begin_example emacs-lisp
;;; page-break-lines.el --- Display ^L page breaks as tidy horizontal lines  -*- lexical-binding: t -*-

;; Copyright (C) 2012-2015 Steve Purcell

;; Author: Steve Purcell <steve@sanityinc.com>
;; URL: https://github.com/purcell/page-break-lines
;; Package-Version: 0
;; Package-Requires: ((emacs "24.4"))
;; Keywords: convenience, faces

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This library provides a global mode which displays form feed
;; characters as horizontal rules.

;; Install from Melpa or Marmalade, or add to `load-path' and use
;; (require 'page-break-lines).

;; Use `page-break-lines-mode' to enable the mode in specific buffers,
;; or customize `page-break-lines-modes' and enable the mode globally with
;; `global-page-break-lines-mode'.

;; Issues and limitations:

;; If `page-break-lines-char' is displayed at a different width to
;; regular characters, the rule may be either too short or too long:
;; rules may then wrap if `truncate-lines' is nil.  On some systems,
;; Emacs may erroneously choose a different font for the page break
;; symbol, which choice can be overridden using code such as:

;; (set-fontset-font "fontset-default"
;;                   (cons page-break-lines-char page-break-lines-char)
;;                   (face-attribute 'default :family))

;; Use `describe-char' on a page break char to determine whether this
;; is the case.

;; Additionally, the use of `text-scale-increase' or
;; `text-scale-decrease' will cause the rule width to be incorrect,
;; because the reported window width (in characters) will continue to
;; be the width in the frame's default font, not the scaled font used to
;; display the rule.

;; Adapted from code http://www.emacswiki.org/emacs/PageBreaks

;;; Code:

(defgroup page-break-lines nil
  "Display ugly ^L page breaks as tidy horizontal lines."
  :prefix "page-break-lines-"
  :group 'faces)

(defcustom page-break-lines-char ?─
  "Character used to render page break lines."
  :type 'character
  :group 'page-break-lines)

(defcustom page-break-lines-lighter " PgLn"
  "Mode-line indicator for `page-break-lines-mode'."
  :type '(choice (const :tag "No lighter" "") string)
  :group 'page-break-lines)

(defcustom page-break-lines-max-width nil
  "If non-nil, maximum width (in characters) of page break indicator.
If nil, indicator will span the width of the frame."
  :type '(choice integer (const :tag "Full width" nil))
  :group 'page-break-lines)

(defcustom page-break-lines-modes
  '(emacs-lisp-mode lisp-mode scheme-mode compilation-mode outline-mode help-mode)
  "Modes in which to enable `page-break-lines-mode'."
  :type '(repeat symbol)
  :group 'page-break-lines)

(defface page-break-lines
  '((t :inherit font-lock-comment-face :bold nil :italic nil))
  "Face used to colorize page break lines.
If using :bold or :italic, please ensure `page-break-lines-char'
is available in that variant of your font, otherwise it may be
displayed as a junk character."
  :group 'page-break-lines)



;;;###autoload
(define-minor-mode page-break-lines-mode
  "Toggle Page Break Lines mode.

In Page Break mode, page breaks (^L characters) are displayed as a
horizontal line of `page-break-lines-char' characters."
  :lighter page-break-lines-lighter
  :group 'page-break-lines
  (page-break-lines--update-display-tables))

(dolist (hook '(window-configuration-change-hook
                window-size-change-functions
                after-setting-font-hook
                display-line-numbers-mode-hook))
  (add-hook hook 'page-break-lines--update-display-tables))



(defun page-break-lines--update-display-table (window)
  "Modify a display-table that displays page-breaks prettily.
If the buffer inside WINDOW has `page-break-lines-mode' enabled,
its display table will be modified as necessary."
  (with-current-buffer (window-buffer window)
    (with-selected-window window
      (if page-break-lines-mode
          (progn
            (unless buffer-display-table
              (setq buffer-display-table (make-display-table)))
            (let ((default-height (face-attribute 'default :height nil 'default)))
              (set-face-attribute 'page-break-lines nil :height default-height)
              (let* ((cwidth (char-width page-break-lines-char))
                     (wwidth-pix (- (window-width nil t)
                                    (if (and (bound-and-true-p display-line-numbers)
                                             (fboundp 'line-number-display-width))
                                        (line-number-display-width t)
                                      0)))
                     (width (- (/ wwidth-pix (frame-char-width) cwidth)
                               (if (display-graphic-p) 0 1)))
                     (width (if page-break-lines-max-width
                                (min width page-break-lines-max-width)
                              width))
                     (glyph (make-glyph-code page-break-lines-char 'page-break-lines))
                     (new-display-entry (vconcat (make-list width glyph))))
                (unless (equal new-display-entry (elt buffer-display-table ?\^L))
                  (aset buffer-display-table ?\^L new-display-entry)))))
        (when (and (apply 'derived-mode-p page-break-lines-modes)
                   buffer-display-table)
          (aset buffer-display-table ?\^L nil))))))

(defun page-break-lines--update-display-tables  (&optional frame)
  "Function called for updating display table in windows of FRAME."
  (unless (minibufferp)
    (mapc 'page-break-lines--update-display-table (window-list frame 'no-minibuffer))))



;;;###autoload
(defun page-break-lines-mode-maybe ()
  "Enable `page-break-lines-mode' in the current buffer if desired.
When `major-mode' is listed in `page-break-lines-modes', then
`page-break-lines-mode' will be enabled."
  (if (and (not (minibufferp))
           (apply 'derived-mode-p page-break-lines-modes))
      (page-break-lines-mode 1)))

;;;###autoload
(define-global-minor-mode global-page-break-lines-mode
  page-break-lines-mode page-break-lines-mode-maybe
  :require 'page-break-lines
  :group 'page-break-lines)


(provide 'page-break-lines)

;; Local Variables:
;; coding: utf-8
;; checkdoc-minor-mode: t
;; End:

;;; page-break-lines.el ends here
#+end_example

*** TODO COMMENT beginend
#+begin_src emacs-lisp
  ;; Redefine M-< and M-> for some modes
  (use-package beginend
    :diminish beginend-global-mode
    :hook (after-init . beginend-global-mode)
    :config (mapc (lambda (pair)
                    (diminish (cdr pair)))
                  beginend-modes))
#+end_src

*** TODO COMMENT comment-dwim-2
#+begin_src emacs-lisp
  ;; An all-in-one comment command to rule them all
  (use-package comment-dwim-2
    :bind ([remap comment-dwim] . comment-dwim-2)) ;
#+end_src

*** TODO COMMENT drag-stuff
#+begin_src emacs-lisp
  ;; Drag stuff (lines, words, region, etc...) around
  (use-package drag-stuff
    :diminish
    :commands drag-stuff-define-keys
    :hook (after-init . drag-stuff-global-mode)
    :config
    (add-to-list 'drag-stuff-except-modes 'org-mode)
    (drag-stuff-define-keys))
#+end_src

*** TODO COMMENT smart-region
#+begin_src emacs-lisp
  ;; Smartly select region, rectangle, multi cursors
  (use-package smart-region
    :hook (after-init . smart-region-on))
#+end_src

*** TODO COMMENT flyspell
#+begin_src emacs-lisp
  ;; On-the-fly spell checker
  (use-package flyspell
    :ensure nil
    :diminish
    :if (executable-find "aspell")
    :hook (((text-mode outline-mode) . flyspell-mode)
           (prog-mode . flyspell-prog-mode)
           (flyspell-mode . (lambda ()
                              (dolist (key '("C-;" "C-," "C-."))
                                (unbind-key key flyspell-mode-map)))))
    :init (setq flyspell-issue-message-flag nil
                ispell-program-name "aspell"
                ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together"))
    :config
    ;; Correcting words with flyspell via Ivy
    (use-package flyspell-correct-ivy
      :after ivy
      :bind (:map flyspell-mode-map
                  ([remap flyspell-correct-word-before-point] . flyspell-correct-wrapper))
      :init (setq flyspell-correct-interface #'flyspell-correct-ivy)))
#+end_src

*** TODO COMMENT hungry-delete
#+begin_src emacs-lisp
  ;; Hungry deletion
  (use-package hungry-delete
    :diminish
    :hook (after-init . global-hungry-delete-mode)
    :init (setq hungry-delete-chars-to-skip " \t\f\v"
                hungry-delete-except-modes
                '(help-mode minibuffer-mode minibuffer-inactive-mode calc-mode)))
#+end_src

*** TODO COMMENT mwim
#+begin_src emacs-lisp
  ;; Move to the beginning/end of line or code
  (use-package mwim
    :bind (([remap move-beginning-of-line] . mwim-beginning-of-code-or-line)
           ([remap move-end-of-line] . mwim-end-of-code-or-line)))
#+end_src

*** TODO COMMENT pager
#+begin_src emacs-lisp
  ;; Windows-scroll commands
  (use-package pager
    :bind (([remap scroll-up-command] . pager-page-down)
           ([remap scroll-down-command] . pager-page-up)
           ([next]   . pager-page-down)
           ([prior]  . pager-page-up)
           ([M-up]   . pager-row-up)
           ([M-kp-8] . pager-row-up)
           ([M-down] . pager-row-down)
           ([M-kp-2] . pager-row-down)))
#+end_src

*** TODO COMMENT fancy-narrow
#+begin_src emacs-lisp
  ;; Narrow/Widen
  (use-package fancy-narrow
    :diminish
    :hook (after-init . fancy-narrow-mode))
#+end_src

*** TODO COMMENT hideshow
#+begin_src emacs-lisp
  ;; Flexible text folding
  (use-package hideshow
    :ensure nil
    :diminish hs-minor-mode
    :pretty-hydra
    ((:title (pretty-hydra-title "HideShow" 'octicon "fold" :height 1.1 :v-adjust -0.05)
             :color amaranth :quit-key "q")
     ("Fold"
      (("t" hs-toggle-all "toggle all")
       ("a" hs-show-all "show all")
       ("i" hs-hide-all "hide all")
       ("g" hs-toggle-hiding "toggle hiding")
       ("c" hs-cycle "cycle block")
       ("s" hs-show-block "show block")
       ("h" hs-hide-block "hide block")
       ("l" hs-hide-level "hide level"))
      "Move"
      (("C-a" mwim-beginning-of-code-or-line "⭰")
       ("C-e" mwim-end-of-code-or-line "⭲")
       ("C-b" backward-char "←")
       ("C-n" next-line "↓")
       ("C-p" previous-line "↑")
       ("C-f" forward-char "→")
       ("C-v" pager-page-down "↘")
       ("M-v" pager-page-up "↖")
       ("M-<" beginning-of-buffer "⭶")
       ("M->" end-of-buffer "⭸"))))
    :bind (:map hs-minor-mode-map
                ("C-~" . hideshow-hydra/body)
                ("C-S-<escape>" . hideshow-hydra/body))
    :hook (prog-mode . hs-minor-mode)
    :config
    ;; More functions
    ;; @see https://karthinks.com/software/simple-folding-with-hideshow/
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max
            (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               (save-excursion (hs-show-block))
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    (defun hs-toggle-all ()
      "Toggle hide/show all."
      (interactive)
      (pcase last-command
        ('hs-toggle-all
         (save-excursion (hs-show-all))
         (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))

    ;; Display line counts
    (defun hs-display-code-line-counts (ov)
      "Display line counts when hiding codes."
      (when (eq 'code (overlay-get ov 'hs))
        (overlay-put ov 'display
                     (concat
                      " "
                      (propertize
                       (if (char-displayable-p ?⏷) "⏷" "...")
                       'face 'shadow)
                      (propertize
                       (format " (%d lines)"
                               (count-lines (overlay-start ov)
                                            (overlay-end ov)))
                       'face '(:inherit shadow :height 0.8))
                      " "))))
    (setq hs-set-up-overlay #'hs-display-code-line-counts))
#+end_src

*** TODO COMMENT cal-china-x
#+begin_src emacs-lisp
  ;; Chinese calendar
  ;; `pC' can show lunar details
  (when centaur-chinese-calendar
    (use-package cal-china-x
      :after calendar
      :commands cal-china-x-setup
      :init (cal-china-x-setup)
      :config
      ;; Holidays
      (setq calendar-mark-holidays-flag t
            cal-china-x-important-holidays cal-china-x-chinese-holidays
            cal-china-x-general-holidays '((holiday-lunar 1 15 "元宵节")
                                           (holiday-lunar 7 7 "七夕节")
                                           (holiday-fixed 3 8 "妇女节")
                                           (holiday-fixed 3 12 "植树节")
                                           (holiday-fixed 5 4 "青年节")
                                           (holiday-fixed 6 1 "儿童节")
                                           (holiday-fixed 9 10 "教师节"))
            holiday-other-holidays '((holiday-fixed 2 14 "情人节")
                                     (holiday-fixed 4 1 "愚人节")
                                     (holiday-fixed 12 25 "圣诞节")
                                     (holiday-float 5 0 2 "母亲节")
                                     (holiday-float 6 0 3 "父亲节")
                                     (holiday-float 11 4 4 "感恩节"))
            calendar-holidays (append cal-china-x-important-holidays
                                      cal-china-x-general-holidays
                                      holiday-other-holidays))))
#+end_src

*** TODO COMMENT paren
#+begin_src emacs-lisp
  ;; Highlight matching parens
  (use-package paren
    :ensure nil
    :hook (after-init . show-paren-mode)
    :init (setq show-paren-when-point-inside-paren t
                show-paren-when-point-in-periphery t)
    :config
    (with-no-warnings
      ;; Display matching line for off-screen paren.
      (defun display-line-overlay (pos str &optional face)
        "Display line at POS as STR with FACE.

  FACE defaults to inheriting from default and highlight."
        (let ((ol (save-excursion
                    (goto-char pos)
                    (make-overlay (line-beginning-position)
                                  (line-end-position)))))
          (overlay-put ol 'display str)
          (overlay-put ol 'face
                       (or face '(:inherit highlight)))
          ol))

      (defvar-local show-paren--off-screen-overlay nil)
      (defun show-paren-off-screen (&rest _args)
        "Display matching line for off-screen paren."
        (when (overlayp show-paren--off-screen-overlay)
          (delete-overlay show-paren--off-screen-overlay))
        ;; Check if it's appropriate to show match info,
        (when (and (overlay-buffer show-paren--overlay)
                   (not (or cursor-in-echo-area
                            executing-kbd-macro
                            noninteractive
                            (minibufferp)
                            this-command))
                   (and (not (bobp))
                        (memq (char-syntax (char-before)) '(?\) ?\$)))
                   (= 1 (logand 1 (- (point)
                                     (save-excursion
                                       (forward-char -1)
                                       (skip-syntax-backward "/\\")
                                       (point))))))
          ;; Rebind `minibuffer-message' called by `blink-matching-open'
          ;; to handle the overlay display.
          (cl-letf (((symbol-function #'minibuffer-message)
                     (lambda (msg &rest args)
                       (let ((msg (apply #'format-message msg args)))
                         (setq show-paren--off-screen-overlay
                               (display-line-overlay
                                (window-start) msg ))))))
            (blink-matching-open))))
      (advice-add #'show-paren-function :after #'show-paren-off-screen)))
#+end_src

*** TODO COMMENT highlight-indent-guides
#+begin_src emacs-lisp
  ;; Highlight indentions
  (use-package highlight-indent-guides
    :diminish
    :hook ((prog-mode yaml-mode) . highlight-indent-guides-mode)
    :init (setq highlight-indent-guides-method 'character
                highlight-indent-guides-responsive 'top
                highlight-indent-guides-suppress-auto-error t)
    :config
    (with-no-warnings
      ;; Don't display first level of indentation
      (defun my-indent-guides-for-all-but-first-column (level responsive display)
        (unless (< level 1)
          (highlight-indent-guides--highlighter-default level responsive display)))
      (setq highlight-indent-guides-highlighter-function
            #'my-indent-guides-for-all-but-first-column)

      ;; Disable in `macrostep' expanding
      (with-eval-after-load 'macrostep
        (advice-add #'macrostep-expand
                    :after (lambda (&rest _)
                             (when highlight-indent-guides-mode
                               (highlight-indent-guides-mode -1))))
        (advice-add #'macrostep-collapse
                    :after (lambda (&rest _)
                             (when (derived-mode-p 'prog-mode 'yaml-mode)
                               (highlight-indent-guides-mode 1)))))

      ;; Don't display indentations in `swiper'
      ;; https://github.com/DarthFennec/highlight-indent-guides/issues/40
      (with-eval-after-load 'ivy
        (defun my-ivy-cleanup-indentation (str)
          "Clean up indentation highlighting in ivy minibuffer."
          (let ((pos 0)
                (next 0)
                (limit (length str))
                (prop 'highlight-indent-guides-prop))
            (while (and pos next)
              (setq next (text-property-not-all pos limit prop nil str))
              (when next
                (setq pos (text-property-any next limit prop nil str))
                (ignore-errors
                  (remove-text-properties next pos '(display nil face nil) str))))))
        (advice-add #'ivy-cleanup-string :after #'my-ivy-cleanup-indentation))))
#+end_src

*** TODO COMMENT easy-kill
#+begin_src emacs-lisp

  ;; Kill & Mark things easily
  (use-package easy-kill
    :bind (([remap kill-ring-save] . easy-kill)
           ([remap mark-sexp] . easy-mark)))
#+end_src

*** TODO COMMENT treemacs | neotree
#+begin_src emacs-lisp
  ;; A tree layout file explorer
  (use-package treemacs
    :commands (treemacs-follow-mode
               treemacs-filewatch-mode
               treemacs-fringe-indicator-mode
               treemacs-git-mode)
    :custom-face
    (cfrs-border-color ((t (:background ,(face-foreground 'font-lock-comment-face nil t)))))
    :bind (([f8]        . treemacs)
           ("M-0"       . treemacs-select-window)
           ("C-x 1"     . treemacs-delete-other-windows)
           ("C-x t 1"   . treemacs-delete-other-windows)
           ("C-x t t"   . treemacs)
           ("C-x t b"   . treemacs-bookmark)
           ("C-x t C-t" . treemacs-find-file)
           ("C-x t M-t" . treemacs-find-tag)
           :map treemacs-mode-map
           ([mouse-1]   . treemacs-single-click-expand-action))
    :config
    (setq treemacs-collapse-dirs           (if treemacs-python-executable 3 0)
          treemacs-missing-project-action  'remove
          treemacs-sorting                 'alphabetic-asc
          treemacs-follow-after-init       t
          treemacs-width                   30
          treemacs-no-png-images           (not centaur-icon))
    :config
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (use-package treemacs-projectile
      :after projectile
      :bind (:map projectile-command-map
                  ("h" . treemacs-projectile)))

    (use-package treemacs-magit
      :after magit
      :commands treemacs-magit--schedule-update
      :hook ((magit-post-commit
              git-commit-post-finish
              magit-post-stage
              magit-post-unstage)
             . treemacs-magit--schedule-update))

    (use-package treemacs-persp
      :after persp-mode
      :demand t
      :functions treemacs-set-scope-type
      :config (treemacs-set-scope-type 'Perspectives)))
#+end_src

*** TODO COMMENT pdf-view | pdf-tools
#+begin_src emacs-lisp
  ;; PDF reader
  (when (display-graphic-p)
    (use-package pdf-view
      :ensure pdf-tools
      :diminish (pdf-view-themed-minor-mode
                 pdf-view-midnight-minor-mode
                 pdf-view-printer-minor-mode)
      :defines pdf-annot-activate-created-annotations
      :hook ((pdf-tools-enabled . pdf-view-auto-slice-minor-mode)
             (pdf-tools-enabled . pdf-isearch-minor-mode))
      :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
      :magic ("%PDF" . pdf-view-mode)
      :bind (:map pdf-view-mode-map
                  ("C-s" . isearch-forward))
      :init (setq pdf-view-use-scaling t
                  pdf-view-use-imagemagick nil
                  pdf-annot-activate-created-annotations t)
      :config (pdf-tools-install t nil t nil)))
#+end_src

*** TODO COMMENT docker
#+begin_src emacs-lisp
  ;; Docker
  (use-package docker
    :defines docker-image-run-arguments
    :bind ("C-c D" . docker)
    :init (setq docker-image-run-arguments '("-i" "-t" "--rm")
                docker-container-shell-file-name "/bin/bash"))

  (use-package docker-tramp)
  (use-package dockerfile-mode)
#+end_src

*** TODO focus

*** TODO COMMENT smerge-mode
#+begin_src emacs-lisp
  ;; Resolve diff3 conflicts
  (use-package smerge-mode
    :ensure nil
    :diminish
    :pretty-hydra
    ((:title (pretty-hydra-title "Smerge" 'octicon "diff")
             :color pink :quit-key "q")
     ("Move"
      (("n" smerge-next "next")
       ("p" smerge-prev "previous"))
      "Keep"
      (("b" smerge-keep-base "base")
       ("u" smerge-keep-upper "upper")
       ("l" smerge-keep-lower "lower")
       ("a" smerge-keep-all "all")
       ("RET" smerge-keep-current "current")
       ("C-m" smerge-keep-current "current"))
      "Diff"
      (("<" smerge-diff-base-upper "upper/base")
       ("=" smerge-diff-upper-lower "upper/lower")
       (">" smerge-diff-base-lower "upper/lower")
       ("R" smerge-refine "refine")
       ("E" smerge-ediff "ediff"))
      "Other"
      (("C" smerge-combine-with-next "combine")
       ("r" smerge-resolve "resolve")
       ("k" smerge-kill-current "kill")
       ("ZZ" (lambda ()
               (interactive)
               (save-buffer)
               (bury-buffer))
        "Save and bury buffer" :exit t))))
    :bind (:map smerge-mode-map
                ("C-c m" . smerge-mode-hydra/body))
    :hook ((find-file . (lambda ()
                          (save-excursion
                            (goto-char (point-min))
                            (when (re-search-forward "^<<<<<<< " nil t)
                              (smerge-mode 1)))))
           (magit-diff-visit-file . (lambda ()
                                      (when smerge-mode
                                        (smerge-mode-hydra/body))))))
#+end_src

*** TODO spinner

*** TODO evil(fold) | origami | vimish(-fold)

*** TODO clean-aindent-mode (maybe not useful)

*** TODO COMMENT unfill
#+begin_src emacs-lisp
  (use-package unfill
    :defer t
    :commands (unfill-region unfill-paragraph unfill-toggle)
    :init
    (global-set-key [remap fill-paragraph] #'unfill-toggle))
#+end_src

*** TODO chinese-pyim

*** TODO dtrt-indent

*** TODO nav-flash

*** TODO eyebrowse

*** TODO golden-ratio-mode

*** TODO toc-org

*** TODO ansi-colors

*** TODO dired-quick-sort

*** TODO drag-stuff

*** TODO link-hint

*** TODO string-edit

*** TODO multi-line

*** TODO highlight-indentation & highlight-numbers & highlight-parentheses

*** TODO langtool

*** TODO browse-at-remote

*** TODO COMMENT dap-mode (like lsp) | realgud
#+begin_src emacs-lisp
  (use-package dap-mode
    :after (lsp-mode)
    :hook ((dap-ui-sessions-mode . evil-evilified-state)
           (dap-ui-breakpoints-ui-list-mode . evil-evilified-state)
           (dap-ui-locals-mode . evil-evilified-state)
           (dap-ui-inspect-mode . evil-evilified-state))
    :config
    (progn
      (dap-mode 1)
      (dap-ui-mode 1)
      ;; mouse support
      (spacemacs|add-toggle dap-mouse
                            :status dap-tooltip-mode
                            :on (progn (dap-tooltip-mode)
                                       (tooltip-mode))
                            :off (progn (dap-tooltip-mode -1)
                                        (tooltip-mode -1))
                            :documentation "Enable mouse support in DAP mode.")
      (when dap-enable-mouse-support
        (spacemacs/toggle-dap-mouse-on))

      (spacemacs|add-toggle dap-ui-controls
                            :status dap-ui-controls-mode
                            :on (dap-ui-controls-mode)
                            :off (dap-ui-controls-mode -1)
                            :documentation "Enable dap-ui-controls-mode")

      (when dap-enable-ui-controls
        (spacemacs/toggle-dap-ui-controls-on))

      ;; key bindings
      (let ((bindings (list
                       ;; transient state
                       "d."  #'dap-hydra
                       ;; repl
                       "d'"  #'dap-ui-repl
                       ;; abandon
                       "da"  #'dap-disconnect
                       "dA"  #'dap-delete-all-sessions
                       ;; breakpoints
                       "dbb" #'dap-breakpoint-toggle
                       "dbc" #'dap-breakpoint-condition
                       "dbl" #'dap-breakpoint-log-message
                       "dbh" #'dap-breakpoint-hit-condition
                       "dba" #'dap-breakpoint-add
                       "dbd" #'dap-breakpoint-delete
                       "dbD" #'dap-breakpoint-delete-all
                       ;; debuging/running
                       "ddd" #'dap-debug
                       "dde" #'dap-debug-edit-template
                       "ddl" #'dap-debug-last
                       "ddr" #'dap-debug-recent
                       ;; eval
                       "dee" #'dap-eval
                       "der" #'dap-eval-region
                       "det" #'dap-eval-thing-at-point
                       "det" #'dap-ui-expressions-add
                       ;; inspect
                       "dIi" #'dap-ui-inspect
                       "dIr" #'dap-ui-inspect-region
                       "dIt" #'dap-ui-inspect-thing-at-point
                       ;; stepping
                       "dc"  #'dap-continue
                       "di"  #'dap-step-in
                       "do"  #'dap-step-out
                       "dr"  #'dap-restart-frame
                       "ds"  #'dap-next
                       "dv"  #'dap-ui-inspect-thing-at-point
                       ;; switching
                       "dSs" #'dap-switch-session
                       "dSt" #'dap-switch-thread
                       "dSf" #'dap-switch-frame
                       ;; toggles
                       "dTm" 'spacemacs/toggle-dap-mouse
                       ;; windows
                       "dwo" #'dap-go-to-output-buffer
                       "dwl" #'dap-ui-locals
                       "dws" #'dap-ui-sessions
                       "dwb" #'dap-ui-breakpoints))
            (prefixes '("d"  "debug"
                        "db" "breakpoints"
                        "dd" "debugging"
                        "de" "eval"
                        "dI" "inspect"
                        "dS" "switch"
                        "dT" "toggles"
                        "dw" "debug windows")))

        ;; Set global prefixes
        (apply #'spacemacs/declare-prefix prefixes)

        ;; Set global key bindings
        (apply #'spacemacs/set-leader-keys bindings)

        ;; Do all mode specific dap bindings
        (dolist (mode spacemacs--dap-supported-modes)

          ;; avoid clash with other debug key bindings
          (spacemacs/set-leader-keys-for-major-mode mode "db" nil)
          (spacemacs/set-leader-keys-for-major-mode mode "dd" nil)

          ;; Set prefixes
          (cl-do* ((x prefixes (cddr x))
                   (y (cdr x) (cdr x)))
              ((or (null x) (null y)))
            (spacemacs/declare-prefix-for-mode mode
                                               (concat "m" (car x)) (car y)))

          ;; Set bindings
          (apply #'spacemacs/set-leader-keys-for-major-mode mode bindings)))))
 #+end_src

*** TODO docker & docker-tramp & dockerfile-mode

*** TODO imenu-list

*** TODO COMMENT elisp-tree-sitter & tree-sitter-langs & tree-sitter-indent & ts-fold
#+begin_src emacs-lisp
  (defun tree-sitter/init-tree-sitter ()
    (use-package tree-sitter
      :defer t
      :init
      (progn
        (when tree-sitter-syntax-highlight-enable
          (add-hook 'tree-sitter-after-on-hook #'spacemacs//tree-sitter-hl-maybe)))
      :config
      (progn
        (global-tree-sitter-mode))))

  (defun tree-sitter/init-tree-sitter-langs ()
    (use-package tree-sitter-langs
      :defer t))

  (defun tree-sitter/init-tree-sitter-indent ()
    (use-package tree-sitter-indent
      :if tree-sitter-indent-enable
      :defer t
      :init
      (progn
        (add-hook 'rust-mode-hook #'tree-sitter-indent-mode))))

  (defconst tree-sitter--ts-fold-supported-major-mode-hooks
    '(agda-mode-hook
      sh-mode-hook
      c-mode-hook
      c++-mode-hook
      csharp-mode-hook
      css-mode-hook
      ess-r-mode-hook
      go-mode-hook
      html-mode-hook
      java-mode-hook
      javascript-mode-hook
      js-mode-hook
      js2-mode-hook
      js3-mode-hook
      json-mode-hook
      jsonc-mode-hook
      nix-mode-hook
      php-mode-hook
      python-mode-hook
      rjsx-mode-hook
      ruby-mode-hook
      rust-mode-hook
      rustic-mode-hook
      scala-mode-hook
      swift-mode-hook
      typescript-mode-hook))

  (defun tree-sitter/init-ts-fold ()
    (use-package ts-fold
      :if tree-sitter-fold-enable
      :defer t
      :init
      (progn
        (when tree-sitter-fold-enable
          (dolist (mode-hook tree-sitter--ts-fold-supported-major-mode-hooks)
            (when (boundp mode-hook)
              (add-hook mode-hook #'ts-fold-mode)
              (when tree-sitter-fold-indicators-enable
                (add-hook mode-hook #'ts-fold-indicators-mode)))))

        (when tree-sitter-fold-indicators-enable
          ;; don't obscure lint and breakpoint indicators
          (setq ts-fold-indicators-priority 0)))))
#+end_src

*** TODO COMMENT engine-mode
#+begin_src emacs-lisp
  (use-package engine-mode
    :commands (defengine spacemacs/search-engine-select)
    :defines search-engine-alist
    :init
    (progn
      (spacemacs/set-leader-keys
       "aw/" 'spacemacs/search-engine-select)
      (setq search-engine-alist
            `((amazon
               :name "Amazon"
               :url (concat "https://www.amazon."
                            search-engine-amazon-tld
                            "/s/ref=nb_sb_noss?url=search-alias%%3Daps&field-keywords=%s"))
              (bing
               :name "Bing"
               :url "https://www.bing.com/search?q=%s")
              (docker-hub
               :name "Docker Hub"
               :url "https://hub.docker.com/search?q=%s")
              (duck-duck-go
               :name "Duck Duck Go"
               :url "https://duckduckgo.com/?q=%s")
              (ecosia
               :name "Ecosia"
               :url "https://www.ecosia.org/search?q=%s")
              (google
               :name "Google"
               :url "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")
              (google-images
               :name "Google Images"
               :url "https://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")
              (github
               :name "GitHub"
               :url "https://github.com/search?ref=simplesearch&q=%s")
              (google-maps
               :name "Google Maps"
               :url "https://maps.google.com/maps?q=%s")
              (twitter
               :name "Twitter"
               :url "https://twitter.com/search?q=%s")
              (project-gutenberg
               :name "Project Gutenberg"
               :url "https://www.gutenberg.org/ebooks/search.html/?format=html&default_prefix=all&sort_order=&query=%s")
              (youtube
               :name "YouTube"
               :url "https://www.youtube.com/results?aq=f&oq=&search_query=%s")
              (stack-overflow
               :name "Stack Overflow"
               :url "https://stackoverflow.com/search?q=%s")
              (spacemacs-issues
               :name "Spacemacs Issues"
               :url "https://github.com/syl20bnr/spacemacs/issues?utf8=%%E2%%9C%%93&q=is%%3Aissue+is%%3Aopen+%s")
              (spacemacs-pullrequests
               :name "Spacemacs Pull Requests"
               :url "https://github.com/syl20bnr/spacemacs/pulls?utf8=%%E2%%9C%%93&q=is%%3Aissue+is%%3Aopen+%s")
              (wikipedia
               :name "Wikipedia"
               :url "https://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s")
              (maven
               :name "Maven Central"
               :url "https://search.maven.org/search?q=%s")
              (npm
               :name "Npmjs"
               :url "https://www.npmjs.com/search?q=%s")
              (hoogle
               :name "Hoogle 5"
               :url "https://hoogle.haskell.org/?hoogle=%s")
              (haskell-packages
               :name "Hackage Package Search"
               :url "https://hackage.haskell.org/packages/search?terms=%s")
              (clojure
               :name "Clojure Docs"
               :url "https://clojuredocs.org/search?q=%s")
              (pip
               :name "Python Package Index"
               :url "https://pypi.org/search/?q=%s")
              (python-doc
               :name "Python Docs"
               :url "https://docs.python.org/3/search.html?q=%s")
              (c++-api-reference
               :name "C++ Reference"
               :url "https://en.cppreference.com/mwiki/index.php?search=%s")
              (rails-api
               :name "Rails API"
               :url "https://api.rubyonrails.org?q=%s")
              (wolfram-alpha
               :name "Wolfram Alpha"
               :url "https://www.wolframalpha.com/input/?i=%s")
              (debian-packages
               :name "Debian Package Search"
               :url "https://packages.debian.org/search?keywords=%s")
              (ubuntu-packages
               :name "Ubuntu Package Search"
               :url "https://packages.ubuntu.com/search?keywords=%s")
              (melpa
               :name "Melpa Package Search"
               :url "https://melpa.org/#/?q=%s")
              (ctan
               :name "CTAN"
               :url "https://ctan.org/search?phrase=%s")
              ,@search-engine-config-list))
      (dolist (engine search-engine-alist)
        (let ((func (intern (format "engine/search-%S" (car engine)))))
          (autoload func "engine-mode" nil 'interactive))))
    :config
    (progn
      (engine-mode t)
      (dolist (engine search-engine-alist)
        (let* ((cur-engine (car engine))
               (engine-url (plist-get (cdr engine) :url))
               (engine-keywords (plist-get (cdr engine) :keywords)))
          (eval `(defengine ,cur-engine ,engine-url ,@engine-keywords))))))
#+end_src

*** TODO Hyperbole
https://emacs-china.org/t/hyperbole-emacs-emacs/3014

* COMMENT packages may useful later
:PROPERTIES:
:VISIBILITY: folded
:END:
All this packages down here should be rechecked before using.
** TODO ibuffer-vc
Auto grouping ibuffer contents & git status. we'll see if it's useful.
#+begin_src emacs-lisp
  (use-package ibuffer-vc
    :straight (:host github :repo "purcell/ibuffer-vc")
    :defer 2
    :config
    ;; To include vc status info in the ibuffer list, add either
    ;; vc-status-mini or vc-status to `ibuffer-formats':
    (setq ibuffer-formats
          '((mark modified read-only vc-status-mini " "
                  (name 18 18 :left :elide)
                  " "
                  (size 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  (vc-status 16 16 :left)
                  " "
                  vc-relative-file)))

    ;; Don't need to display "Git" for every project; use a symbol instead
    (defun ibuffer-vc-generate-filter-groups-by-vc-root ()
      "Create a set of ibuffer filter groups based on the vc root dirs of buffers."
      (let ((roots (ibuffer-remove-duplicates
                    (delq nil (mapcar 'ibuffer-vc-root (buffer-list))))))
        (mapcar (lambda (vc-root)
                  (cons (format " %s" (cdr vc-root))
                        `((vc-root . ,vc-root))))
                roots)))

    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-vc-set-filter-groups-by-vc-root)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))
#+end_src

** TODO editorconfig
EditorConfig helps developers define and maintain consistent coding
styles between different editors and IDEs.

** TODO multi-web-mode | mmm-mode | polymode | mumamo | multimode | two-mode-mode
multi major-mode in one buffer for web development, or SQL, or JSON, or else.

** TODO vlf
This package provides the M-x vlf command, which visits part of large
file without loading it entirely.

** TODO github
;;; init-github.el --- Github integration -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:

(require 'init-git)

(maybe-require-package 'yagist)
(require-package 'bug-reference-github)
(add-hook 'prog-mode-hook 'bug-reference-prog-mode)

(maybe-require-package 'github-clone)
(maybe-require-package 'forge)
(maybe-require-package 'github-review)

(provide 'init-github)
;;; init-github.el ends here

** TODO gist
An Emacs interface for managing gists (http://gist.github.com).

** TODO chinese search
(use-package pyim
:demand t
:init
(defun eh-orderless-regexp (orig_func component)
(let ((result (funcall orig_func component)))
(pyim-cregexp-build result)))


(defun toggle-chinese-search ()
(interactive)
(if (not (advice-member-p #'eh-orderless-regexp 'orderless-regexp))
(advice-add 'orderless-regexp :around #'eh-orderless-regexp)
(advice-remove 'orderless-regexp #'eh-orderless-regexp)))

(defun disable-py-search (&optional args)
(if (advice-member-p #'eh-orderless-regexp 'orderless-regexp)
(advice-remove 'orderless-regexp #'eh-orderless-regexp)))

;; (advice-add 'exit-minibuffer :after #'disable-py-search)
(add-hook 'minibuffer-exit-hook 'disable-py-search)

(global-set-key (kbd "s-p") 'toggle-chinese-search)
;; use #$#pyim to search chinese and also es.exe locate 子龙
)
  
** TODO rime
(use-package rime
:init
(setq default-input-method "rime")
:config
(progn (set-face-attribute 'rime-default-face nil :foreground "#839496" :background "#073642")
(setq rime-librime-root (expand-file-name "librime/dist" user-emacs-directory))
(setq rime-show-candidate 'posframe)
(setq rime-share-data-dir "~/Library/Rime")
(setq rime-user-data-dir "~/Library/Rime")
(if sys/win32p
(progn
(setq rime-share-data-dir "C:\\Users\\lionqu\\AppData\\Roaming\\Rime")
(setq rime-user-data-dir "C:\\Users\\lionqu\\AppData\\Roaming\\Rime")
))
(setq rime-posframe-properties
(list :background-color "#073642"
:foreground-color "#839496"
:internal-border-width 1))))
                     
** TODO el-patch
;; Package for helping advise/modify features of other packages

** TODO paradox
A modern Packages Menu
#+begin_src emacs-lisp
  (use-package paradox
    :custom-face
    (paradox-archive-face ((t (:inherit font-lock-doc-face))))
    (paradox-description-face ((t (:inherit completions-annotations))))
    :hook (after-init . paradox-enable)
    :init (setq paradox-execute-asynchronously t
                paradox-github-token t
                paradox-display-star-count nil
                paradox-status-face-alist ;
                '(("built-in"   . font-lock-builtin-face)
                  ("available"  . success)
                  ("new"        . (success bold))
                  ("held"       . font-lock-constant-face)
                  ("disabled"   . font-lock-warning-face)
                  ("avail-obso" . font-lock-comment-face)
                  ("installed"  . font-lock-comment-face)
                  ("dependency" . font-lock-comment-face)
                  ("incompat"   . font-lock-comment-face)
                  ("deleted"    . font-lock-comment-face)
                  ("unsigned"   . font-lock-warning-face)))
    :config
    (add-hook 'paradox-after-execute-functions
              (lambda (_)
                "Display `page-break-lines' in \"*Paradox Report*\" buffer."
                (when (fboundp 'page-break-lines-mode)
                  (let ((buf (get-buffer "*Paradox Report*"))
                        (inhibit-read-only t))
                    (when (buffer-live-p buf)
                      (with-current-buffer buf
                        (page-break-lines-mode 1))))))
              t))
#+end_src

** TODO auto-package-update
Auto update packages
#+begin_src emacs-lisp
  (use-package auto-package-update
    :init
    (setq auto-package-update-delete-old-versions t
          auto-package-update-hide-results t)
    (defalias 'upgrade-packages #'auto-package-update-now))
#+end_src

** TODO compat
Compatibility
#+begin_src emacs-lisp
  (use-package compat
    :demand t)
#+end_src

** TODO default-text-scale
#+begin_src emacs-lisp
  ;; Easily adjust the font size in all frames
  (use-package default-text-scale
    :hook (after-init . default-text-scale-mode)
    :bind (:map default-text-scale-mode-map
                ("s-="   . default-text-scale-increase)
                ("s--"   . default-text-scale-decrease)
                ("s-0"   . default-text-scale-reset)
                ("C-s-=" . default-text-scale-increase)
                ("C-s--" . default-text-scale-decrease)
                ("C-s-0" . default-text-scale-reset)))
#+end_src

** TODO iscroll
#+begin_src emacs-lisp
  ;; Smooth scrolling over images
  (use-package iscroll
    :diminish
    :hook (image-mode . iscroll-mode))
#+end_src

** TODO mixed-pitch

** TODO vterm
#+begin_src emacs-lisp
  ;; Better terminal emulator
  ;; @see https://github.com/akermu/emacs-libvterm#installation
  (when (and module-file-suffix           ; dynamic module
             (executable-find "cmake")
             (executable-find "libtool")
             (executable-find "make"))
    (use-package vterm
      :bind (:map vterm-mode-map
                  ([f9] . (lambda ()
                            (interactive)
                            (and (fboundp 'shell-pop-toggle)
                                 (shell-pop-toggle)))))
      :init (setq vterm-always-compile-module t))

    (use-package multi-vterm
      :bind ("C-<f9>" . multi-vterm)
      :init (setq multi-vterm-buffer-name "vterm")
      :config
      (with-no-warnings
        (defun my-multi-vterm ()
          "Create new vterm buffer."
          (interactive)
          (let ((vterm-buffer (multi-vterm-get-buffer)))
            (setq multi-vterm-buffer-list
                  (nconc multi-vterm-buffer-list (list vterm-buffer)))
            (set-buffer vterm-buffer)
            (multi-vterm-internal)
            (pop-to-buffer vterm-buffer)))
        (advice-add #'multi-vterm :override #'my-multi-vterm))))
#+end_src

** TODO org-preview-html

** TODO nov (epub reader)
#+begin_src emacs-lisp
  ;; Epub reader
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :hook (nov-mode . my-nov-setup)
    :init
    (defun my-nov-setup ()
      "Setup `nov-mode' for better reading experience."
      (visual-line-mode 1)
      (centaur-read-mode)
      (face-remap-add-relative 'variable-pitch :family "Times New Roman" :height 1.5))
    :config
    (with-no-warnings
      ;; WORKAROUND: errors while opening `nov' files with Unicode characters
      ;; @see https://github.com/wasamasa/nov.el/issues/63
      (defun my-nov-content-unique-identifier (content)
        "Return the the unique identifier for CONTENT."
        (let* ((name (nov-content-unique-identifier-name content))
               (selector (format "package>metadata>identifier[id='%s']"
                                 (regexp-quote name)))
               (id (car (esxml-node-children (esxml-query selector content)))))
          (and id (intern id))))
      (advice-add #'nov-content-unique-identifier :override #'my-nov-content-unique-identifier))

    ;; Fix encoding issue on Windows
    (when sys/win32p
      (setq process-coding-system-alist
            (cons `(,nov-unzip-program . (gbk . gbk))
                  process-coding-system-alist))))
#+end_src

** TODO rss reader
*** TODO elfeed
#+begin_src emacs-lisp
  ;; Atom/RSS reader
  (use-package elfeed
    :pretty-hydra
    ((:title (pretty-hydra-title "Elfeed" 'faicon "rss-square" :face 'all-the-icons-orange :height 1.1 :v-adjust -0.05)
             :color amaranth :quit-key "q")
     ("Search"
      (("c" elfeed-db-compact "compact db")
       ("g" elfeed-search-update--force "refresh")
       ("G" elfeed-search-fetch "update")
       ("y" elfeed-search-yank "copy URL")
       ("+" elfeed-search-tag-all "tag all")
       ("-" elfeed-search-untag-all "untag all"))
      "Filter"
      (("l" elfeed-search-live-filter "live filter")
       ("s" elfeed-search-set-filter "set filter")
       ("*" (elfeed-search-set-filter "@6-months-ago +star") "starred")
       ("a" (elfeed-search-set-filter "@6-months-ago") "all")
       ("t" (elfeed-search-set-filter "@1-day-ago") "today"))
      "Article"
      (("b" elfeed-search-browse-url "browse")
       ("n" next-line "next")
       ("p" previous-line "previous")
       ("u" elfeed-search-tag-all-unread "mark unread")
       ("r" elfeed-search-untag-all-unread "mark read")
       ("RET" elfeed-search-show-entry "show"))))
    :bind (("C-x w" . elfeed)
           :map elfeed-search-mode-map
           ("?" . elfeed-hydra/body)
           :map elfeed-show-mode-map
           ("q" . delete-window))
    :hook (elfeed-show-mode . centaur-read-mode)
    :init (setq url-queue-timeout 30
                elfeed-db-directory (locate-user-emacs-file ".elfeed")
                elfeed-show-entry-switch #'pop-to-buffer
                elfeed-show-entry-delete #'delete-window
                elfeed-feeds '(("https://planet.emacslife.com/atom.xml" planet emacslife)
                               ("http://www.masteringemacs.org/feed/" mastering)
                               ("https://oremacs.com/atom.xml" oremacs)
                               ("https://pinecast.com/feed/emacscast" emacscast)
                               ("https://emacstil.com/feed.xml" Emacs TIL)
                               ;; ("https://www.reddit.com/r/emacs.rss" reddit)
                               ))
    :config
    ;; Ignore db directory in recentf
    (push elfeed-db-directory recentf-exclude)

    ;; Use xwidget if possible
    (with-no-warnings
      (defun my-elfeed-show-visit (&optional use-generic-p)
        "Visit the current entry in your browser using `browse-url'.
  If there is a prefix argument, visit the current entry in the
  browser defined by `browse-url-generic-program'."
        (interactive "P")
        (let ((link (elfeed-entry-link elfeed-show-entry)))
          (when link
            (message "Sent to browser: %s" link)
            (cond
             ((featurep 'xwidget-internal)
              (centaur-webkit-browse-url link))
             (use-generic-p
              (browse-url-generic link))
             (t (browse-url link))))))
      (advice-add #'elfeed-show-visit :override #'my-elfeed-show-visit)

      (defun my-elfeed-search-browse-url (&optional use-generic-p)
        "Visit the current entry in your browser using `browse-url'.
  If there is a prefix argument, visit the current entry in the
  browser defined by `browse-url-generic-program'."
        (interactive "P")
        (let ((entries (elfeed-search-selected)))
          (cl-loop for entry in entries
                   do (elfeed-untag entry 'unread)
                   when (elfeed-entry-link entry)
                   do (cond
                       ((featurep 'xwidget-internal)
                        (centaur-webkit-browse-url it t))
                       (use-generic-p
                        (browse-url-generic it))
                       (t (browse-url it))))
          (mapc #'elfeed-search-update-entry entries)
          (unless (or elfeed-search-remain-on-entry (use-region-p))
            (forward-line))))
      (advice-add #'elfeed-search-browse-url :override #'my-elfeed-search-browse-url)))
#+end_src
*** TODO newsticker
#+begin_src emacs-lisp
  ;; Another Atom/RSS reader
  (use-package newsticker
    :ensure nil
    :bind ("C-x W" . newsticker-show-news)
    :hook (newsticker-treeview-item-mode . centaur-read-mode)
    :init (setq newsticker-url-list
                '(("Planet Emacslife" "https://planet.emacslife.com/atom.xml")
                  ("Mastering Emacs" "http://www.masteringemacs.org/feed/")
                  ("Oremacs" "https://oremacs.com/atom.xml")
                  ("EmacsCast" "https://pinecast.com/feed/emacscast")
                  ("Emacs TIL" "https://emacstil.com/feed.xml")
                  ;; ("Emacs Reddit" "https://www.reddit.com/r/emacs.rss")
                  )))
#+end_src

** TODO bongo (muxic player)
#+begin_src emacs-lisp
  (when centaur-player
    ;; Music player
    (use-package bongo
      :bind ("C-<f8>" . bongo)
      :config
      (with-eval-after-load 'dired
        (with-no-warnings
          (defun bongo-add-dired-files ()
            "Add marked files to the Bongo library."
            (interactive)
            (bongo-buffer)
            (let (file (files nil))
              (dired-map-over-marks
               (setq file (dired-get-filename)
                     files (append files (list file)))
               nil t)
              (with-bongo-library-buffer
               (mapc 'bongo-insert-file files)))
            (bongo-switch-buffers))
          (bind-key "b" #'bongo-add-dired-files dired-mode-map))))

    ;;
    ;; Music Player Daemon
    ;;
    ;; Built-in mpc client
    (use-package mpc
      :ensure nil
      :bind ("S-<f8>" . mpc)
      :init
      (defun restart-mpd ()
        (interactive)
        (call-process "pkill" nil nil nil "mpd")
        (call-process "mpd")))

    ;; MPD Interface
    (use-package mingus
      :bind ("s-<f8>" . mingus)
      :config
      (add-to-list 'global-mode-string mingus-mode-line-object)
      (with-no-warnings
        ;; WORKAROUND:Don't reactivate the timer
        ;; @see https://github.com/pft/mingus/issues/43
        (defun mingus (&optional set-variables)
          "MPD Interface by Niels Giesen, Useful and Simple.

  Actually it is just named after that great bass player."
          (interactive "P")
          (when set-variables
            (call-interactively 'mingus-set-variables-interactively))
          (mingus-switch-to-playlist)
          (cond ((boundp 'mode-line-modes)
                 (add-to-list 'mode-line-modes mingus-mode-line-object))
                ((boundp 'global-mode-string)
                 (add-to-list 'global-mode-string mingus-mode-line-object)))
          (unless (timerp mingus-timer)
            (setq mingus-timer (run-with-idle-timer mingus-timer-interval
                                                    mingus-timer-interval
                                                    'mingus-timer-handler)))
          (mingus-playlist)
          (mingus-redraw-buffer))

        ;; WORKAROUND: Redraw to display faces
        ;; @see https://github.com/pft/mingus/issues/42
        (advice-add #'mingus-timer-handler :after #'mingus-redraw-buffer)))

    ;; Simple mpd client
    (when (executable-find "mpc")
      (use-package simple-mpc
        :commands (simple-mpc-mode simple-mpc-call-mpc simple-mpc-call-mpc-strings)
        :functions (simple-mpc-current simple-mpc-start-timer)
        :custom-face
        (simple-mpc-main-name ((t (:inherit font-lock-string-face :bold t :height 1.3))))
        (simple-mpc-main-headers ((t (:inherit font-lock-keyword-face :bold t :height 1.1))))
        :bind (("M-<f8>" . simple-mpc+)
               :map simple-mpc-mode-map
               ("P" . simple-mpc-play)
               ("O" . simple-mpc-stop)
               ("u" . simple-mpc-update))
        :init (setq simple-mpc-playlist-format
                    "%time%\t[[%title%\t%artist%\t%album%]|[%file%]]"
                    simple-mpc-table-separator "\t")
        :config
        (defun simple-mpc-play ()
          "Start playing the song."
          (interactive)
          (simple-mpc-call-mpc nil "play"))

        (defun simple-mpc-stop ()
          "Stop the playback."
          (interactive)
          (simple-mpc-call-mpc nil "stop"))

        (defun simple-mpc-update ()
          "Update database."
          (interactive)
          (message "Updating music DB...")
          (simple-mpc-call-mpc nil "update")
          (message "Updating music DB...done"))

        ;; Enhance UI
        (defun simple-mpc+ (&optional _ignore-auto _noconfirm)
          "Start simple-mpc.

  IGNORE-AUTO and NOCONFIRM are passed by `revert-buffer'."
          (interactive)
          (let ((buf (get-buffer-create simple-mpc-main-buffer-name)))
            (with-current-buffer buf
              (read-only-mode -1)
              (erase-buffer)
              (insert (propertize "🔊 Simple MPC\n"
                                  'face 'simple-mpc-main-name)

                      (propertize "\n  ⚙️ Controls\n" 'face 'simple-mpc-main-headers)
                      "\t [t]oggle\n"
                      "\t [n]ext track\n"
                      "\t [p]revious track\n"
                      "\t seek [f]orward\n"
                      "\t seek [b]ackward\n"
                      "\t increase [V]olume\n"
                      "\t decrease [v]olume\n"
                      "\t toggle [r]epeat mode\n"

                      (propertize "\n  🔈 Playlist\n" 'face 'simple-mpc-main-headers)
                      "\t Start [P]laying\n"
                      "\t St[O]p playing\n"
                      "\t view [c]urrent playlist\n"
                      "\t [C]lear current playlist\n"
                      "\t [S]huffle playlist\n"
                      "\t [l]oad playlist\n"
                      "\t [u]pdate database\n"
                      "\t [s]earch database\n"

                      (propertize "\n  🛠️️ Misc\n" 'face 'simple-mpc-main-headers)
                      "\t [q]uit")
              (simple-mpc-mode) ; start major mode
              (switch-to-buffer buf))))

        ;; Display current song in mode-line
        (defvar simple-mpc-current nil)
        (add-to-list 'global-mode-string '("" (:eval simple-mpc-current)))

        (defun simple-mpc-current ()
          "Get current song information."
          (setq simple-mpc-current
                (when (derived-mode-p 'simple-mpc-mode)
                  (let ((strs (simple-mpc-call-mpc-strings nil)))
                    (when (length> strs 2)
                      (when-let* ((title (nth 0 strs))
                                  (info (nth 1 strs))
                                  (info-strs (split-string info))
                                  (state (nth 0 info-strs))
                                  (time (nth 2 info-strs)))
                        (propertize (format " %s%s [%s] "
                                            (when (icon-displayable-p)
                                              (pcase state
                                                ("[playing]" " ")
                                                ("[paused]" " ")
                                                (_ "")))
                                            title time)
                                    'face 'font-lock-comment-face))))))
          (force-mode-line-update))

        (defvar simple-mpc--timer nil)
        (defun simple-mpc-start-timer ()
          "Start simple-mpc timer to refresh current song."
          (setq simple-mpc--timer (run-with-timer 1 1 #'simple-mpc-current)))
        (defun simple-mpc-stop-timer ()
          "Stop simple-mpc timer."
          (when (timerp simple-mpc--timer)
            (cancel-timer simple-mpc--timer)))
        (simple-mpc-start-timer))))
#+end_src

** TODO atomic-chrome
#+begin_src emacs-lisp
  ;; Edit text for browsers with GhostText or AtomicChrome extension
  (use-package atomic-chrome
    :hook ((emacs-startup . atomic-chrome-start-server)
           (atomic-chrome-edit-mode . (lambda ()
                                        "Enter edit mode and delete other windows."
                                        (and (fboundp 'olivetti-mode)
                                             (olivetti-mode 1))
                                        (delete-other-windows))))
    :init (setq atomic-chrome-buffer-open-style 'frame)
    :config
    (if (fboundp 'gfm-mode)
        (setq atomic-chrome-url-major-mode-alist
              '(("github\\.com" . gfm-mode)))))
#+end_src

** TODO proced
#+begin_src emacs-lisp
  ;; Process
  (use-package proced
    :ensure nil
    :init
    (setq-default proced-format 'verbose)
    (setq proced-auto-update-flag t
          proced-auto-update-interval 3))
#+end_src

** TODO webjump
#+begin_src emacs-lisp
  ;; Search
  (use-package webjump
    :ensure nil
    :bind ("C-c /" . webjump)
    :init (setq webjump-sites
                '(;; Emacs
                  ("Emacs Home Page" .
                   "www.gnu.org/software/emacs/emacs.html")
                  ("Xah Emacs Site" . "ergoemacs.org/index.html")
                  ("(or emacs irrelevant)" . "oremacs.com")
                  ("Mastering Emacs" .
                   "https://www.masteringemacs.org/")

                  ;; Search engines.
                  ("DuckDuckGo" .
                   [simple-query "duckduckgo.com"
                                 "duckduckgo.com/?q=" ""])
                  ("Google" .
                   [simple-query "www.google.com"
                                 "www.google.com/search?q=" ""])
                  ("Bing" .
                   [simple-query "www.bing.com"
                                 "www.bing.com/search?q=" ""])

                  ("Baidu" .
                   [simple-query "www.baidu.com"
                                 "www.baidu.com/s?wd=" ""])
                  ("Wikipedia" .
                   [simple-query "wikipedia.org" "wikipedia.org/wiki/" ""]))))
#+end_src

** TODO ztree
#+begin_src emacs-lisp
  ;; text mode directory tree
  (use-package ztree
    :custom-face
    (ztreep-header-face ((t (:inherit diff-header))))
    (ztreep-arrow-face ((t (:inherit font-lock-comment-face))))
    (ztreep-leaf-face ((t (:inherit diff-index))))
    (ztreep-node-face ((t (:inherit font-lock-variable-name-face))))
    (ztreep-expand-sign-face ((t (:inherit font-lock-function-name-face))))
    (ztreep-diff-header-face ((t (:inherit (diff-header bold)))))
    (ztreep-diff-header-small-face ((t (:inherit diff-file-header))))
    (ztreep-diff-model-normal-face ((t (:inherit font-lock-doc-face))))
    (ztreep-diff-model-ignored-face ((t (:inherit font-lock-doc-face :strike-through t))))
    (ztreep-diff-model-diff-face ((t (:inherit diff-removed))))
    (ztreep-diff-model-add-face ((t (:inherit diff-nonexistent))))
    :pretty-hydra
    ((:title (pretty-hydra-title "Ztree" 'octicon "diff" :face 'all-the-icons-green :height 1.1 :v-adjust 0)
             :color pink :quit-key "q")
     ("Diff"
      (("C" ztree-diff-copy "copy" :exit t)
       ("h" ztree-diff-toggle-show-equal-files "show/hide equals" :exit t)
       ("H" ztree-diff-toggle-show-filtered-files "show/hide ignores" :exit t)
       ("D" ztree-diff-delete-file "delete" :exit t)
       ("v" ztree-diff-view-file "view" :exit t)
       ("d" ztree-diff-simple-diff-files "simple diff" :exit t)
       ("r" ztree-diff-partial-rescan "partial rescan" :exit t)
       ("R" ztree-diff-full-rescan "full rescan" :exit t))
      "View"
      (("RET" ztree-perform-action "expand/collapse or view" :exit t)
       ("SPC" ztree-perform-soft-action "expand/collapse or view in other" :exit t)
       ("TAB" ztree-jump-side "jump side" :exit t)
       ("g" ztree-refresh-buffer "refresh" :exit t)
       ("x" ztree-toggle-expand-subtree "expand/collapse" :exit t)
       ("<backspace>" ztree-move-up-in-tree "go to parent" :exit t))))
    :bind (:map ztreediff-mode-map
                ("C-<f5>" . ztree-hydra/body))
    :init (setq ztree-draw-unicode-lines t
                ztree-show-number-of-children t))
#+end_src

** TODO memory-usage

** TODO list-environment
#+begin_src emacs-lisp
  (use-package list-environment
    :hook (list-environment-mode . (lambda ()
                                     (setq tabulated-list-format
                                           (vconcat `(("" ,(if (icon-displayable-p) 2 0)))
                                                    tabulated-list-format))
                                     (tabulated-list-init-header)))
    :init
    (with-no-warnings
      (defun my-list-environment-entries ()
        "Generate environment variable entries list for tabulated-list."
        (mapcar (lambda (env)
                  (let* ((kv (split-string env "="))
                         (key (car kv))
                         (val (mapconcat #'identity (cdr kv) "=")))
                    (list key (vector
                               (if (icon-displayable-p)
                                   (all-the-icons-octicon "key" :height 0.8 :v-adjust -0.05)
                                 "")
                               `(,key face font-lock-keyword-face)
                               `(,val face font-lock-string-face)))))
                process-environment))
      (advice-add #'list-environment-entries :override #'my-list-environment-entries)))
#+end_src

** TODO japanese related

*** TODO migemo

*** TODO ddskk

** htmlize
Html Conversion
#+begin_src emacs-lisp
  (use-package htmlize
    :commands (htmlize-buffer))
#+end_src

** solaire-mode
Solaire-mode is an aesthetic plugin designed to visually distinguish
"real" buffers from "unreal" buffers by giving the latter a slightly
different -- often darker -- background.

*Tried, it's ugly.*

#+begin_src emacs-lisp
  (use-package solaire-mode
    :after doom-themes
    :init (solaire-global-mode))
#+end_src

*** config snippets
#+begin_example emacs-lisp
(dolist (face '(mode-line mode-line-inactive))
  (setf (alist-get face solaire-mode-remap-modeline) nil))

(add-to-list 'solaire-mode-themes-to-face-swap 'doom-vibrant)
(add-to-list 'solaire-mode-themes-to-face-swap "^doom-")
#+end_example

** org-modern
Not like it.
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :init (global-org-modern-mode))
#+end_src

** whole-line-or-region
Operate on current line if region undefined.
#+begin_src emacs-lisp
  (use-package whole-line-or-region
    :init
    (whole-line-or-region-global-mode)
    ;; (define-key whole-line-or-region-local-mode-map [remap comment-dwim] nil)
    )
#+end_src

** consult-project-extra
Defines an endpoint for accessing different sources related to the
common project workflow.

Not really useful.

#+begin_src emacs-lisp
  (use-package consult-project-extra
    :after consult
    :bind (("C-x p f" . consult-project-extra-find)
           ("C-x p o" . consult-project-extra-find-other-window)))
#+end_src

** kind-icon
Adds configurable icon or text-based completion prefixes based on the
:company-kind property that many completion backends (such as lsp-mode
and Emacs 28's elisp-mode) provide.
#+begin_src emacs-lisp
  (use-package kind-icon
    :after corfu
    :demand
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    (kind-icon-use-icons nil)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
or (from lambda emacs)
#+begin_src emacs-lisp
  ;;;;; Kind Icon (For Corfu)
  (use-package kind-icon
    :straight (:type git :host github :repo "jdtsmith/kind-icon")
    :after corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
    (kind-icon-blend-background nil)
    ;; NOTE kind-icon' depends on `svg-lib' which creates a cache directory that
    ;; defaults to the `user-emacs-directory'. Here, I change that directory to
    ;; the cache location.
    (svg-lib-icons-dir (concat lem-cache-dir  "svg-lib/cache/")) ; Change cache dir
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'

    ;; NOTE 2022-02-05: Add hook to reset cache so the icon colors match the theme
    ;; If this isn't done, then the backgound color will remain the same, meaning
    ;; it will not match the background color corresponding to the current theme.
    ;; This hook is already set in the `lem-setup-themes.el' file, but you could
    ;; set it here if you prefer:
    ;; e.g. (add-hook 'after-load-theme-hook #'kind-icon-reset-cache)
    ;; kind-icon needs to have its cache flushed after theme change
    (add-hook 'lambda-themes-after-load-theme-hook #'kind-icon-reset-cache)
    )
#+end_src

** goto-chg & goto-char-preview & goto-line-preview
#+begin_src emacs-lisp
  ;; Goto last change
  (use-package goto-chg
    :bind ("C-," . goto-last-change))

  ;; Preview when `goto-char'
  (use-package goto-char-preview
    :bind ([remap goto-char] . goto-char-preview))

  ;; Preview when `goto-line'
  (use-package goto-line-preview
    :bind ([remap goto-line] . goto-line-preview))
#+end_src

** TODO magit & transient & magit-todos & vdiff-magit & forge & orgit & git-flow
#+begin_src emacs-lisp
    ;;;; Magit
  (use-package magit
    :commands
    (magit-blame-mode
     magit-commit
     magit-diff
     magit-log
     magit-status)
    :hook (git-commit-mode . turn-on-flyspell)
    :bind ((:map magit-log-mode-map
                 ;; Keybindings for use with updating packages interactively
                 ("Q" . #'exit-recursive-edit)))
    :init
    ;; Suppress the message we get about "Turning on
    ;; magit-auto-revert-mode" when loading Magit.
    (setq magit-no-message '("Turning on magit-auto-revert-mode..."))
    :config
    (setq magit-log-margin '(t "%Y-%m-%d.%H:%M:%S "  magit-log-margin-width nil 18))
    (setq magit-refresh-status-buffer t)
    ;; Set git for macos & homebrew
    (if (and sys-mac homebrew)
        (setq magit-git-executable (concat homebrew "git"))
      (setq magit-git-executable "/usr/bin/git"))
    ;; Fine grained diffs
    (setq magit-diff-refine-hunk t)
    ;; control magit initial visibility
    (setq magit-section-initial-visibility-alist
          '((stashes . hide) (untracked . hide) (unpushed . hide) ([unpulled status] . show)))
    (global-git-commit-mode t) ; use emacs as editor for git commits


    ;; refresh status buffer
    (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
    ;; no magit header line as it conflicts w/bespoke-modeline
    (advice-add 'magit-set-header-line-format :override #'ignore)
    ;; display magit setting
    (setq magit-display-buffer-function #'lem-display-magit-in-other-window)
    ;; (setq magit-display-buffer-function #'lem-magit-display-buffer-pop-up-frame)
    )

  ;; optional: display magit status in new frame
  (defun lem-magit-display-buffer-pop-up-frame (buffer)
    (if (with-current-buffer buffer (eq major-mode 'magit-status-mode))
        (display-buffer buffer
                        '((display-buffer-reuse-window
                           display-buffer-pop-up-frame)
                          (reusable-frames . t)))
      (magit-display-buffer-traditional buffer)))

  ;; optional: display magit in other window & create one if only 1 window
  (defun lem-display-magit-in-other-window (buffer)
    (if (one-window-p)
        (progn
          (split-window-right)
          (other-window 1)
          (display-buffer buffer
                          '((display-buffer-reuse-window))))
      (magit-display-buffer-traditional buffer)))
#+end_src

#+begin_src emacs-lisp
  ;; Git
  ;; See `magit-maybe-define-global-key-bindings'
  (use-package magit
    :init (setq magit-diff-refine-hunk t)
    :config
    (when sys/win32p
      (setenv "GIT_ASKPASS" "git-gui--askpass"))

    ;; Exterminate Magit buffers
    (with-no-warnings
      (defun my-magit-kill-buffers (&rest _)
        "Restore window configuration and kill all Magit buffers."
        (interactive)
        (magit-restore-window-configuration)
        (let ((buffers (magit-mode-get-buffers)))
          (when (eq major-mode 'magit-status-mode)
            (mapc (lambda (buf)
                    (with-current-buffer buf
                      (if (and magit-this-process
                               (eq (process-status magit-this-process) 'run))
                          (bury-buffer buf)
                        (kill-buffer buf))))
                  buffers))))
      (setq magit-bury-buffer-function #'my-magit-kill-buffers))

    ;; Access Git forges from Magit
    (when (executable-find "cc")
      (use-package forge
        :demand t
        :defines forge-topic-list-columns
        :custom-face
        (forge-topic-label ((t (:inherit variable-pitch :height 0.9 :width condensed :weight regular :underline nil))))
        :init
        (setq forge-topic-list-columns
              '(("#" 5 forge-topic-list-sort-by-number (:right-align t) number nil)
                ("Title" 60 t nil title  nil)
                ("State" 6 t nil state nil)
                ("Updated" 10 t nil updated nil)))))

    ;; Show TODOs in magit
    (use-package magit-todos
      :defines magit-todos-nice
      :bind ("C-c C-t" . ivy-magit-todos)
      :init
      (setq magit-todos-nice (if (executable-find "nice") t nil))
      (let ((inhibit-message t))
        (magit-todos-mode 1))
      :config
      (with-eval-after-load 'magit-status
        (transient-append-suffix 'magit-status-jump '(0 0 -1)
          '("t " "Todos" magit-todos-jump-to-todos)))))
#+end_src

** TODO browse-at-remote
#+begin_src emacs-lisp
  ;; Open github/gitlab/bitbucket page
  (use-package browse-at-remote
    :bind (:map vc-prefix-map
                ("B" . browse-at-remote)))

#+end_src

** TODO clean-aindent-mode

** TODO aggressive-indent

** TODO savehist
Saves recorded minibuffer histories to a file (`~/.emacs.d/history' by
default).

No need for now.

#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :hook (after-init . savehist-mode)
    :init
    ;; (setq savehist-save-minibuffer-history t)
    ;; (setq history-length 100)
    (put 'minibuffer-history 'history-length 50)
    ;; (put 'evil-ex-history 'history-length 50)
    (put 'kill-ring 'history-length 25))
#+end_src

Centaur settings.
#+begin_example emacs-lisp
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :init (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
              history-length 1000
              savehist-additional-variables '(mark-ring
                                              global-mark-ring
                                              search-ring
                                              regexp-search-ring
                                              extended-command-history)
              savehist-autosave-interval 300))
#+end_example

Spacemacs settings
#+begin_example emacs-lisp
 (use-package savehist
    :init
    (progn
      ;; Minibuffer history
      (setq savehist-file (concat spacemacs-cache-directory "savehist")
            enable-recursive-minibuffers t ; Allow commands in minibuffers
            history-length 1000
            savehist-additional-variables '(mark-ring
                                            global-mark-ring
                                            search-ring
                                            regexp-search-ring
                                            extended-command-history
                                            kill-ring)
            savehist-autosave-interval 60)
      (savehist-mode t)))
#+end_example

** minions
A minor-mode menu for mode-line
#+begin_src emacs-lisp
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))
#+end_src

** TODO editorconfig

** TODO eval-sexp-fu

** TODO hexl

** TODO hungry-delete

** TODO password-generator

** TODO string-inflection

** TODO uuidgen

** TODO unkillable-scratch
#+begin_src emacs-lisp
  (use-package unkillable-scratch
    :defer t
    :init
    (progn
      (setq unkillable-scratch-do-not-reset-scratch-buffer t)
      (unkillable-scratch dotspacemacs-scratch-buffer-unkillable)))
#+end_src

** TODO column-enforce-mode

** TODO writeroom-mode

** TODO EXWM

** TODO fasd (no need for eshell-z but no windows)

** TODO kubernetes-el

** TODO prettier

** TODO prodigy

** TODO rebox2

** TODO restclient & ob-http

** TODO xterm-color | vterm

** TODO go-translate | translate-mode

** TODO EAF

** TODO hackernews

** APPEARANCES
*** TODO ElScreen
Utility for multiple screens

*** TODO Zoom
Fixed and automatic balanced window layout for Emacs.

*** TODO awesome-tab | centaur-tabs

*** windmove-mode keybindings
default no bindings set, uncomment to apply.
need redesign to use direct keybinding as such functions are very slow.

#+begin_src emacs-lisp
  ;; Directional window-selection routines
  (use-package windmove
    :ensure nil
    :hook (after-init . (lambda ()
                          (windmove-default-keybindings 'super))))
#+end_src

**** COMMENT windmove-default-keybindings
S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src

**** COMMENT windmove-delete-default-keybindings
C-x S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-delete-default-keybindings)
#+end_src

**** COMMENT windmove-display-default-keybindings
M-S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-display-default-keybindings)
#+end_src

**** COMMENT windmove-swap-states-default-keybindings
S-s-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-swap-states-default-keybindings)
#+end_src

*** iedit | symbol-overlay
edit same text in one buffer or region
#+begin_src emacs-lisp
  ;; Edit multiple regions in the same way simultaneously
  (use-package iedit
    :defines desktop-minor-mode-table
    :bind (("C-;" . iedit-mode)
           ("C-x r RET" . iedit-rectangle-mode)
           :map isearch-mode-map ("C-;" . iedit-mode-from-isearch)
           :map esc-map ("C-;" . iedit-execute-last-modification)
           :map help-map ("C-;" . iedit-mode-toggle-on-function))
    :config
    ;; Avoid restoring `iedit-mode'
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-minor-mode-table
                   '(iedit-mode nil))))
#+end_src

#+begin_src emacs-lisp
  ;; Highlight symbols
  (use-package symbol-overlay
    :diminish
    :functions (turn-off-symbol-overlay turn-on-symbol-overlay)
    :custom-face (symbol-overlay-default-face ((t (:inherit (region bold)))))
    :bind (("M-i" . symbol-overlay-put)
           ("M-n" . symbol-overlay-jump-next)
           ("M-p" . symbol-overlay-jump-prev)
           ("M-N" . symbol-overlay-switch-forward)
           ("M-P" . symbol-overlay-switch-backward)
           ("M-C" . symbol-overlay-remove-all)
           ([M-f3] . symbol-overlay-remove-all))
    :hook (((prog-mode yaml-mode) . symbol-overlay-mode)
           (iedit-mode            . turn-off-symbol-overlay)
           (iedit-mode-end        . turn-on-symbol-overlay))
    :init (setq symbol-overlay-idle-time 0.1)
    :config
    ;; Disable symbol highlighting while selecting
    (defun turn-off-symbol-overlay (&rest _)
      "Turn off symbol highlighting."
      (interactive)
      (symbol-overlay-mode -1))
    (advice-add #'set-mark :after #'turn-off-symbol-overlay)

    (defun turn-on-symbol-overlay (&rest _)
      "Turn on symbol highlighting."
      (interactive)
      (when (derived-mode-p 'prog-mode 'yaml-mode)
        (symbol-overlay-mode 1)))
    (advice-add #'deactivate-mark :after #'turn-on-symbol-overlay))
#+end_src

** smart input source (not working perfect)
Sis (smart input source) enables less manual switch for native or OS
input source (input method)
#+begin_src emacs-lisp
  (use-package sis
    ;; :hook
    ;; enable the /context/ and /inline region/ mode for specific buffers
    ;; (((text-mode prog-mode) . sis-context-mode)
    ;;  ((text-mode prog-mode) . sis-inline-mode))

    :config
    ;; For MacOS
    ;; (sis-ism-lazyman-config
    ;;  ;; English input source may be: "ABC", "US" or another one.
    ;;  ;; "com.apple.keylayout.ABC"
    ;;  "com.apple.keylayout.US"
    ;;  ;; Other language input source: "rime", "sogou" or another one.
    ;;  ;; "im.rime.inputmethod.Squirrel.Rime"
    ;;  "com.sogou.inputmethod.sogou.pinyin")

    (setq sis-other-cursor-color "yellow")
    (sis-ism-lazyman-config nil t 'w32)
    ;; enable the /cursor color/ mode
    (sis-global-cursor-color-mode t)
    ;; enable the /respect/ mode
    (sis-global-respect-mode t)
    ;; enable the /context/ mode for all buffers
    (sis-global-context-mode t)
    ;; enable the /inline english/ mode for all buffers
    (sis-global-inline-mode t)
    )
#+end_src

* backup snippets for future
:PROPERTIES:
:VISIBILITY: folded
:header-args: :tangle no
:header-args+: :results replace
:END:
** /some snippet may be useful/
#+BEGIN_SRC emacs-lisp
  ;; (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  ;; (load custom-file 'noerror 'nomessage)

  ;; (push (expand-file-name "lisp" user-emacs-directory) load-path)
  ;; (push (expand-file-name "elpa" user-emacs-directory) load-path)

#+END_SRC

** running time & gc time
#+begin_src emacs-lisp
  (defmacro k-time (&rest body)
    "Measure and return the time it takes evaluating BODY."
    `(let ((time (current-time)))
       ,@body
       (float-time (time-since time))))
#+end_src

#+begin_src emacs-lisp
  ;; When idle for 15sec run the GC no matter what.
  (defvar k-gc-timer
    (run-with-idle-timer 15 t
                         (lambda ()
                           (let ((inhibit-message t))
                             (message "Garbage Collector has run for %.06fsec"
                                      (k-time (garbage-collect)))))))
#+end_src

#+begin_src emacs-lisp
    ;;;;; Measure Time Macro
  ;; Useful macro to wrap functions in for testing
  ;; See https://stackoverflow.com/q/23622296
  (defmacro measure-time (&rest body)
    "Measure the time it takes to evaluate BODY."
    `(let ((time (current-time)))
       ,@body
       (message "*Elapsed time: %.06f*" (float-time (time-since time)))))
#+end_src

** if native-comp
;; See if native-comp is available
(when (not (and (fboundp 'native-comp-available-p)
(native-comp-available-p)))
(message "Native complation is *not* available"))

** package mirrors
#+begin_src emacs-lisp
  ;; Emacs Lisp Package Archive (ELPA)
  ;; @see https://github.com/melpa/melpa and https://elpa.emacs-china.org/.
  (defcustom centaur-package-archives-alist
    '((melpa    . (("gnu"    . "http://elpa.gnu.org/packages/")
                   ("nongnu" . "http://elpa.nongnu.org/nongnu/")
                   ("melpa"  . "http://melpa.org/packages/")))
      (emacs-cn . (("gnu"    . "http://1.15.88.122/gnu/")
                   ("nongnu" . "http://1.15.88.122/nongnu/")
                   ("melpa"  . "http://1.15.88.122/melpa/")))
      (bfsu     . (("gnu"    . "http://mirrors.bfsu.edu.cn/elpa/gnu/")
                   ("nongnu" . "http://mirrors.bfsu.edu.cn/elpa/nongnu/")
                   ("melpa"  . "http://mirrors.bfsu.edu.cn/elpa/melpa/")))
      (netease  . (("gnu"    . "http://mirrors.163.com/elpa/gnu/")
                   ("nongnu" . "http://mirrors.163.com/elpa/nongnu/")
                   ("melpa"  . "http://mirrors.163.com/elpa/melpa/")))
      (sjtu     . (("gnu"    . "http://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/gnu/")
                   ("nongnu" . "http://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/nongnu/")
                   ("melpa"  . "http://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/melpa/")))
      (tuna     . (("gnu"    . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                   ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                   ("melpa"  . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
      (ustc     . (("gnu"    . "http://mirrors.ustc.edu.cn/elpa/gnu/")
                   ("nongnu" . "http://mirrors.ustc.edu.cn/elpa/nongnu/")
                   ("melpa"  . "http://mirrors.ustc.edu.cn/elpa/melpa/"))))
    "A list of the package archives."
    :group 'centaur
    :type '(alist :key-type (symbol :tag "Archive group name")
                  :value-type (alist :key-type (string :tag "Archive name")
                                     :value-type (string :tag "URL or directory name"))))
#+end_src

** dired
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map
                (kbd "C-c C-x a")
                #'org-attach-dired-to-subtree)))
#+END_SRC

** OS specific settings
#+begin_src emacs-lisp
  ;; macOS specific settings
  (when (eq system-type 'darwin)
    (require 'prelude-macos))

  ;; Linux specific settings
  (when (eq system-type 'gnu/linux)
    (require 'prelude-linux))

  ;; WSL specific setting
  (when (and (eq system-type 'gnu/linux) (getenv "WSLENV"))
    (require 'prelude-wsl))

  ;; Windows specific settings
  (when (eq system-type 'windows-nt)
    (require 'prelude-windows))
#+end_src

#+begin_src emacs-lisp
  (unless sys/win32p
    (use-package daemons)                 ; system services/daemons
    (use-package tldr))
#+end_src

*** OS judgment
#+begin_src emacs-lisp
  (defconst sys/win32p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst sys/linuxp
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst sys/macp
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst sys/mac-x-p
    (and (display-graphic-p) sys/macp)
    "Are we running under X on a Mac system?")

  (defconst sys/mac-ns-p
    (eq window-system 'ns)
    "Are we running on a GNUstep or Macintosh Cocoa display?")

  (defconst sys/mac-cocoa-p
    (featurep 'cocoa)
    "Are we running with Cocoa on a Mac system?")

  (defconst sys/mac-port-p
    (eq window-system 'mac)
    "Are we running a macport build on a Mac system?")

  (defconst sys/linux-x-p
    (and (display-graphic-p) sys/linuxp)
    "Are we running under X on a GNU/Linux system?")

  (defconst sys/cygwinp
    (eq system-type 'cygwin)
    "Are we running on a Cygwin system?")

  (defconst sys/rootp
    (string-equal "root" (getenv "USER"))
    "Are you using ROOT user?")

  (defconst emacs/>=27p
    (>= emacs-major-version 27)
    "Emacs is 27 or above.")

  (defconst emacs/>=28p
    (>= emacs-major-version 28)
    "Emacs is 28 or above.")

  (defconst emacs/>=29p
    (>= emacs-major-version 29)
    "Emacs is 29 or above.")
#+end_src

#+begin_example emacs-lisp
(defun spacemacs/system-is-mac ()
  (eq system-type 'darwin))
(defun spacemacs/system-is-linux ()
  (eq system-type 'gnu/linux))
(defun spacemacs/system-is-mswindows ()
  (eq system-type 'windows-nt))

(defun spacemacs/window-system-is-mac ()
  ;; ns is returned instead of mac on Emacs 25+
  (memq (window-system) '(mac ns)))
#+end_example

*** macOS
(require 'exec-path-from-shell)
(exec-path-from-shell-initialize)

;; It's all in the Meta
(setq ns-function-modifier 'hyper)

(defun prelude-swap-meta-and-super ()
  "Swap the mapping of Meta and Super.
Very useful for people using their Mac with a
Windows external keyboard from time to time."
  (interactive)
  (if (eq mac-command-modifier 'super)
      (progn
        (setq mac-command-modifier 'meta)
        (setq mac-option-modifier 'super)
        (message "Command is now bound to META and Option is bound to SUPER."))
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta)
    (message "Command is now bound to SUPER and Option is bound to META.")))

(define-key prelude-mode-map (kbd "C-c w") 'prelude-swap-meta-and-super)

;; There's no point in hiding the menu bar on macOS, so let's not do it
(menu-bar-mode +1)

;; Enable emoji, and stop the UI from freezing when trying to display them.
(when (fboundp 'set-fontset-font)
  (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend))


(provide 'prelude-macos)
;;; prelude-macos.el ends here

*** linux

(require 'exec-path-from-shell)
(exec-path-from-shell-initialize)

(provide 'prelude-linux)
;;; prelude-linux.el ends here

*** windows

;; Teach Emacs how to interpret various modifier keys
(setq w32-pass-lwindow-to-system nil)
(setq w32-lwindow-modifier 'super) ; Left Windows key

(setq w32-pass-rwindow-to-system nil)
(setq w32-rwindow-modifier 'super) ; Right Windows key

(setq w32-pass-apps-to-system nil)
(setq w32-apps-modifier 'hyper) ; Menu/App key

;; Git setup (assuming you've installed Git for Windows)
(when (file-exists-p "C:/Program Files/Git/bin")
  (add-to-list 'exec-path "C:/Program Files/Git/bin")
  (add-to-list 'exec-path "C:/Program Files/Git/mingw64/bin")
  (setenv "PATH" (concat "C:/Program Files/Git/bin;" "C:/Program Files/Git/mingw64/bin;" (getenv "PATH"))))

;; needed for arc-mode (it allows you to open archives in Emacs)
(if (file-exists-p "C:/Program Files/7-Zip")
    (add-to-list 'exec-path "C:/Program Files/7-Zip")
  (message "7-Zip not found. It's a good idea to install it."))

(provide 'prelude-windows)
;;; prelude-windows.el ends here

*** wsl

;; teach Emacs how to open links with your default browser
(let ((cmd-exe "/mnt/c/Windows/System32/cmd.exe")
      (cmd-args '("/c" "start")))
  (when (file-exists-p cmd-exe)
    (setq browse-url-generic-program  cmd-exe
          browse-url-generic-args     cmd-args
          browse-url-browser-function 'browse-url-generic
          search-web-default-browser 'browse-url-generic)))

(provide 'prelude-wsl)
;;; prelude-wsl.el ends here

*** OS specific key changse
#+begin_src emacs-lisp
  (with-no-warnings
    ;; Key Modifiers
    (cond
     (sys/win32p
      ;; make PC keyboard's Win key or other to type Super or Hyper
      ;; (setq w32-pass-lwindow-to-system nil)
      (setq w32-lwindow-modifier 'super     ; Left Windows key
            w32-apps-modifier 'hyper)       ; Menu/App key
      (w32-register-hot-key [s-t]))
     (sys/mac-port-p
      ;; Compatible with Emacs Mac port
      (setq mac-option-modifier 'meta
            mac-command-modifier 'super)
      (bind-keys ([(super a)] . mark-whole-buffer)
                 ([(super c)] . kill-ring-save)
                 ([(super l)] . goto-line)
                 ([(super q)] . save-buffers-kill-emacs)
                 ([(super s)] . save-buffer)
                 ([(super v)] . yank)
                 ([(super w)] . delete-frame)
                 ([(super z)] . undo))))

    ;; Optimization
    (when sys/win32p
      (setq w32-get-true-file-attributes nil   ; decrease file IO workload
            w32-pipe-read-delay 0              ; faster IPC
            w32-pipe-buffer-size (* 64 1024))) ; read more at a time (was 4K)
    (unless sys/macp
      (setq command-line-ns-option-alist nil))
    (unless sys/linuxp
      (setq command-line-x-option-alist nil))

    ;; Increase how much is read from processes in a single chunk (default is 4kb)
    (setq read-process-output-max #x10000)  ; 64kb

    ;; Don't ping things that look like domain names.
    (setq ffap-machine-p-known 'reject))
#+end_src

** font settings
#+begin_src emacs-lisp
  (defun centaur-setup-fonts ()
    "Setup fonts."
    (when (display-graphic-p)
      ;; Set default font
      (cl-loop for font in '("Cascadia Code" "Fira Code" "Jetbrains Mono"
                             "SF Mono" "Hack" "Source Code Pro" "Menlo"
                             "Monaco" "DejaVu Sans Mono" "Consolas")
               when (font-installed-p font)
               return (set-face-attribute 'default nil
                                          :family font
                                          :height (cond (sys/macp 130)
                                                        (sys/win32p 110)
                                                        (t 100))))

      ;; Set mode-line font
      ;; (cl-loop for font in '("Menlo" "SF Pro Display" "Helvetica")
      ;;          when (font-installed-p font)
      ;;          return (progn
      ;;                   (set-face-attribute 'mode-line nil :family font :height 120)
      ;;                   (when (facep 'mode-line-active)
      ;;                     (set-face-attribute 'mode-line-active nil :family font :height 120))
      ;;                   (set-face-attribute 'mode-line-inactive nil :family font :height 120)))

      ;; Specify font for all unicode characters
      (cl-loop for font in '("Segoe UI Symbol" "Symbola" "Symbol")
               when (font-installed-p font)
               return (set-fontset-font t 'unicode font nil 'prepend))

      ;; Emoji
      (cl-loop for font in '("Noto Color Emoji" "Apple Color Emoji")
               when (font-installed-p font)
               return (if (>= emacs-major-version 28)
                          (set-fontset-font t 'emoji (font-spec :family font) nil 'prepend)
                        (set-fontset-font t 'symbol (font-spec :family font) nil 'prepend)))

      ;; Specify font for Chinese characters
      (cl-loop for font in '("WenQuanYi Micro Hei" "PingFang SC" "Microsoft Yahei" "STFangsong")
               when (font-installed-p font)
               return (progn
                        (setq face-font-rescale-alist `((,font . 1.3)))
                        (set-fontset-font t '(#x4e00 . #x9fff) (font-spec :family font))))))
#+end_src

#+begin_example emacs-lisp
;; window numbers (ding bang circled digits)
(set-fontset-font "fontset-default"
                  '(#x2776 . #x2793) fallback-spec nil 'prepend)
;; mode-line circled letters (circled latin capital/small letters)
(set-fontset-font "fontset-default"
                  '(#x24b6 . #x24e9) fallback-spec nil 'prepend)
;; mode-line additional characters (circled/squared mathematical operators)
(set-fontset-font "fontset-default"
                  '(#x2295 . #x22a1) fallback-spec nil 'prepend)
;; new version lighter (arrow block)
(set-fontset-font "fontset-default"
                  '(#x2190 . #x21ff) fallback-spec2 nil 'prepend)
#+end_example

** libraries
#+begin_src emacs-lisp
;; Asynchronous commands. Adds the ability to call asynchronous functions and
;; process with ease. See the documentation for `async-start' and
;; `async-start-process'.
(use-package async
  :straight t
  :defer
  :config
  (dired-async-mode 1)
  (setq dired-async--modeline-mode nil))
;; A modern list API for Emacs. No 'cl required.
(use-package dash     :straight t :defer 2)
;; String manipulation
(use-package s        :straight t :defer 2)
;; APIs for files & directories
(use-package f        :straight t :defer 2)
#+end_src

** switch to previous buffer
#+begin_src emacs-lisp
  (defun inn/switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
  (global-set-key (kbd "C-<tab>") #'inn/switch-to previous-buffer)
#+end_src

* /buffer functions & variables/
:PROPERTIES:
:VISIBILITY: folded
:header-args: :tangle no
:header-args+: :results replace
:END:
** get the full pathname of *THIS* org init file
When using :var header in code blocks, the tangled code doesn't just replace
text like a MACRO, but use a 'let()' block to set a variable, which is not
what we want.
So we use :noweb as below.

#+NAME: ORG-INIT-FILE
#+begin_src emacs-lisp
  (buffer-file-name)
#+end_src

#+RESULTS: ORG-INIT-FILE
: c:/Users/inner/pyprojs/autohotkey_scripts/emacs-init.org
** named kbd macros
Open project file at point.
#+begin_src emacs-lisp
  (fset 'open-project-file
   (kmacro-lambda-form [?\C-x ?4 ?4 ?\C-x ?p ?f ?\M-n return] 0 "%d"))
#+end_src

** confirm the branch-tags for tangling
A branch-tag is a set of TODO-tags indicating certain code blocks
while tangling. This code keeps the tags from disappearing when using
S-<left> or S-<right> to switch code branches.

#+NAME: confirm-branch
#+begin_src emacs-lisp
    (let ((branch-tags nil)
      (tags nil)
      (return nil))
      (defun confirm-branch-tags (new-mark old-mark)
        (setq branch-tags '(("VERBOSE-ON" . "VERBOSE-OFF")
                            ("BASIC" . "SUPER")
                            ("TAB-INSERT" . "TAB-SELECT")))
        (while (and (setq tags (car branch-tags))
                    (not (setq return
                               (cond ((string= old-mark (car tags)) (cdr tags))
                                     ((string= old-mark (cdr tags)) (car tags))))))
          (setq branch-tags (cdr branch-tags)))
        return)

      (add-hook 'org-todo-get-default-hook 'confirm-branch-tags nil t))
#+end_src

#+RESULTS: confirm-branch
| confirm-branch-tags | t |

** /buffer local variables (must be the last)/
# Local Variables:
# org-closed-keep-when-no-todo: t
# org-num-skip-unnumbered: t
# tangle-dir: "C:\\Users\\inner\\emacs.init\\vanilla\\"
# org-confirm-babel-evaluate: nil
# org-todo-keyword-faces: (("TODO" . org-dispatcher-highlight))
# eval: (org-babel-ref-resolve "confirm-branch")
# end:
