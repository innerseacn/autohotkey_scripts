#+STARTUP: overview num indent show2levels
#+TODO: TODO(t) DONE
#+TODO: VERBOSE-ON VERBOSE-OFF | 

*DO THIS FIRST*: Setting the tangle target directory at [[*buffer local variables (must be the last)][here]].

If there's a special tag on the heading. Type S-<left><right> to
switch code branches.

Type C-c C-v t to tangle emacs init files.

* early-init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!

#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC

* init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!

#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC

** build-in settings
Using custom-set-variables mechanism.

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(auto-save-default nil)
   '(abbrev-suggest t)
   '(column-number-mode t)
   '(completion-cycle-threshold 5)
   '(cua-enable-cua-keys nil)
   '(cua-enable-modeline-indications t)
   '(default-frame-alist
      '((horizontal-scroll-bars)
        (vertical-scroll-bars)
        (fullscreen . fullboth)))
   '(delete-selection-mode t)
   '(describe-bindings-outline t)
   '(display-battery-mode t)
   '(display-time-24hr-format t)
   '(display-time-day-and-date t)
   '(display-time-format "%R %p %F")
   '(display-time-mode t)
   '(electric-pair-mode t)
   ;; '(electric-quote-mode t)
   '(global-auto-revert-mode t)
   '(global-auto-revert-non-file-buffers t)
   '(global-goto-address-mode t)
   '(global-hl-line-mode t)
   '(help-enable-symbol-autoload t)
   '(history-length 25)
   '(horizontal-scroll-bar-mode nil)
   '(inhibit-startup-screen t)
   '(isearch-allow-motion t)
   '(kill-buffer-delete-auto-save-files t)
   '(line-number-mode t)
   '(make-backup-files nil)
   '(menu-bar-mode nil)
   '(mode-line-compact 'long)
   '(mouse-wheel-progressive-speed nil)
   '(next-error-message-highlight 'keep)
   '(read-quoted-char-radix 16)
   '(recentf-mode t)
   '(repeat-mode t)
   '(ring-bell-function 'ignore)
   '(save-place-mode t)
   '(savehist-mode t)
   '(scroll-bar-mode nil)
   '(scroll-margin 3)
   '(scroll-step 1)
   '(set-mark-command-repeat-pop t)
   '(shift-select-mode 'permanent)
   '(show-trailing-whitespace t)
   '(size-indication-mode t)
   '(split-width-threshold 120)
   '(tab-bar-new-tab-choice 'bookmark-bmenu-get-buffer)
   '(tool-bar-mode nil)
   '(use-dialog-box nil)
   '(use-short-answers t)
   '(visible-bell t)
   '(what-cursor-show-names t)
   '(winner-mode t)
   '(x-stretch-cursor t))
#+END_SRC

*** TODO modeline显示frame名称，或在minibuffer中显示

*** TODO 测试eldoc-documentation-strategy设置的最佳方法，或使用其他方式（如lsp-mode）

*** TODO 尝试使用etags-xref-prefer-current-file选项

*** TODO 将上面的mode相关命令用usepackage重构，实现懒加载

** face settings
*** build-in face settings
Using custom-set-faces mechanism.

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(trailing-whitespace ((t (:background "gray0")))))
#+END_SRC

*** default & CJK font face settings
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono NF 12")
  (if (display-graphic-p)
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font) charset
                          (font-spec :family "Sarasa Term SC" :size 24))))
#+END_SRC
  
** key bindings
*** build-in function key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key (kbd "C-M-<backspace>") 'backward-kill-sexp)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c C-'") 'org-edit-special)
  (global-set-key (kbd "C-x f") 'recentf-open-files)
  (global-set-key (kbd "C-x C-/") 'winner-undo)
  (global-set-key (kbd "C-x C-?") 'winner-redo)
  (global-set-key (kbd "<f5>") 'desktop-save)
  (global-set-key (kbd "<f6>") 'desktop-read)
  ;; (global-set-key (kbd "C-x C-1") 'delete-windows-on)
  (global-set-key (kbd "C-x C-q") 'view-mode)
  (global-set-key (kbd "C-x C-d") 'dired)
  (global-set-key (kbd "C-h C-k") 'describe-keymap)
  (global-set-key (kbd "C-c h") 'org-hide-entry)
#+END_SRC
*** TODO 模式键绑定到相应的模式map

*** custom function & key bindings
using :noweb to call ORG-INIT-FILE library.
    
#+BEGIN_SRC emacs-lisp :noweb yes
  (defun open-org-init-file()
    (interactive)
    (find-file "<<ORG-INIT-FILE()>>"))
  (global-set-key (kbd "<f2>") 'open-org-init-file)
#+END_SRC

*** TODO windmove-mode keybindings (default, delete, display, swap)
default no bindings set, uncomment to apply.
need redesign to use direct keybinding as such functions are very slow.

**** COMMENT windmove-default-keybindings
S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src

**** COMMENT windmove-delete-default-keybindings
C-x S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-delete-default-keybindings)
#+end_src

**** COMMENT windmove-display-default-keybindings
M-S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-display-default-keybindings)
#+end_src

**** COMMENT windmove-swap-states-default-keybindings
S-s-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-swap-states-default-keybindings)
#+end_src

** package settings
*** COMMENT /some snippet may be useful/
#+BEGIN_SRC emacs-lisp
  ;; (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  ;; (load custom-file 'noerror 'nomessage)

  ;; (push (expand-file-name "lisp" user-emacs-directory) load-path)
  ;; (push (expand-file-name "elpa" user-emacs-directory) load-path)

#+END_SRC

*** TODO fix the load path stuff

*** package initialize & load-path
#+BEGIN_SRC emacs-lisp
  (let ((default-directory (expand-file-name "elpa" user-emacs-directory)))
    (normal-top-level-add-subdirs-to-load-path))

  (setq package-archives '(("gnu"   . "http://mirrors.bfsu.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.bfsu.edu.cn/elpa/melpa/")
                           ("Org" . "http://mirrors.bfsu.edu.cn/elpa/org/")
                           ("nongnu" . "http://mirrors.bfsu.edu.cn/elpa/nongnu/")))

  ;; (setq package-check-signature nil)
  (require 'package)
  (unless (bound-and-true-p package--initialized)
    (package-initialize))
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+END_SRC

*** VERBOSE-ON use-package
"VERBOSE-ON" and "VERBOSE-OFF" are special SEQ_TODOs for choosing
tangling code from the list of branches below. Use S-<left><right> on
headline to switch.

1) ~with error catch & verbose~::
   #+HEADER: :tangle (if (string= "VERBOSE-OFF" (org-get-todo-state)) "no" (concat tangle-dir (car (org-get-outline-path t t))))
   #+begin_src emacs-lisp
       (eval-and-compile
         ;; (add-to-list 'load-path "")
         (require 'use-package)
         (setq use-package-always-ensure t
               use-package-always-defer t
               use-package-verbose 'debug))
   #+end_src

2) ~quiet & fast~::
   #+HEADER: :tangle (if (string= "VERBOSE-ON" (org-get-todo-state)) "no" (concat tangle-dir (car (org-get-outline-path t t))))
   #+begin_src emacs-lisp
     (eval-when-compile
       ;; (add-to-list 'load-path "")
       (require 'use-package)
       (setq use-package-always-ensure t
             use-package-always-defer t
             use-package-expand-minimally t))
   #+end_src

*** COMMENT all the icons
*** COMMENT org
#+BEGIN_SRC emacs-lisp
  '(set-face-attribute 'org-table nil :font "Sarasa Term SC 12"))
  '(org-catch-invisible-edits 'smart)
  '(org-clock-idle-time 10)
  '(org-goto-auto-isearch nil)
  '(org-log-into-drawer t)
#+END_SRC
*** dired
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map
                (kbd "C-c C-x a")
                #'org-attach-dired-to-subtree)))
#+END_SRC

*** doom-themes
- doom-badger
- doom-gruvbox
- doom-material-dark
- doom-monokai-machine
- doom-monokai-octagon
- doom-monokai-spectrum
- doom-moonlight
- doom-nord
- doom-oceanic-next
- doom-old-hope
- doom-wilmersdorf
  #+BEGIN_SRC emacs-lisp
    (require 'doom-themes)
    (load-theme 'doom-badger t)
  #+END_SRC

*** consult
#+BEGIN_SRC emacs-lisp
  (require 'consult)
  (global-set-key (kbd "C-;") 'consult-line)
  (global-set-key (kbd "C-,") 'consult-imenu)
  (global-set-key (kbd "C-x C-b") 'consult-buffer)
#+END_SRC

*** doom-modeline
#+BEGIN_SRC emacs-lisp
  (require 'doom-modeline)
  (doom-modeline-mode t)
  ;; (doom-modeline-height 25)
  ;; (doom-modeline-hud t)
  ;; (doom-modeline-icon t)
  ;; (doom-modeline-modal-icon nil)
#+END_SRC
    
*** TODO minibuffer modeline or tab bar
*** company
#+BEGIN_SRC emacs-lisp
  (require 'company)
  (global-company-mode t)
  (setq company-minimum-prefix-length 2)
  (setq company-idle-delay 0)
#+END_SRC
    
*** vertico
#+BEGIN_SRC emacs-lisp
  (require 'vertico)
  (vertico-mode t)
#+END_SRC
    
*** orderless
#+BEGIN_SRC emacs-lisp
  (require 'orderless)
  (setq completion-styles '(orderless))
#+END_SRC
    
*** marginalia
#+BEGIN_SRC emacs-lisp
  (require 'marginalia)
  (marginalia-mode t)
#+END_SRC
    
*** embark
#+BEGIN_SRC emacs-lisp
  (require 'embark)
  (global-set-key (kbd "C-:") 'embark-act)
  (setq prefix-help-command 'embark-prefix-help-command)
#+END_SRC
    
*** wgrep
#+BEGIN_SRC emacs-lisp
  (require 'wgrep)
  (setq wgrep-auto-save-buffer t)
  (eval-after-load 'consult
    '(eval-after-load 'embark
       '(progn
          (require 'embark-consult)
          (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))))
  (define-key minibuffer-local-map (kbd "C-c C-e") 'embark-export-write)
  (eval-after-load 'consult
    (progn
      (setq
       consult-narrow-key "<"
       consult-line-numbers-widen t
       consult-async-min-input 2
       consult-async-refresh-delay  0.15
       consult-async-input-throttle 0.2
       consult-async-input-debounce 0.1)
      ))
#+END_SRC

*** TODO dictionary functions


* /buffer functions & variables/
:PROPERTIES:
:VISIBILITY: folded
:header-args: :tangle no
:header-args+: :results replace
:END:
** get the full pathname of *THIS* org init file
When using :var header in code blocks, the tangled code doesn't just replace
text like a MACRO, but use a 'let()' block to set a variable, which is not
what we want.
So we use :noweb as below.

#+NAME: ORG-INIT-FILE
#+begin_src emacs-lisp
  (buffer-file-name)
#+end_src

#+RESULTS: ORG-INIT-FILE
: c:/Users/InnerSea/pyprojs/autohotkey_scripts/emacs-init.org

** confirm the branch-tags for tangling
A branch-tag is a set of TODO-tags indicating certain code blocks
while tangling. This code keeps the tags from disappearing when using
S-<left> or S-<right> to switch code branches.

#+NAME: confirm-branch
#+begin_src emacs-lisp
  (let ((branch-tags nil)
    (tags nil)
    (return nil))
    (defun confirm-branch-tags (new-mark old-mark)
      (setq branch-tags '(("VERBOSE-ON" . "VERBOSE-OFF")
                          ("1" . "2")))
      (while (and (setq tags (car branch-tags))
                  (not (setq return
                             (cond ((string= old-mark (car tags)) (cdr tags))
                                   ((string= old-mark (cdr tags)) (car tags))))))
        (setq branch-tags (cdr branch-tags)))
      return)

    (add-hook 'org-todo-get-default-hook 'confirm-branch-tags nil t))
#+end_src

#+RESULTS: confirm-branch
| confirm-branch-tags | t |

** /buffer local variables (must be the last)/
# Local Variables:
# tangle-dir: "C:\\Users\\InnerSea\\emacs.init\\vanilla\\"
# org-confirm-babel-evaluate: nil
# org-todo-keyword-faces: '(("TODO" . org-warning))
# eval: (org-babel-ref-resolve "confirm-branch")
# end:
