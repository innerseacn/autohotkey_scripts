#+STARTUP: overview num indent show2levels
#+TODO: TODO(t) DONE
#+TODO: VERBOSE-ON VERBOSE-OFF |
#+TODO: BASIC SUPER |
#+TODO: TAB-INSERT TAB-SELECT |

* *READ THIS FIRST*
:PROPERTIES:
:UNNUMBERED: t
:END:

1. *DO THIS FIRST*: Setting the tangle target directory at [[*buffer local variables (must be the last)][here]].

2. Type M-x all-the-icons-install-fonts RET and follow the instructions
   to get a better UI looking.

3. This init file uses =JetBrainsMono NF= & =Sarasa Term SC= fonts,
   install them first.

4. If there's a special tag on the heading. Type S-<left><right> to
   switch code branches.

5. Type C-c C-v t to tangle emacs init files.

6. There are special SEQ_TODOs for choosing tangling code from the list
   of branches under 1) 2) etc+. Use S-<left><right> on headline to switch.
   

* early-init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!
#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC

** GC stuff [from tenon emacs]
For speed up the startup, please do NOT forget reset it to default
after Emacs after-init-hook, or it may cause freezes.
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
#+end_src

** [from tenon emacs]
#+begin_src emacs-lisp
  ;; Prevent unwanted runtime compilation for native-comp users
  (setq native-comp-deferred-compilation nil)

  ;; Package initialize occurs automatically, before `user-init-file' is loaded
  ;; but after `early-init-file'. If you want to handle package initialization,
  ;; you can prevent Emacs from doing it early by uncomment next line!
  (setq package-enable-at-startup nil)

  ;; Do not resize the frame at this early stage.
  (setq frame-inhibit-implied-resize t)

  ;; System default coding
  ;; (set-language-environment 'utf-8)
#+end_src

** [from rational emacs]
#+begin_src emacs-lisp
  ;; Remove some unneeded UI elements (the user can turn back on anything they wish)
  (setq inhibit-startup-message t
        default-frame-alist
        '((tool-bar-lines . 0)
          (menu-bar-lines . 0)
          (vertical-scroll-bars)
          (horizontal-scroll-bars)
          (fullscreen . fullboth)))

  ;; Loads a nice blue theme, avoids the white screen flash on startup.
  ;; (load-theme 'modus-vivendi t)
  #+end_src

** [from lambda emacs]
#+begin_src emacs-lisp
    ;;;; Variable Binding Depth
  ;; This variable controls the number of lisp bindings that can exists at a time.
  ;; We should make it fairly large for modern machines.
  ;; https://www.reddit.com/r/emacs/comments/9jp9zt/anyone_know_what_variable_binding_depth_exceeds/
  (customize-set-variable 'max-specpdl-size 13000)
#+end_src

* init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!
#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC

** /profile startup (should be commented out when stable)/
Profile emacs startup
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs loaded in %s."
                       (emacs-init-time))))
#+end_src

** COMMENT native compile
#+begin_src emacs-lisp
  (when (and (>= emacs-major-version 28)
             (fboundp 'native-comp-available-p)
             (native-comp-available-p))
    (setq native-comp-async-report-warnings-errors nil)
    (setq package-native-compile t)
    (add-to-list 'native-comp-eln-load-path
                 (expand-file-name "eln-cache" user-emacs-directory)))
#+end_src

** COMMENT run server
Allow access from EMACSCLIENT_TRAMP
#+begin_src emacs-lisp
  (add-hook 'after-init-hook
            (lambda () (server-mode)))
#+end_src

** w32 settings
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (setq w32-get-true-file-attributes nil   ; decrease file IO workload
          w32-pipe-read-delay 0              ; faster IPC
          w32-pipe-buffer-size (* 64 1024)))
#+end_src

** encoding
#+begin_src emacs-lisp
  ;; UTF-8 as the default coding system
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  ;; Explicitly set the prefered coding systems to avoid annoying prompt
  ;; from emacs (especially on Microsoft Windows)
  (set-language-environment 'chinese-gbk)
  (prefer-coding-system 'utf-8-auto)
#+end_src

** built-in settings
*** custom-set-variables
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(auto-window-vscroll nil)
   '(abbrev-suggest t)
   '(bidi-paragraph-direction 'left-to-right)
   '(completion-cycle-threshold 3)
   '(create-lockfiles nil)
   '(describe-bindings-outline t)
   ;; '(delete-by-moving-to-trash t)
   '(dired-dwim-target t)
   ;; '(dired-guess-shell-alist-user
   ;;   '(("\\.pdf\\'" "open")
   ;;     ("\\.docx\\'" "open")
   ;;     ("\\.\\(?:djvu\\|eps\\)\\'" "open")
   ;;     ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" "open")
   ;;     ("\\.\\(?:xcf\\)\\'" "open")
   ;;     ("\\.csv\\'" "open")
   ;;     ("\\.tex\\'" "open")
   ;;     ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|ogv\\)\\(?:\\.part\\)?\\'"
   ;;      "open")
   ;;     ("\\.\\(?:mp3\\|flac\\)\\'" "open")
   ;;     ("\\.html?\\'" "open")
   ;;     ("\\.md\\'" "open")))
   '(dired-listing-switches "-alh")
   '(dired-recursive-copies 'always)
   '(dired-recursive-deletes 'always)
   '(ffap-machine-p-known 'reject)
   '(find-file-visit-truename t)
   '(help-enable-symbol-autoload t)
   '(help-window-select t)
   '(indicate-buffer-boundaries 'left)
   '(isearch-allow-motion t)
   '(isearch-lazy-count t)
   ;; '(isearch-yank-on-move 'shift)
   '(kill-do-not-save-duplicates t)
   ;; '(mode-line-compact 'long)
   '(mouse-autoselect-window t)
   '(mouse-wheel-progressive-speed nil)
   '(next-error-message-highlight 'keep)
   '(read-process-output-max (* 64 1024))
   '(read-quoted-char-radix 16)
   '(ring-bell-function 'ignore)
   '(scroll-margin 3)
   '(scroll-conservatively 101)
   ;; '(sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
   '(set-mark-command-repeat-pop t)
   '(shift-select-mode 'permanent)
   '(show-trailing-whitespace t)
   '(split-width-threshold 120)
   '(tab-bar-new-tab-choice 'bookmark-bmenu-get-buffer)
   '(use-dialog-box nil)
   '(use-short-answers t)
   '(visible-bell t)
   '(wdired-allow-to-change-permissions t)
   '(what-cursor-show-names t)
   '(x-stretch-cursor t)
   '(y-or-n-p-use-read-key t))
     #+END_SRC
*** make parent directory
#+begin_src emacs-lisp
  (defun inn/make-parent-directory ()
    "Make sure the directory of `buffer-file-name' exists."
    (make-directory (file-name-directory buffer-file-name) t))

  (add-hook 'find-file-not-found-functions #'inn/make-parent-directory)
#+end_src
*** TODO modeline显示frame名称，或在minibuffer中显示

*** TODO 测试eldoc-documentation-strategy设置的最佳方法，或使用其他方式（如lsp-mode）

*** TODO 尝试使用etags-xref-prefer-current-file选项

*** TODO some settings
ediff-split-window-function 'split-window-horizontally
ediff-window-setup-function 'ediff-setup-windows-plain

*** TODO eww settings (engines for example)

** face settings
*** built-in face settings
Using custom-set-faces mechanism. Look nice in doom-badger theme.
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(highlight ((t (:background "SteelBlue4" :foreground "snow"))))
   '(trailing-whitespace ((t (:background "gray0")))))
#+END_SRC

*** default & CJK font face settings
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono NF 12")
  (if (display-graphic-p)
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font) charset
                          (font-spec :family "Sarasa Term SC" :size 24))))
#+END_SRC
  
** key bindings
*** built-in function key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") #'kill-current-buffer)
  (global-set-key (kbd "C-M-<backspace>") #'backward-kill-sexp)
  (global-set-key (kbd "<f5>") #'desktop-save)
  (global-set-key (kbd "<f6>") #'desktop-read)
  ;; (global-set-key (kbd "C-x C-1") #'delete-windows-on)
  (global-set-key (kbd "C-x C-d") #'dired)
  (global-set-key (kbd "C-h C-k") #'describe-keymap)
  (global-set-key (kbd "M-o") #'other-window)
  (global-set-key (kbd "M-F") #'forward-to-word)
  (global-set-key (kbd "M-B") #'backward-to-word)
  (global-set-key (kbd "C-x v p") #'vc-push)
  (global-set-key (kbd "C-h K") #'describe-keymap)
  (global-set-key (kbd "M-Z") #'zap-to-char)
  (global-set-key (kbd "M-z") #'zap-up-to-char)
  (global-set-key (kbd "M-s M-f") #'project-find-file)
  (global-set-key (kbd "C-x C-f") #'find-file)
  (global-set-key (kbd "M-s f") #'find-lisp-find-dired)
  (global-set-key (kbd "C-'") #'goto-last-change)
  (global-set-key (kbd "C-\"") #'goto-last-change-reverse)
  (global-set-key [remap just-one-space] #'cycle-spacing)
  (global-set-key (kbd "C-`") #'previous-buffer)
  (global-set-key (kbd "C-<tab>") #'next-buffer)
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-c") 'capitalize-dwim)

  (defalias 'list-buffers 'ibuffer)
#+END_SRC

*** open org init file
using :noweb to call ORG-INIT-FILE library.
#+BEGIN_SRC emacs-lisp :noweb yes
  (defun inn/open-org-init-file()
    (interactive)
    (find-file "<<ORG-INIT-FILE()>>"))
  (global-set-key (kbd "M-<f2>") 'inn/open-org-init-file)
#+END_SRC

*** echo date time & battery status
#+begin_src emacs-lisp
  (defun inn/echo-time-battery()
    (interactive)
    (setq battery-string
          (let* ((data (and battery-status-function
                            (functionp battery-status-function)
                            (funcall battery-status-function)))
                 (state (or (cdr (assoc 66 data)) "ERR"))
                 (percentage (car (read-from-string (or (cdr (assq 112 data)) "ERR"))))
                 (valid-percentage? (and (numberp percentage)
                                         (>= percentage 0)
                                         (<= percentage 100)))
                 (icon (if valid-percentage? state "error"))
                 (text (if valid-percentage? (format "%d%%%%" percentage) "")))
            (concat " " text " battery-" icon)))
    (setq time-string
          (propertize (format-time-string "[%F %R]")
                      'face 'custom-state))
    (message (concat time-string battery-string)))
  (global-set-key (kbd "C-M-<f22>") 'inn/echo-time-battery)
#+end_src

*** open newline like vim
#+begin_src emacs-lisp
  (defun inn/newline-blow-point ()
    (interactive)
    (move-end-of-line 1)
    (newline-and-indent))
  (defun inn/newline-above-point ()
    (interactive)
    (move-beginning-of-line 1)
    (open-line 1))
  (global-set-key (kbd "C-S-o") #'inn/newline-blow-point)
  (global-set-key (kbd "C-o") #'inn/newline-above-point)
#+end_src

*** kill back to indentation
#+begin_src emacs-lisp
  (defun inn/kill-back-to-indentation ()
    "Kill from point back to the first non-whitespace character on the line."
    (interactive)
    (let ((prev-pos (point)))
      (back-to-indentation)
      (kill-region (point) prev-pos)))
  (global-set-key (kbd "C-S-k") #'inn/kill-back-to-indentation)
#+end_src

*** TODO COMMENT narrow or widen dwim
找不到bind-key*，真的需要这个功能吗？
From lambda-emacs.
#+begin_src emacs-lisp
  (defun inn/narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
    Dwim means: region, org-src-block, org-subtree, markdown
    subtree, or defun, whichever applies first. Narrowing to
    org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer
    is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          (t (narrow-to-defun))))

  ;;bind this in the narrow keymap
  (require 'bind-key)
  (bind-key* "C-x n n" #'inn/narrow-or-widen-dwim narrow-map)
#+end_src

*** COMMENT isearch bindings
From purcel's.
#+begin_src emacs-lisp
  (defun inn/isearch-exit-other-end ()
    "Exit isearch, but at the other end of the search string.
  This is useful when followed by an immediate kill."
    (interactive)
    (isearch-exit)
    (goto-char isearch-other-end))

  (define-key isearch-mode-map (kbd "C-<return>" 'inn/isearch-exit-other-end)
#+end_src

*** TODO COMMENT web search region
考虑加入embark菜单
#+begin_src emacs-lisp
  (defun prelude-search (query-url prompt)
    "Open the search url constructed with the QUERY-URL.
  PROMPT sets the `read-string prompt."
    (browse-url
     (concat query-url
             (url-hexify-string
              (if mark-active
                  (buffer-substring (region-beginning) (region-end))
                (read-string prompt))))))

  (defmacro prelude-install-search-engine (search-engine-name search-engine-url search-engine-prompt)
    "Given some information regarding a search engine, install the interactive command to search through them"
    `(defun ,(intern (format "prelude-%s" search-engine-name)) ()
       ,(format "Search %s with a query or region if any." search-engine-name)
       (interactive)
       (prelude-search ,search-engine-url ,search-engine-prompt)))

  (prelude-install-search-engine "google"     "http://www.google.com/search?q="              "Google: ")
  (prelude-install-search-engine "youtube"    "http://www.youtube.com/results?search_query=" "Search YouTube: ")
  (prelude-install-search-engine "github"     "https://github.com/search?q="                 "Search GitHub: ")
  (prelude-install-search-engine "duckduckgo" "https://duckduckgo.com/?t=lm&q="              "Search DuckDuckGo: ")
#+end_src

** package settings
*** package initialize & load-path
#+BEGIN_SRC emacs-lisp
  (let ((default-directory (expand-file-name "elpa" user-emacs-directory)))
    (normal-top-level-add-subdirs-to-load-path))

  (setq package-archives '(("gnu"   . "http://mirrors.bfsu.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.bfsu.edu.cn/elpa/melpa/")
                           ("Org" . "http://mirrors.bfsu.edu.cn/elpa/org/")
                           ("nongnu" . "http://mirrors.bfsu.edu.cn/elpa/nongnu/")))

  (setq package-check-signature nil)
  (require 'package)
  (unless (bound-and-true-p package--initialized)
    (package-initialize))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

*** VERBOSE-OFF use-package
1) ~verbose-on with error catch & verbose~::
   #+HEADER: :tangle (if (string= "VERBOSE-ON" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (eval-and-compile
       ;; (add-to-list 'load-path "")
       (require 'use-package)
       (setq use-package-always-ensure t
             use-package-always-defer t
             use-package-minimum-reported-time 0
             use-package-enable-imenu-support t
             use-package-verbose 'debug))
   #+end_src

2) ~verbose-off quiet & fast~::
   #+HEADER: :tangle (if (string= "VERBOSE-OFF" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (eval-when-compile
       ;; (add-to-list 'load-path "")
       (require 'use-package)
       (setq use-package-always-ensure t
             use-package-always-defer t
             use-package-expand-minimally t))
   #+end_src
   
*** built-in packages
Don't forget to use ~:ensure nil~ code for built-in packages.
**** globally enabled modes
#+begin_src emacs-lisp
  ;; (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'after-init-hook 'column-number-mode)
  (add-hook 'after-init-hook 'delete-selection-mode)
  (add-hook 'after-init-hook 'display-battery-mode)
  (add-hook 'after-init-hook 'dired-async-mode)
  (add-hook 'after-init-hook 'electric-pair-mode)
  ;; (add-hook 'after-init-hook 'electric-quote-mode)
  ;; (add-hook 'after-init-hook 'global-display-line-numbers-mode)
  (add-hook 'after-init-hook 'global-goto-address-mode)
  (add-hook 'after-init-hook 'global-hl-line-mode)
  ;; (add-hook 'after-init-hook 'global-so-long-mode)
  (add-hook 'after-init-hook 'global-visual-line-mode)
  ;; (add-hook 'after-init-hook 'ibuffer-auto-mode)
  (add-hook 'after-init-hook 'line-number-mode)
  (add-hook 'after-init-hook 'save-place-mode)
  (add-hook 'after-init-hook 'size-indication-mode)
#+end_src

**** turn off blink-cursor
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src

**** time
#+begin_src emacs-lisp
  (setq display-time-string-forms
        '((propertize (format-time-string "[%F %R]")
                      'face 'dired-flagged)))
  (display-time-mode)
#+end_src

**** pixel scroll
#+begin_src emacs-lisp
  (use-package pixel-scroll
    :ensure nil
    :custom
    (pixel-scroll-precision-mode t)
    (pixel-scroll-precision-interpolate-page t)
    :config
    (pixel-scroll-mode 1))
#+end_src

**** COMMENT autorevert
#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (add-hook 'after-init-hook 'global-auto-revert-mode)
#+end_src

**** TODO (change to :custom after test) auto-save & backup
#+begin_src emacs-lisp
      ;;;; Backups / Auto-Save
  (use-package files
    :ensure nil
    :hook (after-init . auto-save-mode)
    :init
    ;; backups
    (setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups"))))
    ;; (let ((backup-dir (expand-file-name "backups" user-emacs-directory)))
    ;;   ;; Move backup file to `./backups'
    ;;   (setq backup-directory-alist `(("." . ,backup-dir)))
    ;;   ;; Makesure backup directory exist
    ;;   (when (not (file-exists-p backup-dir))
    ;;     (make-directory backup-dir t)))

    ;; auto save
    (setq auto-save-list-file-prefix
          (concat user-emacs-directory "auto-save-list/.saves-"))
    ;; (let ((auto-save-files-dir (concat user-emacs-directory "auto-save-files/")))
    ;;   (setq auto-save-file-name-transforms
    ;;         `((".*" ,auto-save-files-dir t)))
    ;;   (when (not (file-exists-p auto-save-files-dir))
    ;;     (make-directory auto-save-files-dir t)))
    ;; auto-save every file visiting buffer
    ;; see https://emacs.stackexchange.com/q/7729/11934
    (setq-default
     auto-save-default t
     ;; auto-save-timeout 30              ; number of seconds idle time before auto-save (default: 30)
     ;; auto-save-interval 300            ; number of keystrokes between auto-saves (default: 300)
     ;; auto-save-visited-mode t          ; auto save in place other than in auto-save files
     delete-auto-save-files t
     ;; kill-buffer-delete-auto-save-files t
     create-lockfiles nil)
    :config
    (setq
     ;; make-backup-files t               ; backup of a file the first time it is saved.
     ;; backup-by-copying t               ; don't clobber symlinks
     ;; version-control t                 ; version numbers for backup files
     delete-old-versions t             ; delete excess backup files silently
     kept-old-versions 0               ; oldest versions to keep when a new numbered backup is made
     kept-new-versions 3               ; newest versions to keep when a new numbered backup is made
     ;; vc-make-backup-files t            ; backup versioned files, which Emacs does not do by default
     )

    ;; put <full auto save function here>
    )
#+end_src

***** COMMENT full auto save function
#+begin_src emacs-lisp
  (defun lem-full-auto-save ()
    (interactive)
    (save-excursion
      (dolist (buf (buffer-list))
        (set-buffer buf)
        (if (and (buffer-file-name) (buffer-modified-p))
            (basic-save-buffer)))))

  (add-hook 'auto-save-hook 'lem-full-auto-save)

  ;; Save all buffers after idle time
  (run-with-idle-timer 5 t (lambda () (lem-full-auto-save)))
  ;; Save on exit from insert state
  ;; (add-hook 'meow-insert-exit-hook #'lem-full-auto-save)
#+end_src

***** TODO backup-walker

**** TODO (change to :custom after test) savehist
#+begin_src emacs-lisp
  ;;;; Save History
  (use-package savehist
    :ensure nil
    :hook (after-init . savehist-mode)
    :config
    ;; (setq savehist-save-minibuffer-history t)
    ;; (setq history-length 100)
    (put 'minibuffer-history 'history-length 50)
    ;; (put 'evil-ex-history 'history-length 50)
    (put 'kill-ring 'history-length 25))
#+end_src

**** TODO (change to :custom after test) desktop
#+begin_src emacs-lisp
  ;;;; Desktop
  (use-package desktop
    :ensure nil
    :init
    (setq desktop-dirname             (concat user-emacs-directory "desktops")
          ;; desktop-base-file-name      "emacs.desktop"
          ;; desktop-base-lock-name      "lock"
          desktop-path                (list desktop-dirname)
          ;; desktop-save                'ask-if-new
          ;; desktop-files-not-to-save   (concat "^$" ".*magit$")
          desktop-restore-eager 4
          ;; desktop-load-locked-desktop t
          )
    ;; (when (not (file-exists-p desktop-dirname))
    ;;   (make-directory desktop-dirname t))
    ;; (setq desktop-buffers-not-to-save
    ;;       (concat "\\("
    ;;               "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
    ;;               "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
    ;;               "\\)$"))
    ;; (desktop-save-mode 0)
    )
#+end_src

**** COMMENT time-stamp
#+begin_src emacs-lisp
  (use-package time-stamp
    :ensure nil
    :commands (time-stamp lem-time-stamp)
    :custom
    ;; (time-stamp-active t)          ; do enable time-stamps
    ;; (time-stamp-line-limit 10)     ; check first 10 buffer lines for Time-stamp:
    (time-stamp-format "Last modified on %Y-%02m%02d-%02H:%02M:%02S") ; date format
    :hook (before-save . time-stamp) ; update when saving
    :init
    (defun lem-time-stamp ()
      (interactive)
      (insert (concat  "Time-stamp: <"(format-time-string "%Y-%02m%02d-%02H:%02M:%02S")">"))))
#+end_src

**** COMMENT whitespace
#+begin_src emacs-lisp
  (setq whitespace-action
        '(report-on-bogus cleanup auto-cleanup))
  (whitespace-mode)
#+end_src

**** cua
#+begin_src emacs-lisp
  (use-package cua
    :ensure nil
    :custom
    (cua-enable-cua-keys nil)
    (cua-enable-modeline-indications t)
    :bind ("C-M-<return>" . cua-rectangle-mark-mode))
  #+end_src

**** recentf
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :bind ("C-x f" . recentf-open-files))
#+end_src

**** winner
#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :hook (after-init . winner-mode)
    :bind (("C-x C-/" . winner-undo)
           ("C-x C-?" . winner-redo)))
#+end_src

**** TODO COMMENT ibuffer
#+begin_src emacs-lisp
    ;;;; iBuffer
  ;; A better list of buffers
  (use-package ibuffer
    :ensure nil
    :commands (ibuffer)
    :custom
    (ibuffer-default-sorting-mode 'major-mode)
    (ibuffer-filter-group-name-face 'outline-1)
    (ibuffer-movement-cycle t)
    (ibuffer-old-time 12)
    (ibuffer-modified-char ?*)
    (ibuffer-read-only-char ?R)
    (ibuffer-marked-char ?➤)
    (ibuffer-locked-char ?L)
    (ibuffer-deletion-char ?🗙)
    (ibuffer-use-header-line nil)
    :config
    ;; Fix function for displaying groups
    (defun ibuffer-insert-filter-group (name display-name filter-string format bmarklist)
      (add-text-properties
       (point)
       (progn
         (insert display-name)
         (point))
       `(ibuffer-filter-group-name
         ,name
         font-lock-face ,ibuffer-filter-group-name-face
         keymap ,ibuffer-mode-filter-group-map
         mouse-face highlight
         help-echo ,(let ((echo '(if tooltip-mode
                                     "mouse-1: toggle marks in this group\nmouse-2: hide/show this filtering group"
                                   "mouse-1: toggle marks  mouse-2: hide/show")))
                      (if (> (length filter-string) 0)
                          `(concat ,filter-string
                                   (if tooltip-mode "\n" " ")
                                   ,echo)
                        echo))))
      (insert "\n")
      (when bmarklist
        (put-text-property
         (point)
         (progn
           (dolist (entry bmarklist)
             (ibuffer-insert-buffer-line (car entry) (cdr entry) format))
           (point))
         'ibuffer-filter-group
         name))))
#+end_src

**** TODO COMMENT reveal
#+begin_src emacs-lisp
  ;;;; Reveal Mode
  ;; Toggle uncloaking of invisible text near point, including folded org headlines (Reveal mode).
  (use-package reveal
    :ensure nil
    :defer 1
    :config
    (setq reveal-auto-hide nil)
    (global-reveal-mode))
#+end_src

*** system
**** gcmh
Garbage Collector Magic Hack
#+begin_src emacs-lisp
  (use-package gcmh
    :init
    (setq gcmh-idle-delay 5
          gcmh-high-cons-threshold #x1000000) ; 16MB
    (gcmh-mode 1))
#+end_src
**** restart-emacs
Provides a simple command to restart Emacs from within Emacs.
#+begin_src emacs-lisp
  ;; Versions of Emacs lower than 29 don't have a restart command, so add that.
  (use-package restart-emacs
    :when (version< emacs-version "29")
    :commands restart-emacs)
#+end_src

*** appearances
**** theme
After code is a list of good looking themes, use one of them.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :init
    (load-theme 'doom-badger t)
    (doom-themes-org-config))
#+END_SRC

***** COMMENT good doom-themes list
- doom-badger
- doom-gruvbox
- doom-material-dark
- doom-monokai-machine
- doom-monokai-octagon
- doom-monokai-spectrum
- doom-moonlight
- doom-nord
- doom-oceanic-next
- doom-old-hope
- doom-wilmersdorf

***** COMMENT doom-themes config example
#+BEGIN_EXAMPLE emacs-lisp
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_EXAMPLE

**** modeline
Modeline derived from DOOM emacs.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-hud t)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-gnus nil)
    (doom-modeline-irc nil)
    (doom-modeline-bar-width 6))
#+END_SRC

***** COMMENT doom-modeline config example
#+BEGIN_EXAMPLE emacs-lisp
  ;; If non-nil, cause imenu to see `doom-modeline' declarations.
  ;; This is done by adjusting `lisp-imenu-generic-expression' to
  ;; include support for finding `doom-modeline-def-*' forms.
  ;; Must be set before loading doom-modeline.
  (setq doom-modeline-support-imenu t)
  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 25)
  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 4)
  ;; Whether to use hud instead of default bar. It's only respected in GUI.
  (setq doom-modeline-hud nil)
  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be
  ;; displayed. It can be an integer or a float number. `nil' means no limit.
  (setq doom-modeline-window-width-limit 0.25)
  ;; How to detect the project root.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (setq doom-modeline-project-detection 'auto)
  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   auto => emacs/lisp/comint.el (in a project) or comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are experiencing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'auto)
  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))
  ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)
  ;; Whether display the colorful icon for `major-mode'.
  ;; It respects `all-the-icons-color-icons'.
  (setq doom-modeline-major-mode-color-icon t)
  ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)
  ;; Whether display the modification icon for the buffer.
  ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)
  ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
  (setq doom-modeline-unicode-fallback nil)
  ;; Whether display the buffer name.
  (setq doom-modeline-buffer-name t)
  ;; Whether display the minor modes in the mode-line.
  (setq doom-modeline-minor-modes nil)
  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)
  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  ;; Whether display the buffer encoding.
  (setq doom-modeline-buffer-encoding t)
  ;; Whether display the indentation information.
  (setq doom-modeline-indent-info nil)
  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)
  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)
  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)
  ;; Whether display the workspace name. Non-nil to display in the mode-line.
  (setq doom-modeline-workspace-name t)
  ;; Whether display the perspective name. Non-nil to display in the mode-line.
  (setq doom-modeline-persp-name t)
  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)
  ;; If non nil the perspective name is displayed alongside a folder icon.
  (setq doom-modeline-persp-icon t)
  ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
  (setq doom-modeline-lsp t)
  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (setq doom-modeline-github nil)
  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))
  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)
  ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
  (setq doom-modeline-mu4e nil)
  ;; also enable the start of mu4e-alert
  (mu4e-alert-enable-mode-line-display)
  ;; Whether display the gnus notifications.
  (setq doom-modeline-gnus t)
  ;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
  (setq doom-modeline-gnus-timer 2)
  ;; Wheter groups should be excludede when gnus automatically being updated.
  (setq doom-modeline-gnus-excluded-groups '("dummy.group"))
  ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
  (setq doom-modeline-irc t)
  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)
  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)
  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")
  ;; What to display as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")
  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
#+END_EXAMPLE

**** shell
***** shell-pop
Helps you to use shell easily on Emacs. Only one key action to work.
#+begin_src emacs-lisp
  (use-package shell-pop
    :bind ("<f2>" . shell-pop)
    :custom
    (shell-pop-shell-type '("eshell" "*eshell*" (lambda nil (eshell))))
    (shell-pop-window-position "full")
    (shell-pop-autocd-to-working-dir nil))
#+end_src

***** eshell & extensions
****** TODO COMMENT eshell
#+begin_src emacs-lisp
  ;;; Eshell
  ;; https://www.masteringemacs.org/article/complete-guide-mastering-eshell Eshell is
  ;; an elisp shell. It has its own configuration parameters, distinct from those of
  ;; shell or ansi-terminal.
  ;;;; Eshell Settings
  (use-package eshell
    :commands eshell
    :init
    (setq eshell-directory-name (concat lem-etc-dir "eshell/")
          eshell-history-file-name (concat lem-etc-dir "eshell/history")
          eshell-aliases-file (concat lem-etc-dir "eshell/alias")
          eshell-last-dir-ring-file-name (concat lem-etc-dir "eshell/lastdir")
          eshell-highlight-prompt nil
          eshell-buffer-shorthand t
          eshell-cmpl-ignore-case t
          eshell-cmpl-cycle-completions t
          eshell-destroy-buffer-when-process-dies t
          eshell-history-size 10000
          ;; auto truncate after 20k lines
          eshell-buffer-maximum-lines 20000
          eshell-hist-ignoredups t
          eshell-error-if-no-glob t
          eshell-glob-case-insensitive t
          eshell-scroll-to-bottom-on-input 'all
          eshell-scroll-to-bottom-on-output 'all
          eshell-list-files-after-cd t
          eshell-banner-message ""
          ;; eshell-banner-message (message "Emacs initialized in %.2fs \n\n" (float-time (time-subtract (current-time) my-start-time)))
          ;; eshell-banner-message "What would you like to do?\n\n"
          )
    ;; Visual commands
    (setq eshell-visual-commands '("ranger" "vi" "screen" "top" "less" "more" "lynx"
                                   "ncftp" "pine" "tin" "trn" "elm" "vim"
                                   "nmtui" "alsamixer" "htop" "el" "elinks"
                                   ))
    (setq eshell-visual-subcommands '(("git" "log" "diff" "show"))))

  (defun lem-setup-eshell ()
    (interactive)
    ;; turn off semantic-mode in eshell buffers
    (semantic-mode -1)
    ;; turn off hl-line-mode
    (hl-line-mode -1))

  ;;;; Eshell Evil Histgory Navigation
  ;; History browsing. Note keybindings need to be buffer local as per
  ;; https://github.com/noctuid/general.el/issues/80
  (add-hook 'eshell-mode-hook
            (lambda ()
              (bind-keys :map eshell-mode-map
                         ("<down>" . eshell-next-input)
                         ("<up>"   . eshell-previous-input)
                         ("C-k"    . eshell-next-input)
                         ("C-j"    . eshell-previous-input))))

  ;;;; Eshell Prompt
  ;; A nicer eshell prompt https://gist.github.com/ekaschalk/f0ac91c406ad99e53bb97752683811a5
  ;; with some useful discussion of how it was put together http://www.modernemacs.com/post/custom-eshell/
  ;; I've made just a few tiny modifications.

  (with-eval-after-load 'eshell
    (require 'dash)
    (require 's)

    (defmacro with-face (STR &rest PROPS)
      "Return STR propertized with PROPS."
      `(propertize ,STR 'face (list ,@PROPS)))

    (defmacro esh-section (NAME ICON FORM &rest PROPS)
      "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
      `(setq ,NAME
             (lambda () (when ,FORM
                          (-> ,ICON
                              (concat esh-section-delim ,FORM)
                              (with-face ,@PROPS))))))

    (defun esh-acc (acc x)
      "Accumulator for evaluating and concatenating esh-sections."
      (--if-let (funcall x)
          (if (s-blank? acc)
              it
            (concat acc esh-sep it))
        acc))

    (defun esh-prompt-func ()
      "Build `eshell-prompt-function'"
      (concat esh-header
              (-reduce-from 'esh-acc "" eshell-funcs)
              "\n"
              eshell-prompt-string))

    (esh-section esh-dir
                 "\xf07c"  ;  (faicon folder)
                 (abbreviate-file-name (eshell/pwd))
                 '(:foreground "#268bd2" :underline t))

    (esh-section esh-git
                 "\xe907"  ;  (git icon)
                 (with-eval-after-load 'magit
                   (magit-get-current-branch))
                 '(:foreground "#b58900"))

    (esh-section esh-python
                 "\xe928"  ;  (python icon)
                 (with-eval-after-load "virtualenvwrapper"
                   venv-current-name))

    (esh-section esh-clock
                 "\xf017"  ;  (clock icon)
                 (format-time-string "%H:%M" (current-time))
                 '(:foreground "forest green"))

    ;; Below I implement a "prompt number" section
    (setq esh-prompt-num 0)
    (add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
    (advice-add 'eshell-send-input :before
                (lambda (&rest args) (setq esh-prompt-num (cl-incf esh-prompt-num))))

    (esh-section esh-num
                 "\xf0c9"  ;  (list icon)
                 (number-to-string esh-prompt-num)
                 '(:foreground "brown"))

    ;; Separator between esh-sections
    (setq esh-sep " | ")  ; or "  "

    ;; Separator between an esh-section icon and form
    (setq esh-section-delim " ")

    ;; Eshell prompt header
    (setq esh-header "\n┌─")  ; or "\n "

    ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
    ;; your login, these can be the same.
    (setq eshell-prompt-regexp "^└─>> ") ;; note the '^' to get regex working right
    (setq eshell-prompt-string "└─>> ")

    ;; Choose which eshell-funcs to enable
    (setq eshell-funcs (list esh-dir esh-git esh-python esh-clock esh-num))

    ;; Enable the new eshell prompt
    (setq eshell-prompt-function 'esh-prompt-func))

  ;;;; Clear Eshell
  ;; Make eshell act like a standard unix terminal.
  (defun eshell-clear-buffer ()
    "Clear terminal"
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))

  (add-hook 'eshell-mode-hook
            #'(lambda()
                (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

  ;;;; Eshell Magit
  (defun eshell/magit ()
    "Function to open magit-status for the current directory"
    (interactive)
    (require 'magit)
    (magit-status-setup-buffer default-directory)
    nil)

  ;;;; Eshell Fringe Status
  ;; Show last status in fringe
  ;; https://github.com/ryuslash/eshell-fringe-status
  (use-package eshell-fringe-status
    :defer t
    :config
    (add-hook 'eshell-mode-hook 'eshell-fringe-status-mode))

  ;;;; Eshell Autosuggest
  ;; Fish-like history autosuggestions in eshell
  ;; https://github.com/dieggsy/esh-autosuggest/
  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode))

  ;;;; Open in iTerm
  (defun lem-open-dir-in-iterm ()
    "Open the current directory of the buffer in iTerm."
    (interactive)
    (let* ((iterm-app-path "/Applications/iTerm.app")
           (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/2.1.4/iTerm.app")
           (iterm-path (if (file-directory-p iterm-app-path)
                           iterm-app-path
                         iterm-brew-path)))
      (shell-command (concat "open -a " iterm-path " ."))))
  ;; (global-set-key (kbd "C-x t") 'open-dir-in-iterm)
#+end_src
****** COMMENT em-smart
#+begin_src emacs-lisp
  (use-package em-smart
    :ensure nil
    :hook (eshell-mode . eshell-smart-initialize)
    :custom
    ;; (eshell-review-quick-commands nil)
    ;; (eshell-smart-space-goes-to-end t)
    (eshell-where-to-jump 'after))
#+end_src

****** capf-autosuggest
Capf-autosuggest lets you preview the most recent matching history
element.
#+begin_src emacs-lisp
  (use-package capf-autosuggest
    :hook (eshell-mode . capf-autosuggest-mode))
#+end_src

****** COMMENT esh-help (need manpage)
This library adds the following help functions and support for Eshell:
- run-help function inspired by Zsh
- eldoc support
#+begin_src emacs-lisp
  (use-package esh-help
    :after eshell
    :demand
    :config (setup-esh-help-eldoc))
#+end_src

****** eshell-z
#+begin_src emacs-lisp
  (use-package eshell-z
    :after eshell
    :demand)
#+end_src

****** eshell-fringe-status
Quickly navigating to a specific parent directory in eshell.
#+begin_src emacs-lisp
  (use-package eshell-fringe-status
    :hook (eshell-mode . eshell-fringe-status-mode))
#+end_src

****** eshell-bookmark
Integrating eshell with bookmark.el.
#+begin_src emacs-lisp
  (use-package eshell-bookmark
    :hook (eshell-mode . eshell-bookmark-setup))
#+end_src

****** eshell-syntax-highlighting
Adds syntax highlighting to the Emacs Eshell.
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after eshell
    :demand
    :config
    ;; Enable in all Eshell buffers.
    (eshell-syntax-highlighting-global-mode))
#+end_src

****** COMMENT eshell-info-banner
A utility for creating an informative banner.
#+begin_src emacs-lisp
  (use-package eshell-info-banner
    :hook (eshell-banner-load . eshell-info-banner-update-banner))
#+end_src

****** COMMENT eshell-prompt-extras
#+begin_src emacs-lisp
  (use-package eshell-prompt-extras
    :after esh-opt
    :demand
    :custom
    (eshell-highlight-prompt nil)
    (eshell-prompt-function 'epe-theme-lambda))
#+end_src

****** TODO exec-path-from-shell (under linux or macos)

**** TODO COMMENT avy
#+begin_src emacs-lisp
#+end_src

**** TODO COMMENT popwin
#+begin_src emacs-lisp
  ;; popwin
  (use-package popwin
    :hook (after-init . popwin-mode))
#+end_src

(with-eval-after-load 'popwin
(progn
(push '(occur-mode :position right :width 100) popwin:special-display-config)
(push '(grep-mode :position right :width 100) popwin:special-display-config)
(push '(special-mode :position right :width 100) popwin:special-display-config)))

**** TODO anzu | visual-regexp

**** TODO font-lock+

**** TODO COMMENT dimmer
#+begin_src emacs-lisp
;;;; Dim inactive windows
(use-package dimmer
  :hook (after-init . dimmer-mode)
  :custom
  (dimmer-prevent-dimming-predicates '(window-minibuffer-p))
  (dimmer-fraction 0.5)
  (dimmer-adjustment-mode :foreground)
  (dimmer-use-colorspace :rgb)
  (dimmer-watch-frame-focus-events nil)
  :config
  (dimmer-configure-which-key)
  (dimmer-configure-hydra)
  (dimmer-configure-magit)
  (dimmer-configure-posframe)
  (dimmer-configure-vertico))

(defun dimmer-configure-vertico ()
  "Convenience settings for Dimmer & Vertico users."
  (with-no-warnings
    (add-to-list
     'dimmer-buffer-exclusion-regexps "^ \\*Vertico\\*$")))
#+end_src

**** TODO COMMENT svg-tag-mode
#+begin_src emacs-lisp
;;;; SVG Library (For Tags/Labels/etc.)
  ;;; SVG Tag Mode
(use-package svg-tag-mode
  :when (image-type-available-p 'svg)
  :straight (:type git :host github :repo "rougier/svg-tag-mode")
  :hook (prog-mode . svg-tag-mode)
  :config
  (setq svg-tag-tags
        '(;; Replaces any occurence of :XXX: with a dynamic SVG tag displaying XXX
          ("\\(:[A-Z]+:\\)" . ((lambda (tag)
                                 (svg-tag-make tag :face 'success :inverse t :beg 1 :end -1))))
          ;; other tags
          ("DONE:"  . ((lambda (tag) (svg-tag-make "DONE:"  :face 'fringe  :inverse t ))))
          ("FIXME:" . ((lambda (tag) (svg-tag-make "FIXME:" :face 'error :inverse t))))
          ("HACK:"  . ((lambda (tag) (svg-tag-make "HACK:"  :face 'warning :inverse t))))
          ("NOTE:"  . ((lambda (tag) (svg-tag-make "NOTE:"  :face 'warning :inverse t))))
          ("TODO:"  . ((lambda (tag) (svg-tag-make "TODO:"  :face 'warning :inverse t)))))))
#+end_src

**** TODO COMMENT hl-line+
#+begin_src emacs-lisp
;;;; Highlight
;;;;; Highlight Lines
;; Highlight lines. You can toggle this off
(use-package hl-line+
  :straight t
  :defer 1
  :hook
  ;; https://tech.toryanderson.com/2021/09/24/replacing-beacon.el-with-hl-line-flash/
  (window-scroll-functions . hl-line-flash)
  (focus-in . hl-line-flash)
  (post-command . hl-line-flash)
  :custom-face
  ;; subtle highlighting
  (hl-line ((t (:inherit highlight))))
  :custom
  (global-hl-line-mode nil)
  (hl-line-flash-show-period 0.5)
  ;; (hl-line-inhibit-highlighting-for-modes '(dired-mode))
  ;; (hl-line-overlay-priority -100) ;; sadly, seems not observed by diredfl
  (hl-line-when-idle-interval 5)
  :config
  (toggle-hl-line-when-idle 1 t))
#+end_src

**** TODO COMMENT lin
#+begin_src emacs-lisp
;;;;; LIN (Make HL Line Better)
(use-package lin
  :straight t
  :config
  (setq lin-mode-hooks
        '(dired-mode-hook
          elfeed-search-mode-hook
          git-rebase-mode-hook
          grep-mode-hook
          ibuffer-mode-hook
          ilist-mode-hook
          log-view-mode-hook
          magit-log-mode-hook
          mu4e-headers-mode
          occur-mode-hook
          org-agenda-mode-hook
          proced-mode-hook
          tabulated-list-mode-hook))
  (lin-global-mode 1))
#+end_src

**** TODO COMMENT highlight-numbers
#+begin_src emacs-lisp
;;;;; Highlight Numbers & TODOS
(use-package highlight-numbers
  :defer t
  :commands highlight-numbers-mode
  :init
  (add-hook 'prog-mode-hook #'highlight-numbers-mode))
#+end_src

**** TODO COMMENT hl-todo
#+begin_src emacs-lisp
(use-package hl-todo
  :defer t
  :commands hl-todo-mode
  :init
  ;; (add-hook 'org-mode-hook #'hl-todo-mode)
  (add-hook 'prog-mode-hook #'hl-todo-mode)
  (add-hook 'markdown-mode-hook #'hl-todo-mode))
#+end_src

**** TODO COMMENT goggles | pulse
Goggles highlights the modified region using pulse. Currently the
commands undo, yank, kill and delete are supported.
#+begin_src emacs-lisp
  (use-package goggles
    :hook ((prog-mode text-mode) . goggles-mode)
    :custom (goggles-pulse t)) ;; set to nil to disable pulsing
#+end_src

#+begin_src emacs-lisp
(use-package pulse
  :straight (:type built-in)
  :defer 1
  :bind
  ("C-<return>" . pulse-line)
  :commands (pulse-line pulse-momentary-highlight-one-line)
  :config
  (setq pulse-delay 0.08)
  (defun pulse-line (&rest _)
    "Pulse the current line."
    (interactive)
    (pulse-momentary-highlight-one-line (point)))
  ;; pulse for commands
  (dolist (command '(scroll-up-command scroll-down-command
                                       recenter-top-bottom other-window))
    (advice-add command :after #'pulse-line))
  ;; pulse on window change
  (push 'pulse-line window-selection-change-functions))
#+end_src

**** TODO COMMENT crosshairs
#+begin_src emacs-lisp
;;;;; Crosshair Highlighting
;; Highlight cursor vertically and horizontally
(use-package crosshairs
  :straight t
  :commands (crosshairs-highlight
             crosshairs-mode
             flash-crosshairs)
  :bind (:map lem+toggle-keys
         ("c" . crosshairs-mode))
  :custom-face
  (col-highlight ((t (:inherit hl-line))))
  :config
  ;; same colors for both hlines
  (setq col-highlight-vline-face-flag t))
#+end_src

**** TODO COMMENT pulsing-cursor
#+begin_src emacs-lisp
;;;; Pulsing Cursor
(use-package pulsing-cursor
  :straight (:type git :host github :repo "jasonjckn/pulsing-cursor")
  :defer 1
  :custom-face
  (pulsing-cursor-overlay-face1 ((t (:inherit match))))
  :custom
  (pulsing-cursor-delay 1.0)
  (pulsing-cursor-interval .5)
  (pulsing-cursor-blinks 5)
  :config (pulsing-cursor-mode +1))
#+end_src

*** minibuffer & complete
**** vertico
Vertico provides a performant and minimalistic vertical completion UI
based on the default completion system.
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :hook (after-init . vertico-mode))
#+END_SRC

***** COMMENT config example
#+begin_example emacs-lisp
;; Different scroll margin
(setq vertico-scroll-margin 0)

;; Show more candidates
(setq vertico-count 20)

;; Grow and shrink the Vertico minibuffer
(setq vertico-resize t)

;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
(setq vertico-cycle t)
#+end_example

**** vertico extensions
Comment out if you don't want the extension.
***** vertico-directory
Provides Ido-like navigation commands.
#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :ensure nil
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

***** vertico-indexed
Prefixes candidates with indices and allows you to select with prefix
arguments.

Use C-<number> RET to execute, C-<number> TAB to insert.

#+begin_src emacs-lisp
  (use-package vertico-indexed
    :after vertico
    :ensure nil
    :init (vertico-indexed-mode))
#+end_src

***** vertico-mouse
Adds mouse support.
#+begin_src emacs-lisp
  (use-package vertico-mouse
    :after vertico
    :ensure nil
    :init (vertico-mouse-mode))
#+end_src

***** vertico-multiform
This package is a Vertico extension for fine tuning the Vertico
display and other minibuffer modes per command or completion category.
#+begin_src emacs-lisp
  (use-package vertico-multiform
    :after vertico
    :ensure nil
    :init (vertico-multiform-mode)
    :bind (:map vertico-map
                ("M-G" . vertico-multiform-grid)))
#+end_src

***** COMMENT vertico-quick
Select using Avy-style quick keys.
#+begin_src emacs-lisp
  (use-package vertico-quick
    :after vertico
    :ensure nil
    :custom
    (vertico-quick1 "asdfg") ;Single level quick keys.
    (vertico-quick2 "jklh") ;Two level quick keys.
    :bind (:map vertico-map
                ("M-i" . vertico-quick-exit)
                ("C-M-i" . vertico-quick-insert)))
#+end_src

***** vertico-repeat
Enables repetition of Vertico sessions via the `vertico-repeat',
`vertico-repeat-last' and `vertico-repeat-select' commands.

It is necessary to register a minibuffer setup hook, which saves the
Vertico state for repetition.

In order to save the history across Emacs sessions, enable
`savehist-mode' and add `vertico-repeat-history' to
`savehist-additional-variables'.

#+begin_src emacs-lisp
  (use-package vertico-repeat
    :after vertico
    :ensure nil
    :bind ("M-R" . vertico-repeat)
    :hook (minibuffer-setup . vertico-repeat-save))
#+end_src

**** SUPER orderless
This package provides an orderless completion style that divides the
pattern into space-separated components, and matches candidates that
match all of the components in any order.

See document of =completion-styles-alist= for details.

1) ~basic config~::
   #+HEADER: :tangle (if (string= "BASIC" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (use-package orderless
       :after vertico
       :demand
       :config
       (orderless-define-completion-style +orderless-with-flex
         (orderless-matching-styles '(orderless-flex orderless-literal orderless-regexp)))
       :custom
       ;; (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp))
       (completion-styles '(orderless basic))
       (completion-category-defaults nil)
       (completion-category-overrides '((file (styles partial-completion initials flex))
                                        (command (styles +orderless-with-flex))
                                        (variable (styles +orderless-with-flex))
                                        (symbol (styles +orderless-with-flex))))
       ;; allow escaping space with backslash!
       (orderless-component-separator #'orderless-escapable-split-on-space))
   #+end_src

2) ~super config by minad~::
   #+HEADER: :tangle (if (string= "SUPER" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+BEGIN_SRC emacs-lisp
     (use-package orderless
       :after vertico
       :demand
       :config
       (defvar +orderless-dispatch-alist
         '((?% . char-fold-to-regexp)
           (?! . orderless-without-literal)
           (?`. orderless-initialism)
           (?= . orderless-literal)
           (?~ . orderless-flex)))

       ;; Recognizes the following patterns:
       ;; * ~flex flex~
       ;; * =literal literal=
       ;; * %char-fold char-fold%
       ;; * `initialism initialism`
       ;; * !without-literal without-literal!
       ;; * .ext (file extension)
       ;; * regexp$ (regexp matching at end)
       (defun +orderless-dispatch (pattern index _total)
         (cond
          ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
          ((string-suffix-p "$" pattern)
           `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
          ;; File extensions
          ((and
            ;; Completing filename or eshell
            (or minibuffer-completing-file-name
                (derived-mode-p 'eshell-mode))
            ;; File extension
            (string-match-p "\\`\\.." pattern))
           `(orderless-regexp . ,(concat "\\." (substring pattern 1) "[\x200000-\x300000]*$")))
          ;; Ignore single !
          ((string= "!" pattern) `(orderless-literal . ""))
          ;; Prefix and suffix
          ((if-let (x (assq (aref pattern 0) +orderless-dispatch-alist))
               (cons (cdr x) (substring pattern 1))
             (when-let (x (assq (aref pattern (1- (length pattern))) +orderless-dispatch-alist))
               (cons (cdr x) (substring pattern 0 -1)))))))

       ;; Define orderless style with flex by default
       (orderless-define-completion-style +orderless-with-flex
         (orderless-matching-styles '(orderless-flex orderless-literal orderless-regexp)))

       ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
       ;; There are many details to consider, but the following configurations all work well.
       ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
       ;; special styles for special completion categories, e.g., partial-completion for files.
       ;;
       ;; 1. (setq completion-styles '(orderless))
       ;; This configuration results in a very coherent completion experience,
       ;; since orderless is used always and exclusively. But it may not work
       ;; in all scenarios. Prefix expansion with TAB is not possible.
       ;;
       ;; 2. (setq completion-styles '(substring orderless))
       ;; By trying substring before orderless, TAB expansion is possible.
       ;; The downside is that you can observe the switch from substring to orderless
       ;; during completion, less coherent.
       ;;
       ;; 3. (setq completion-styles '(orderless basic))
       ;; Certain dynamic completion tables (completion-table-dynamic)
       ;; do not work properly with orderless. One can add basic as a fallback.
       ;; Basic will only be used when orderless fails, which happens only for
       ;; these special tables.
       ;;
       ;; 4. (setq completion-styles '(substring orderless basic))
       ;; Combine substring, orderless and basic.
       ;;
       (setq completion-styles '(orderless basic)
             completion-category-defaults nil
           ;;; Enable partial-completion for files.
           ;;; Either give orderless precedence or partial-completion.
           ;;; Note that completion-category-overrides is not really an override,
           ;;; but rather prepended to the default completion-styles.
             ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
             completion-category-overrides '((file (styles partial-completion initials flex)) ;; partial-completion is tried first
                                             ;; enable flex by default for symbols
                                             (command (styles +orderless-with-flex))
                                             (variable (styles +orderless-with-flex))
                                             (symbol (styles +orderless-with-flex)))
             orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
             orderless-style-dispatchers '(+orderless-dispatch)))
   #+END_SRC

***** Component matching styles
Each component of a pattern can match in any of several matching
styles. A matching style is simply a function from strings to strings
that maps a component to a regexp to match against, so it is easy to
define new matching styles. The predefined ones are:

- =orderless-regexp= the component is treated as a regexp that must
  match somewhere in the candidate.  This is simply the identity
  function!

- =orderless-literal= the component is treated as a literal string that
  must occur in the candidate.  This is just regexp-quote.

- =orderless-without-literal= the component is a treated as a literal
  string that must not occur in the candidate.  Note that nothing is
  highlighted for this matching style. You probably don’t want to use
  this style directly in orderless-matching-styles but with a style
  dispatcher instead. There is an example in the section on style
  dispatchers.

- =orderless-prefixes= the component is split at word endings and each
  piece must match at a word boundary in the candidate, occurring in
  that order.  This is similar to the built-in partial-completion
  completion-style. For example, re-re matches query-replace-regexp,
  recode-region and magit-remote-list-refs; f-d.t matches
  final-draft.txt.

- =orderless-initialism= each character of the component should appear
  as the beginning of a word in the candidate, in order.  This maps
  abc to \<a.*\<b.*\c.

- =orderless-strict-initialism= like initialism but only allow
  non-letters in between the matched words.  For example fb would
  match foo-bar but not foo-qux-bar.

- =orderless-strict-leading-initialism= like strict-initialism but
  require the first initial to match the candidate’s first word.  For
  example bb would match bar-baz but not foo-bar-baz.

- =orderless-strict-full-initialism= like strict-initialism but require
  the first initial to match the candidate’s first word and the last
  initial to be at the final word.  For example fbb would match
  foo-bar-baz but not foo-bar-baz-qux.

- =orderless-flex= the characters of the component should appear in that
  order in the candidate, but not necessarily consecutively.  This
  maps abc to a.*b.*c.

  The variable *orderless-matching-styles* can be set to a list of the
  desired matching styles to use. By default it enables the regexp and
  initialism styles.
  
**** marginalia
Marginalia can add annotations to be displayed with the completion
candidates.

There's no need to bind #'marginalia-cycle, not useful.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :hook (after-init . marginalia-mode))
#+END_SRC
    
**** TAB-SELECT corfu
1) ~Use <tab> to insert candidate and quit~::
   #+HEADER: :tangle (if (string= "TAB-INSERT" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (use-package corfu
       :custom
       (corfu-auto t)
       (corfu-cycle t)
       (corfu-auto-delay 0)
       (corfu-auto-prefix 2)
       (tab-always-indent 'complete)
       :custom-face
       (corfu-current ((t (:background "#22282c"))))
       :bind (:map corfu-map
                   ;; ("-" . corfu-insert-separator) ; Configure SPC for separator insertion
                   ([remap next-line] . nil)
                   ([remap previous-line] . nil)
                   ("\r" . nil))
       :hook (after-init . global-corfu-mode)
       :config
       (corfu-indexed-mode 1) ; for indexed csndidate selection
       (defun corfu-enable-in-minibuffer ()
         "Enable Corfu in the minibuffer if `completion-at-point' is bound."
         (when (where-is-internal #'completion-at-point (list (current-local-map)))
           ;; (setq-local corfu-auto nil) ; Enable/disable auto completion
           (corfu-mode 1)))
       (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))
   #+end_src

2) ~Use <tab> to select candidate and C-g to quit if necessary~::
   #+HEADER: :tangle (if (string= "TAB-SELECT" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (use-package corfu
       :custom
       (corfu-auto t)
       (corfu-cycle t)
       (corfu-preselect-first nil)
       (corfu-auto-delay 0)
       (corfu-auto-prefix 2)
       (tab-always-indent 'complete)
       :custom-face
       (corfu-current ((t (:background "#22282c"))))
       :bind (:map corfu-map
                   ;; ("-" . corfu-insert-separator) ; Configure SPC for separator insertion
                   ("<tab>" . corfu-next)
                   ("S-<tab>" . corfu-previous)
                   ([remap next-line] . nil)
                   ([remap previous-line] . nil)
                   ("\r" . nil))
       :hook (after-init . global-corfu-mode)
       :config
       ;; (corfu-indexed-mode 1) ; for indexed csndidate selection
       (defun corfu-enable-in-minibuffer ()
         "Enable Corfu in the minibuffer if `completion-at-point' is bound."
         (when (where-is-internal #'completion-at-point (list (current-local-map)))
           ;; (setq-local corfu-auto nil) ; Enable/disable auto completion
           (corfu-mode 1)))
       (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))
   #+end_src

***** COMMENT corfu example
#+begin_example emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
    #+end_example

**** TODO corfu-terminal

**** TODO COMMENT corfu-doc
#+begin_src emacs-lisp
;;;;; Corfu Doc
(use-package corfu-doc
  :straight (corfu-doc :type git :host github :repo "galeo/corfu-doc")
  :hook   (corfu-mode . corfu-doc-mode)
  :bind (:map corfu-map
         ("C-d" . corfu-doc-toggle)
         ;;        ;; This is a manual toggle for the documentation window.
         ;;        ([remap corfu-show-documentation] . corfu-doc-toggle) ; Remap the default doc command
         ;; Scroll in the documentation window
         ("M-k" . corfu-doc-scroll-up)
         ("M-j" . corfu-doc-scroll-down))
  :custom
  (corfu-doc-max-width 70)
  (corfu-doc-max-height 20))
#+end_src

**** cape
Cape provides a bunch of Completion At Point Extensions which can be
used in combination with my Corfu completion UI or the default
completion UI.
#+begin_src emacs-lisp
  (use-package cape
    ;; :bind (("M-p p" . completion-at-point) ;; capf
    ;;        ("M-p t" . complete-tag)        ;; etags
    ;;        ("M-p d" . cape-dabbrev)        ;; or dabbrev-completion
    ;;        ("M-p h" . cape-history)
    ;;        ("M-p f" . cape-file)
    ;;        ("M-p k" . cape-keyword)
    ;;        ("M-p s" . cape-symbol)
    ;;        ("M-p a" . cape-abbrev)
    ;;        ("M-p i" . cape-ispell)
    ;;        ("M-p l" . cape-line)
    ;;        ("M-p w" . cape-dict)
    ;;        ("M-p \\" . cape-tex)
    ;;        ("M-p &" . cape-sgml)
    ;;        ("M-p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions #'cape-tex)
    ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
    ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;; (add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
    ;; (add-to-list 'completion-at-point-functions #'cape-dict)
    ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
    ;; (add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src

***** cape examples
#+begin_example emacs-lisp
;; Use Company backends as Capfs.
(setq-local completion-at-point-functions
  (mapcar #'cape-company-to-capf
    (list #'company-files #'company-ispell #'company-dabbrev)))

(defvar emojis
  '((":-D" . "😀")
    (";-)" . "😉")
    (":-/" . "😕")
    (":-(" . "🙁")
    (":-*" . "😙")))

(defun emoji-backend (action &optional arg &rest _)
  (pcase action
    ('prefix (and (memq (char-before) '(?: ?\;))
                  (cons (string (char-before)) t)))
    ('candidates (all-completions arg emojis))
    ('annotation (concat " " (cdr (assoc arg emojis))))
    ('post-completion
     (let ((str (buffer-substring (- (point) 3) (point))))
       (delete-region (- (point) 3) (point))
     (insert (cdr (assoc str emojis)))))))

;; Register emoji backend with `completion-at-point'
(setq completion-at-point-functions
      (list (cape-company-to-capf #'emoji-backend)))

;; Register emoji backend with Company.
(setq company-backends '(emoji-backend))

;; Use the company-dabbrev and company-elisp backends together.
(setq completion-at-point-functions
      (list
       (cape-company-to-capf
        (apply-partially #'company--multi-backend-adapter
                         '(company-dabbrev company-elisp)))))

;; Merge the dabbrev, dict and keyword capfs, display candidates together.
(setq-local completion-at-point-functions
            (list (cape-super-capf #'cape-dabbrev #'cape-dict #'cape-keyword)))

(setq-local completion-at-point-functions
            (list (cape-capf-buster #'some-caching-capf)))
#+end_example

**** consult
Consult provides practical commands based on the Emacs completion
function completing-read.
#+BEGIN_SRC emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ;; ("C-c h" . consult-history)
           ;; ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line

           ("M-s O" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-s m" . consult-mark)
           ("M-s k" . consult-global-mark)
           ("M-s i" . consult-imenu)
           ("M-s I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ;; ("M-s d" . consult-find)
           ;; ("M-s D" . consult-locate)
           ;; ("M-s g" . consult-grep)
           ;; ("M-s G" . consult-git-grep)
           ("M-s g" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    ;; The :init configuration is always executed (Not lazy)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)
    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; (setq vertico-multiform-commands
    ;;       '((consult-line buffer)
    ;;         (consult-imenu buffer)
    ;;         (consult-outline buffer)
    ;;         (consult-imenu-multi buffer)
    ;;         (consult-org-heading buffer)
    ;;         (consult-ripgrep buffer)
    ;;         (consult-git-grep buffer)
    ;;         (consult-project-buffer buffer)
    ;;         (consult-project-extra-find buffer)
    ;;         (consult-project-extra-find-other-window buffer)))
    )
#+END_SRC

**** consult extensions
***** consult-dir
Consult-dir allows you to easily insert directory paths into the
minibuffer prompt in Emacs.
#+begin_src emacs-lisp
  (use-package consult-dir
    :bind (([remap list-directory] . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)))
#+end_src
***** TODO COMMENT consult-flycheck
#+begin_src emacs-lisp
  (use-package consult-flycheck
    :after (consult flycheck))
#+end_src

**** embark
Embark makes it easy to choose a command to run based on what is near
point, both during a minibuffer completion session and in normal
buffers.
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :custom
    (embark-quit-after-action nil)
    ;; (embark-verbose-indicator-display-action '(display-buffer-in-side-window (side . left))) 
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\*Embark Actions\\*"
                   display-buffer-in-side-window
                   (side . left)
                   (window-parameters (mode-line-format . none)))))
#+END_SRC

Consult users will also want the embark-consult package.
#+BEGIN_SRC emacs-lisp
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

**** COMMENT wgrep
wgrep allows you to edit a grep buffer and apply those changes to the
file buffer like sed interactively.
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :commands wgrep-change-to-wgrep-mode
    :custom (wgrep-auto-save-buffer t))
#+END_SRC

**** TODO tempel

*** TODO make packages in after-init-hook or defer N
*** TODO direddred

*** TODO crux
Useful additional commands.

*** org-mode
Settings about org-mode & extensions.
**** org
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :custom
    (org-catch-invisible-edits 'smart)
    (org-clock-idle-time 10)
    (org-goto-auto-isearch nil)
    (org-log-into-drawer t)
    (org-special-ctrl-a/e t)
    ;; (org-ellipsis "…")
    (org-refile-targets '((nil . (:maxlevel . 5))))
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
    (org-refile-allow-creating-parent-nodes 'confirm)
    :custom-face
    (org-table ((t (:family "Sarasa Term SC"))))
    :config
    (defun inn/org-goto-end-of-subtree ()
      (interactive)
      (org-end-of-subtree))
    :bind(("C-c l" . org-store-link)
          ("C-c a" . org-agenda)
          ("C-c c" . org-capture)
          ("C-c b" . org-switchb)
          :map org-mode-map
          ("C-c s" . org-show-entry)
          ("C-c h" . org-hide-entry)
          ("C-c C-'" . org-edit-special)
          ("C-c C-;" . org-toggle-comment)
          ("C-c C-S-u" . inn/org-goto-end-of-subtree)
          :map org-src-mode-map
          ("C-c C-'" . org-edit-src-exit)))
#+end_src
**** TODO COMMENT [final kill]another org settings
#+begin_src emacs-lisp
  ;;; lem-setup-org-base.el --- Org-mode settings -*- lexical-binding: t -*-

;; Author: Colin McLear
;; Maintainer: Colin McLear
;; Version: 0.1
;; Package-Requires: (dependencies)
;; Homepage: https://github.com/Lambda-Emacs/lambda-emacs
;; Keywords: org-mode


;; This file is not part of GNU Emacs

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Basic setup for org-mode in 𝛌-Emacs

;;; Code:

;;;; Git Org
;; Use Org from source rather than built in
(use-package org
  :straight t ;; let straight handle this
  :commands (org-mode)
  :mode (("\\.org$" . org-mode))
  :bind
  (:map global-map
   ("C-c a" . org-agenda))
  (:map org-mode-map
   ("C-M-k" . org-metaup)
   ("C-M-j" . org-metadown)
   ("C-M-l" . org-metaright)
   ("C-M-h" . org-metaleft)
   ("M-J" . org-shiftdown)
   ("M-K" . org-shiftup)
   ("M-L" . org-shiftright)
   ("M-H" . org-shiftleft)
   ;; easily emphasize text
   ("s-b" . (lambda () (interactive) (org-emphasize-dwim ?*)))
   ("s-i" . (lambda () (interactive) (org-emphasize-dwim ?/)))
   ("s-M-`" . org-emphasize-with-verbatim-dwim)
   ("s-M-~" . org-emphasize-with-code-dwim)
   ;; better pasting behavior in org-mode
   ("s-v" . org-yank))

  :init
  ;; Org-Emphasis-Regex settings. Set regex boundaries for emphasis.
  ;; Load this before org-mode is loaded.
  ;; See https://emacs.stackexchange.com/q/54673/11934
  ;; https://emacs.stackexchange.com/q/54632/11934

  (setq org-emphasis-regexp-components
        '("-—[:space:]('\"{["
          "\] - [:space:].,:!?;'\")}\\["
          "[:space:]"
          "."
          1))

  :custom
  ;; Aesthetics & UI
  (org-adapt-indentation 'headline-data) ;; adapt indentation only for data lines
  (org-catch-invisible-edits 'smart) ;; prevent editing invisible area
  (org-cycle-separator-lines 0) ;; no empty lines in collapsed view
  (org-ellipsis "…") ;; nicer elipses "↷" "↴" "▼"
  (org-fontify-quote-and-verse-blocks t) ;; make quotes stand out
  (org-hide-emphasis-markers t)  ;; hide emph markers
  (org-hide-leading-stars t)  ;; hide leading stars
  (org-image-actual-width  500) ;; show all images at 500px using imagemagik
  (org-insert-heading-respect-content t) ;; insert new headings after subtree
  (org-list-allow-alphabetical t) ;; allow alphabetical list
  (org-pretty-entities t) ;; make latex look good, etc.
  (org-pretty-entities-include-sub-superscripts t) ;; prettify sub/superscripts
  (org-read-date-prefer-future 'time) ;; Incomplete dates refer to future dates & times
  (org-startup-folded t) ;; start org in outline
  (org-startup-indented t) ;; start with indentation of headlines
  (org-auto-align-tags nil) ;; don't auto-align tags
  (org-tags-column 0) ;; place tags directly next to headline text

  ;; Footnotes
  (org-footnote-section nil) ;; place footnotes locally
  (org-footnote-auto-adjust t) ;; renumber footnotes

  ;; Insertion/Yanking
  (org-M-RET-may-split-line '((default . t)))  ;; don't split line when creating a new headline, list item, or table field
  (org-yank-adjusted-subtrees t)  ;; adjust subtrees to depth when yanked
  (org-yank-folded-subtrees t) ;; fold subtrees on yank

  ;; Lists
  ;; Demote sequence for list bullets
  (org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
  (org-list-indent-offset 1) ;; increase sub-item indentation

  ;; Logging
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-log-state-notes-insert-after-drawers nil)
  (org-log-redeadline nil) ;; don't log the time a task was rescheduled/redeadlined.
  (org-log-reschedule nil)

  ;; Movement
  (org-return-follows-link t) ;; make RET follow links
  (org-special-ctrl-a/e t)  ;; better movement in headers

  ;; Searching
  (org-imenu-depth 8) ;; scan to depth 8 w/imenu
  (imenu-auto-rescan t) ;; make sure imenu refreshes

  ;; Source block settings
  (org-src-fontify-natively t) ;; use lang-specific fontification
  (org-src-window-setup 'other-window) ;; edit source in other window
  (org-src-tab-acts-natively t) ;; use lang bindings
  (org-confirm-babel-evaluate t) ;; confirm evaluation

  ;; TODOS
  (org-use-fast-todo-selection 'expert) ;; don't use popup window for todos
  ;; don't set to DONE if children aren’t DONE
  (org-enforce-todo-dependencies t)
  (org-enforce-todo-checkbox-dependencies t)

  :config
  ;; Setup further org config
  (require 'lem-setup-org-settings)
  (require 'lem-setup-org-extensions))

;;; Provide Org-Setup
(provide 'lem-setup-org-base)
;;; lem-setup-org-base.el ends here
#+end_src
**** TODO COMMENT [final kill]org extensions
#+begin_src emacs-lisp
  ;; Additions & modifications to org functionality
  ;; NOTE: some org-extensions are set in other setup files:
  ;; - org roam setup is in setup-notes
  ;; - org citations setup is in setup-citation
  ;; - some org export functions are in setup-teaching

  ;;; Org Appearance
  ;;;; Org-Appear (Show Markup/Pretty Entities)
  ;; show markup at point -- this should be part of org!
  (use-package org-appear
    :straight (:type git :host github :repo "awth13/org-appear"
               :branch "master")
    :commands (org-appear-mode)
    :custom
    (org-appear-autoemphasis  t)
    (org-appear-autolinks nil)
    (org-appear-autosubmarkers t)
    :hook (org-mode . org-appear-mode))

  ;;;; Org Modern (Display properties, bullets, etc)
  ;; A nicer set of default display options
  (use-package org-modern
    :straight (:type git :host github :repo "minad/org-modern")
    :hook (org-mode . org-modern-mode)
    :custom-face
    (org-modern-label ((t (:height 1.0 :inherit ,(if lambda-themes-set-variable-pitch 'variable-pitch 'default)))))
    :custom
    (org-modern-hide-stars nil) ;; compatibility w/org-indent
    ;; don't use other faces
    (org-modern-priority nil)
    (org-modern-todo nil)
    (org-modern-tag t)
    ;; Customize this per your font
    (org-modern-label-border .25)
    ;; Note that these stars allow differentiation of levels
    ;; "①" "②" "③" "④" "⑤" "⑥" "⑦"
    (org-modern-star ["⦶" "⦷" "⦹" "⊕" "⍟" "⊛" "⏣" "❂"]))

  ;;;; Org Modern Indent
  ;; Make org-modern work better with org-indent
  (use-package org-modern-indent
    :straight (:type git :host github :repo "jdtsmith/org-modern-indent")
    :hook (org-indent-mode . org-modern-indent-mode)
    :custom-face
    (org-modern-indent-line ((t (:height 1.0 :inherit lem-ui-default-font :inherit lambda-meek)))))

  ;;; Org Autolist (Smart Lists)
  ;; Better list behavior
  (use-package org-auto-list
    :straight (:type git :host github :repo "calvinwyoung/org-autolist")
    :hook (org-mode . org-autolist-mode))

  ;;; Org Babel
  ;; Avoid `org-babel-do-load-languages' since it does an eager require.
  (use-package ob-python
    :straight nil
    :defer t
    :commands (org-babel-execute:python)
    :config
    (progn
      (setq org-babel-python-command "python3"))) ;Default to python 3.x

  (use-package ob-ditaa
    :straight nil
    :defer t
    :config
    (progn
      ;; http://pages.sachachua.com/.emacs.d/Sacha.html
      (setq org-ditaa-jar-path (expand-file-name
                                "ditaa.jar"
                                (concat user-emacs-directory "software/")))))

  (use-package ob-plantuml
    :straight nil
    :defer t
    :config
    (progn
      (setq org-plantuml-jar-path (expand-file-name
                                   "plantuml.jar"
                                   (concat user-emacs-directory "software/")))

      (defun lem-advice-org-babel-execute:plantuml (orig-fun &rest args)
        "Force `shell-file-name' to be bash as the \">\" operator is used for redirection.

  If this forcing is not done, and if `shell-file-name' is tcsh,
  \">\" does not work.  When trying to overwrite files, we get a
  \"File exists\" error, and \">!\" would need to be used instead.

  Instead it's simpler to use bash."
        (let ((shell-file-name (executable-find "bash")))
          (apply orig-fun args)))
      (advice-add 'org-babel-execute:plantuml :around #'lem-advice-org-babel-execute:plantuml)))

  (use-package ob-shell
    :straight nil
    :defer t
    :commands
    (org-babel-execute:sh
     org-babel-expand-body:sh
     org-babel-execute:bash
     org-babel-expand-body:bash))

  (use-package ob-lisp
    :straight nil
    :defer t
    :commands (org-babel-execute:lisp))

  (use-package ob-latex
    :straight nil
    :defer t
    :commands
    (org-babel-execute:latex))

  ;;; Org Babel Tangle
  (use-package ob-tangle
    :straight nil
    :defer t
    :config
    (progn
      ;; Trailing whitespace management
      ;; Delete trailing whitespace in tangled buffer and save it.
      (add-hook 'org-babel-post-tangle-hook #'delete-trailing-whitespace)
      (add-hook 'org-babel-post-tangle-hook #'save-buffer :append)))

  ;;; Org-Download
  ;; Drag and drop images to Emacs org-mode. Courtesy of abo-abo.
  ;; https://github.com/abo-abo/org-download.

  (use-package org-download
    :commands (org-download-yank org-download-screenshot org-download-image)
    :custom
    (org-download-method 'directory)
    (org-download-image-dir (concat org-directory "org-pictures/"))
    (org-download-image-latex-width 500)
    (org-download-timestamp "%Y-%m-%d"))

  ;;; Org Devonthink Integration
  (use-package org-devonthink
    :when sys-mac
    :straight (:type git :host github :repo "lasvice/org-devonthink")
    :commands (org-insert-dtp-link org-dtp-store-link))

  ;;; Org Export Extensions
  ;;;; Ox-Pandoc
  ;; Export w/pandoc
  (use-package ox-pandoc
    :straight (:type git :host github :repo "a-fent/ox-pandoc")
    :if (executable-find "pandoc")
    :after ox
    :custom
    (org-pandoc-command (executable-find "pandoc"))
    (org-pandoc-options '((standalone .  t)))
    (org-pandoc-options-for-docx '((standalone . nil)))
    (org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex")))
    (org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex")))
    (org-pandoc-format-extensions '(org+smart)))

  ;;;; Ox-Pandoc Export Menu Options
  ;; Set pandoc export options
  (setq org-pandoc-menu-entry
        '(
          ;;(?0 "to jats." org-pandoc-export-to-jats)
          ;;(?0 "to jats and open." org-pandoc-export-to-jats-and-open)
          ;;(?  "as jats." org-pandoc-export-as-jats)
          ;;(?1 "to epub2 and open." org-pandoc-export-to-epub2-and-open)
          ;;(?! "to epub2." org-pandoc-export-to-epub2)
          ;;(?2 "to tei." org-pandoc-export-to-tei)
          ;;(?2 "to tei and open." org-pandoc-export-to-tei-and-open)
          ;;(?" "as tei." org-pandoc-export-as-tei)
          ;;(?3 "to markdown_mmd." org-pandoc-export-to-markdown_mmd)
          ;;(?3 "to markdown_mmd and open." org-pandoc-export-to-markdown_mmd-and-open)
          ;;(?# "as markdown_mmd." org-pandoc-export-as-markdown_mmd)
          ;;(?4 "to html5." org-pandoc-export-to-html5)
          (?4 "to html5 and open." org-pandoc-export-to-html5-and-open)
          (?$ "as html5." org-pandoc-export-as-html5)
          (?5 "to html5-pdf and open." org-pandoc-export-to-html5-pdf-and-open)
          (?% "to html5-pdf." org-pandoc-export-to-html5-pdf)
          ;;(?6 "to markdown_phpextra." org-pandoc-export-to-markdown_phpextra)
          ;;(?6 "to markdown_phpextra and open." org-pandoc-export-to-markdown_phpextra-and-open)
          ;;(?& "as markdown_phpextra." org-pandoc-export-as-markdown_phpextra)
          ;;(?7 "to markdown_strict." org-pandoc-export-to-markdown_strict)
          ;;(?7 "to markdown_strict and open." org-pandoc-export-to-markdown_strict-and-open)
          ;;(?' "as markdown_strict." org-pandoc-export-as-markdown_strict)
          ;; (?8 "to opendocument." org-pandoc-export-to-opendocument)
          ;; (?8 "to opendocument and open." org-pandoc-export-to-opendocument-and-open)
          ;; (?( "as opendocument." org-pandoc-export-as-opendocument)
          (?8 "to opml." org-pandoc-export-to-opml)
          (?9 "to opml and open." org-pandoc-export-to-opml-and-open)
          ;; (?* "as opml." org-pandoc-export-as-opml)
          ;;(?: "to rst." org-pandoc-export-to-rst)
          ;;(?: "to rst and open." org-pandoc-export-to-rst-and-open)
          ;;(?* "as rst." org-pandoc-export-as-rst)
          ;;(?< "to slideous." org-pandoc-export-to-slideous)
          (?< "to slideous and open." org-pandoc-export-to-slideous-and-open)
          (?, "as slideous." org-pandoc-export-as-slideous)
          (?= "to ms-pdf and open." org-pandoc-export-to-ms-pdf-and-open)
          (?- "to ms-pdf." org-pandoc-export-to-ms-pdf)
          ;;(?> "to textile." org-pandoc-export-to-textile)
          ;;(?> "to textile and open." org-pandoc-export-to-textile-and-open)
          ;;(?. "as textile." org-pandoc-export-as-textile)
          ;;(?a "to asciidoc." org-pandoc-export-to-asciidoc)
          ;;(?a "to asciidoc and open." org-pandoc-export-to-asciidoc-and-open)
          ;;(?A "as asciidoc." org-pandoc-export-as-asciidoc)
          (?b "to beamer-pdf and open." org-pandoc-export-to-beamer-pdf-and-open)
          (?B "to beamer-pdf." org-pandoc-export-to-beamer-pdf)
          (?c "to context-pdf and open." org-pandoc-export-to-context-pdf-and-open)
          (?C "to context-pdf." org-pandoc-export-to-context-pdf)
          ;;(?d "to docbook5." org-pandoc-export-to-docbook5)
          (?d "to docbook5 and open." org-pandoc-export-to-docbook5-and-open)
          (?D "as docbook5." org-pandoc-export-as-docbook5)
          (?e "to epub3 and open." org-pandoc-export-to-epub3-and-open)
          (?E "to epub3." org-pandoc-export-to-epub3)
          ;;(?f "to fb2." org-pandoc-export-to-fb2)
          ;;(?f "to fb2 and open." org-pandoc-export-to-fb2-and-open)
          ;;(?F "as fb2." org-pandoc-export-as-fb2)
          ;;(?g "to gfm." org-pandoc-export-to-gfm)
          (?g "to gfm and open." org-pandoc-export-to-gfm-and-open)
          (?G "as gfm." org-pandoc-export-as-gfm)
          ;;(?h "to html4." org-pandoc-export-to-html4)
          (?h "to html4 and open." org-pandoc-export-to-html4-and-open)
          (?H "as html4." org-pandoc-export-as-html4)
          ;;(?i "to icml." org-pandoc-export-to-icml)
          (?i "to icml and open." org-pandoc-export-to-icml-and-open)
          (?I "as icml." org-pandoc-export-as-icml)
          ;;(?j "to json." org-pandoc-export-to-json)
          (?j "to json and open." org-pandoc-export-to-json-and-open)
          (?J "as json." org-pandoc-export-as-json)
          ;; (?k "to markdown." org-pandoc-export-to-markdown)
          (?k "to markdown and open." org-pandoc-export-to-markdown-and-open)
          (?K "as markdown." org-pandoc-export-as-markdown)
          (?l "to latex-pdf and open." org-pandoc-export-to-latex-pdf-and-open)
          (?L "to latex-pdf." org-pandoc-export-to-latex-pdf)
          ;;(?m "to man." org-pandoc-export-to-man)
          (?m "to man and open." org-pandoc-export-to-man-and-open)
          (?M "as man." org-pandoc-export-as-man)
          ;;(?n "to native." org-pandoc-export-to-native)
          (?n "to native and open." org-pandoc-export-to-native-and-open)
          (?N "as native." org-pandoc-export-as-native)
          (?o "to odt and open." org-pandoc-export-to-odt-and-open)
          (?O "to odt." org-pandoc-export-to-odt)
          (?p "to pptx and open." org-pandoc-export-to-pptx-and-open)
          (?P "to pptx." org-pandoc-export-to-pptx)
          ;;(?q "to commonmark." org-pandoc-export-to-commonmark)
          ;;(?q "to commonmark and open." org-pandoc-export-to-commonmark-and-open)
          ;;(?Q "as commonmark." org-pandoc-export-as-commonmark)
          ;;(?r "to rtf." org-pandoc-export-to-rtf)
          (?r "to rtf and open." org-pandoc-export-to-rtf-and-open)
          (?R "as rtf." org-pandoc-export-as-rtf)
          ;;(?s "to s5." org-pandoc-export-to-s5)
          ;;(?s "to s5 and open." org-pandoc-export-to-s5-and-open)
          ;;(?S "as s5." org-pandoc-export-as-s5)
          ;;(?t "to texinfo." org-pandoc-export-to-texinfo)
          ;;(?t "to texinfo and open." org-pandoc-export-to-texinfo-and-open)
          ;;(?T "as texinfo." org-pandoc-export-as-texinfo)
          ;;(?u "to dokuwiki." org-pandoc-export-to-dokuwiki)
          (?u "to dokuwiki and open." org-pandoc-export-to-dokuwiki-and-open)
          (?U "as dokuwiki." org-pandoc-export-as-dokuwiki)
          ;; (?v "to revealjs." org-pandoc-export-to-revealjs)
          (?v "to revealjs and open." org-pandoc-export-to-revealjs-and-open)
          (?V "as revealjs." org-pandoc-export-as-revealjs)
          ;;(?w "to mediawiki." org-pandoc-export-to-mediawiki)
          (?w "to mediawiki and open." org-pandoc-export-to-mediawiki-and-open)
          (?W "as mediawiki." org-pandoc-export-as-mediawiki)
          (?x "to docx and open." org-pandoc-export-to-docx-and-open)
          (?X "to docx." org-pandoc-export-to-docx)
          ;;(?y "to slidy." org-pandoc-export-to-slidy)
          (?y "to slidy and open." org-pandoc-export-to-slidy-and-open)
          (?Y "as slidy." org-pandoc-export-as-slidy)
          ;;(?z "to dzslides." org-pandoc-export-to-dzslides)
          (?z "to dzslides and open." org-pandoc-export-to-dzslides-and-open)
          (?Z "as dzslides." org-pandoc-export-as-dzslides)
          ;;(?{ "to muse." org-pandoc-export-to-muse)
          ;;(?{ "to muse and open." org-pandoc-export-to-muse-and-open)
          ;;(?[ "as muse." org-pandoc-export-as-muse)
          ;;(?} "to zimwiki." org-pandoc-export-to-zimwiki)
          ;;(?} "to zimwiki and open." org-pandoc-export-to-zimwiki-and-open)
          ;;(?] "as zimwiki." org-pandoc-export-as-zimwiki)
          ;;(?~ "to haddock." org-pandoc-export-to-haddock)
          ;;(?~ "to haddock and open." org-pandoc-export-to-haddock-and-open)
          ;;(?^ "as haddock." org-pandoc-export-as-haddock)
          ))


  ;;;; Ox-Hugo
  ;; Export to Hugo with Org
  ;; https://github.com/kaushalmodi/ox-hugo
  (use-package ox-hugo :after ox)

  ;;;;; Batch Export Files with Org-Hugo
  ;; mark files and then batch export them with this command
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "C-+")
      (lambda()
        (interactive)
        (diredp-do-apply/eval 'org-hugo-export-wim-to-md '(4)))))

  ;;;;; Org-Hugo Links
  ;; New link type for Org-Hugo internal links
  (defun org-hugo-link-complete ()
    "Create link with Hugo ref shortcode"
    (concat "{{% ref " (file-relative-name (read-file-name "File: ")) " %}}"))

  (defun org-hugo-follow (link)
    (find-file (expand-file-name link)))

  (with-eval-after-load 'org
    (org-link-set-parameters "hugo"
                             :complete 'org-hugo-link-complete
                             :follow 'org-hugo-follow))

  ;;; Org Html Conversion
  (use-package htmlize
    :commands (htmlize-buffer))

  ;;; Org Menu
  ;; A menu for editing org-mode documents and exploring it’s features in a
  ;; discoverable way via transient menus.
  (use-package org-menu
    :straight (:type git :host github :repo "sheijk/org-menu")
    :bind* (:map org-mode-map
            ("C-c m" . org-menu)))

  ;;; Org Pomodoro
  ;; Helps with time tracking
  (use-package org-pomodoro
    :commands org-pomodoro
    :init
    (progn
      (setq org-pomodoro-audio-player "/usr/bin/afplay")))

  ;;; Provide Org Extensions
  (provide 'lem-setup-org-extensions)	;
#+end_src
**** TODO COMMENT [final kill]org settings
#+begin_src emacs-lisp
  ;;; lem-setup-org-settings.el --- Org-mode settings -*- lexical-binding: t -*-


;; Author: Colin McLear
;; Maintainer: Colin McLear
;; Version: 0.1
;; Package-Requires: (dependencies)
;; Homepage: https://github.com/Lambda-Emacs/lambda-emacs
;; Keywords: org-mode


;; This file is not part of GNU Emacs

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.


;;; Commentary:

;; Core settings for org-mode in 𝛌-Emacs This file is for configuring org and
;; related files that are part of org. Other extensions to org can be found in
;; lem-setup-org-extensions.

;; Note that configuring that is heavily user-specific, such as capture
;; templates, is not put here, but should be put in the user's configuration
;; file (or user library). For an example of how to configure capture templates
;; see:
;; https://systemcrafters.cc/emacs-from-scratch/organize-your-life-with-org-mode/#capture-templates

;;; Code:

;;;; Org Agenda
;;;;; Agenda Settings
(use-package org-agenda
  :straight nil
  :commands (org-agenda)
  :bind
  (:map org-agenda-mode-map
   ("j" . org-agenda-next-item)
   ("k" . org-agenda-previous-item))
  :custom
  ;; Agenda logging
  (org-agenda-start-with-log-mode t)

  ;; Agenda styling
  (org-agenda-tags-column 0)
  (org-agenda-block-separator ?–)
  (org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────")

  ;; Display properties
  (org-agenda-tags-column org-tags-column)
  (org-agenda-show-inherited-tags nil)
  (org-agenda-window-setup 'only-window)
  (org-agenda-restore-windows-after-quit t)

  ;; from stack overflow https://stackoverflow.com/a/22900459/6277148
  ;; note that the formatting is nicer that just using '%b'
  (org-agenda-prefix-format
   '((agenda . " %-18c%?-10t ")
     (timeline . "  % s")
     (todo . " ")
     (tags . " ")
     (search . " %i %-12:c")))

  ;; Scheduling
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-timestamp-if-done t)
  (org-agenda-todo-ignore-scheduled 'future)
  (org-agenda-todo-ignore-deadlines 'far)
  (org-agenda-sorting-strategy
   '((agenda time-up) (todo time-up) (tags time-up) (search time-up)))
  (calendar-week-start-day 1) ;; Start week on Monday

  ;; Agenda Custom Commands
  ;; Configure custom agenda views
  ;; https://orgmode.org/manual/Storing-searches.html#Storing-searches
  ;; https://systemcrafters.cc/emacs-from-scratch/organize-your-life-with-org-mode/

  (org-agenda-custom-commands
   '(("d" "Dashboard"
      ((agenda "" ((org-agenda-span 'day)))
       (tags-todo "DEADLINE=\"<today>\""
                  ((org-agenda-overriding-header "Due Today!")))
       (tags-todo "+DEADLINE<\"<+5d>\"+DEADLINE>\"<today>\""
                  ((org-agenda-overriding-header "Due Soon")))
       (todo "NEXT"
             ((org-agenda-overriding-header "Next Tasks")))
       (tags-todo "email" ((org-agenda-overriding-header "Email")))
       ))

     ("n" "Next Tasks"
      ((todo "NEXT"
             ((org-agenda-overriding-header "Next Tasks")))))

     ("W" "Work Tasks" tags-todo "+work")

     ;; Low-effort next actions
     ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
      ((org-agenda-overriding-header "Low Effort Tasks")
       (org-agenda-max-todos 20)
       (org-agenda-files org-agenda-files)))

     ("w" "Workflow Status"
      ((todo "WAIT"
             ((org-agenda-overriding-header "Waiting on External")
              (org-agenda-files org-agenda-files)))
       (todo "REVIEW"
             ((org-agenda-overriding-header "In Review")
              (org-agenda-files org-agenda-files)))
       (todo "PLAN"
             ((org-agenda-overriding-header "In Planning")
              (org-agenda-todo-list-sublevels nil)
              (org-agenda-files org-agenda-files)))
       (todo "BACKLOG"
             ((org-agenda-overriding-header "Project Backlog")
              (org-agenda-todo-list-sublevels nil)
              (org-agenda-files org-agenda-files)))
       (todo "READY"
             ((org-agenda-overriding-header "Ready for Work")
              (org-agenda-files org-agenda-files)))
       (todo "ACTIVE"
             ((org-agenda-overriding-header "Active Projects")
              (org-agenda-files org-agenda-files)))
       (todo "COMPLETED"
             ((org-agenda-overriding-header "Completed Projects")
              (org-agenda-files org-agenda-files)))
       (todo "CANCELED"
             ((org-agenda-overriding-header "Cancelled Projects")
              (org-agenda-files org-agenda-files))))))))

;;;;; Agenda Jump to Dashboard
(defun lem-jump-to-org-dashboard ()
  (interactive)
  (require 'org)
  (org-agenda nil "d"))

;;;;; Agenda Refresh
;; automatically refresh the agenda after adding a task
(defun lem-org-agenda-refresh ()
  (interactive)
  (when (get-buffer "*Org Agenda*")
    (with-current-buffer "*Org Agenda*"
      (org-agenda-redo)
      (message "[org agenda] refreshed!"))))
(add-hook 'org-capture-after-finalize-hook 'lem-org-agenda-refresh)

;;;;; Hydra for Agenda
;; Hydra for org agenda (graciously offered by Spacemacs)
(with-eval-after-load 'org-agenda
  (defhydra lem-hydra-org-agenda (:color pink :hint none)
    "
Org agenda (_q_uit)

^Clock^      ^Visit entry^              ^Date^             ^Other^
^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
_ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
_co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
_cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
_cj_ jump    _o_   link                 _+_  do later      ^^
^^           ^^                         _-_  do earlier    ^^
^^           ^^                         ^^                 ^^
^View^          ^Filter^                 ^Headline^         ^Toggle mode^
^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
_vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
_vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
_vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
_vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
_vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
_vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
_vp_ prev span  ^^                       ^^                 ^^
_vr_ reset      ^^                       ^^                 ^^
^^              ^^                       ^^                 ^^
"
    ;; Entry
    ("hA" org-agenda-archive-default)
    ("hk" org-agenda-kill)
    ("hp" org-agenda-priority)
    ("hr" org-agenda-refile)
    ("h:" org-agenda-set-tags)
    ("ht" org-agenda-todo)
    ;; Visit entry
    ("o"   link-hint-open-link :exit t)
    ("<tab>" org-agenda-goto :exit t)
    ("TAB" org-agenda-goto :exit t)
    ("SPC" org-agenda-show-and-scroll-up)
    ("RET" org-agenda-switch-to :exit t)
    ;; Date
    ("dt" org-agenda-date-prompt)
    ("dd" org-agenda-deadline)
    ("+" org-agenda-do-date-later)
    ("-" org-agenda-do-date-earlier)
    ("ds" org-agenda-schedule)
    ;; View
    ("vd" org-agenda-day-view)
    ("vw" org-agenda-week-view)
    ("vt" org-agenda-fortnight-view)
    ("vm" org-agenda-month-view)
    ("vy" org-agenda-year-view)
    ("vn" org-agenda-later)
    ("vp" org-agenda-earlier)
    ("vr" org-agenda-reset-view)
    ;; Toggle mode
    ("ta" org-agenda-archives-mode)
    ("tA" (org-agenda-archives-mode 'files))
    ("tr" org-agenda-clockreport-mode)
    ("tf" org-agenda-follow-mode)
    ("tl" org-agenda-log-mode)
    ("td" org-agenda-toggle-diary)
    ;; Filter
    ("fc" org-agenda-filter-by-category)
    ("fx" org-agenda-filter-by-regexp)
    ("ft" org-agenda-filter-by-tag)
    ("fr" org-agenda-filter-by-tag-refine)
    ("fh" org-agenda-filter-by-top-headline)
    ("fd" org-agenda-filter-remove-all)
    ;; Clock
    ("cq" org-agenda-clock-cancel)
    ("cj" org-agenda-clock-goto :exit t)
    ("ci" org-agenda-clock-in :exit t)
    ("co" org-agenda-clock-out)
    ;; Other
    ("q" nil :exit t)
    ("gd" org-agenda-goto-date)
    ("." org-agenda-goto-today)
    ("gr" org-agenda-redo)))

;;;; Org Contrib
(use-package org-contrib
  :straight t
  :after org
  :config
  ;; ignore export of headlines marked with :ignore: tag
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))

;;;; Org Export
;; Useful base export settings
(use-package ox
  :straight (:type built-in)
  :after org
  :custom
  ;; Don't use bad hyperref value
  ;; https://emacs.stackexchange.com/a/46226/11934
  (org-latex-hyperref-template nil)
  ;; Export settings
  (org-table-export-default-format "orgtbl-to-csv") ;; export for org-tables to csv
  (org-export-with-smart-quotes t)
  (org-export-with-broken-links t)
  (org-export-async-debug t)
  (org-html-postamble nil) ;; dont export postamble
  (org-export-async-init-file nil)
  (org-export-backends '(ascii beamer html icalendar latex odt pandoc hugo md))
  ;; org v8 bundled with Emacs 24.4
  (org-odt-preferred-output-format "docx")
  :config
  ;; Only OSX need below setup
  (defun lem-setup-odt-org-convert-process ()
    (interactive)
    (let ((cmd "/Applications/LibreOffice.app/Contents/MacOS/soffice"))
      (when (and (eq system-type 'darwin) (file-exists-p cmd))
        ;; org v8
        (setq org-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i"))))))
  (lem-setup-odt-org-convert-process))

;;;; Org ID
;; Use org ids for reference
(use-package org-id
  :straight nil
  :after org
  :custom
  (org-id-locations-file (concat lem-cache-dir ".org-id-locations"))
  (org-id-method 'ts) ;; use timestamp for id
  (org-id-link-to-org-use-id 'create-if-interactive)) ;; create ids


;;;; Org Modules
(with-eval-after-load 'org
;; Load additional org modules
(add-to-list 'org-modules 'org-habit t)
(add-to-list 'org-modules 'org-tempo t)
(add-to-list 'org-modules 'org-protocol t)
(when sys-mac
  (add-to-list 'org-modules 'org-mac-link t)))

;;;; Org TODO Keywords
(customize-set-variable 'org-todo-keywords
                        '((sequence "TODO(t)" "DOING(g)" "NEXT(n)" "WAITING(w@/!)" "MAYBE(m)" "SOMEDAY(s)" "|" "DONE(d)")
                          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELED(c@/!)")))

;;;; Org Inline Tasks
(use-package org-inlinetask :straight nil
  :commands org-inlinetask-insert-task)

;;;; Org Archive
;; Tell org where to archive completed tasks
(setq org-archive-location (concat org-directory "/org-archive/archived.org::datetree/"))

;; Also tell org how to archive all the done tasks (DONE or CANCELED) in a file.
;; From https://changelog.complete.org/archives/9877-emacs-3-more-on-org-mode
;; Based on a stack overflow answer.
;; See https://stackoverflow.com/a/27043756
(defun lem-org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/DONE" 'file)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/CANCELED" 'file))

;;;; Org Refile
;; Set refile settings.  I got a lot of help on this from Aaron Bieber's discussion.
;; See https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html.

;; With the below settings, you can trigger Refile with C-c C-w in any Org file
;; and get a completing read of all headings up to three levels deep in all
;; files in org-agenda-files. You can also refile to the top header in a
;; document and create new parents.
(use-package org-refile
  :straight nil
  :after org
  :custom
  (org-refile-targets '((nil :maxlevel . 9)
                        (org-agenda-files :maxlevel . 8)))
  (org-refile-use-cache t)  ;; use cache for org refile
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm))

;;;; Open Files in Default Application
;;Open files in their default applications (ms word being the prime example)
(customize-set-variable 'org-file-apps
                        '(("\\.docx\\'" . default)
                          ("\\.mm\\'" . default)
                          ("\\.x?html?\\'" . default)
                          ("\\.pdf\\'" . emacs)
                          (auto-mode . emacs)))

;; Bookends is a citation manager for MacOS.
;; Allow org to open Bookends links.
(when sys-mac
  (with-eval-after-load 'org
    (org-add-link-type
     "bookends" 'lem-follow-bookends-link)
    (defun lem-follow-bookends-link (path)
      "Run bookends link in org files."
      (shell-command-to-string (concat "open bookends:" path)))))


;;;; Org Functions
;;;;; Org Emphasis Functions
;; Adapted from https://emacs.stackexchange.com/a/14586
;; See https://emacstil.com/til/2021/11/29/org-emphasize-dwim/
(defun org-emphasize-dwim (&optional char)
  (interactive)
  (unless (region-active-p)
    (lem-maybe-mark-word))
  (org-emphasize char))

(defun org-emphasize-with-verbatim-dwim ()
  (interactive)
  (org-emphasize-dwim ?=))

(defun org-emphasize-with-code-dwim ()
  (interactive)
  (org-emphasize-dwim ?~))

(defun lem--cursor-outside-of-any-word ()
  (not (bounds-of-thing-at-point 'word)))

(defun lem--cursor-at-beginning-of-a-word ()
  (eq (point) (car (bounds-of-thing-at-point 'word))))

(defun lem-maybe-mark-word ()
  "Mark the current word. If cursor is outside of a word bounds, mark the empty position."
  (interactive)
  (unless (or (lem--cursor-outside-of-any-word) (lem--cursor-at-beginning-of-a-word))
    (backward-word))
  (unless (lem--cursor-outside-of-any-word)
    (mark-word)))

;;;;; Narrow & Advance/Retreat
;; Functions to advance forwards or backwards through narrowed tree
(defun lem-org-advance ()
  (interactive)
  (when (buffer-narrowed-p)
    (goto-char (point-min))
    (widen)
    (org-forward-heading-same-level 1))
  (org-narrow-to-subtree))

(defun lem-org-retreat ()
  (interactive)
  (when (buffer-narrowed-p)
    (goto-char (point-min))
    (widen)
    (org-backward-heading-same-level 1))
  (org-narrow-to-subtree))

;;;;; Clone and Narrow
(defun lem-clone-buffer-and-narrow ()
  "Clone buffer and narrow outline tree"
  (interactive)
  (let ((buf (clone-indirect-buffer-other-window nil nil)))
    (with-current-buffer buf
      (cond ((derived-mode-p 'org-mode)
             (org-narrow-to-element))
            ((derived-mode-p 'markdown-mode)
             (markdown-narrow-to-subtree))))
    (switch-to-buffer-other-window buf)))

;;;;; Goto Org Files
(defun lem-goto-org-files ()
  "goto org-files directory"
  (interactive)
  (let ((default-directory org-directory))
    (call-interactively 'find-file)))
(defun lem-goto-inbox.org ()
  "goto org-inbox"
  (interactive)
  (find-file (concat org-directory "inbox.org")))
(defun lem-goto-todo.org ()
  "goto org-todo"
  (interactive)
  (find-file (concat org-directory "todo.org")))
(defun lem-goto-conferences.org ()
  "goto org-conferences"
  (interactive)
  (find-file (concat org-directory "conferences.org")))
(defun lem-goto-referee-reports.org ()
  "goto org referee reports"
  (interactive)
  (find-file (concat org-directory "referee-reports.org")))
(defun lem-goto-reference.org ()
  "goto org reference notes"
  (interactive)
  (find-file (concat org-directory "reference.org")))
(defun lem-goto-someday.org ()
  "goto org-someday"
  (interactive)
  (find-file (concat org-directory "someday.org")))
(defun lem-goto-reading.org ()
  "goto reading list"
  (interactive)
  (find-file (concat org-directory "reading.org")))
(defun lem-goto-writing.org ()
  "goto writing list"
  (interactive)
  (find-file (concat org-directory "writing.org")))
(defun lem-goto-teaching.org ()
  "goto teaching file"
  (interactive)
  (find-file (concat org-directory "teaching.org")))

;;;;; Export Headings as Seperate Files
;; export headlines to separate files
;; http://pragmaticemacs.com/emacs/export-org-mode-headlines-to-separate-files/ ; see also:
;; http://emacs.stackexchange.com/questions/2259/how-to-export-top-level-headings-of-org-mode-buffer-to-separate-files

;; FIXME: neither of these functions work right now for some reason.
(defun lem-org-export-headlines-to-docx ()
  "Export all subtrees that are *not* tagged with :noexport: to
    separate docx files.

    Subtrees that do not have the :EXPORT_FILE_NAME: property set
    are exported to a filename derived from the headline text."
  (interactive)
  (save-buffer)
  (let ((modifiedp (buffer-modified-p)))
    (save-excursion
      (goto-char (point-min))
      (goto-char (re-search-forward "^*"))
      (set-mark (line-beginning-position))
      (goto-char (point-max))
      (org-map-entries
       (lambda ()
         (let ((export-file (org-entry-get (point) "EXPORT_FILE_NAME")))
           (unless export-file
             (org-set-property
              "EXPORT_FILE_NAME"
              (replace-regexp-in-string " " "_" (nth 4 (org-heading-components)))))
           (deactivate-mark)
           (org-pandoc-export-to-docx nil t)
           (unless export-file (org-delete-property "EXPORT_FILE_NAME"))
           (set-buffer-modified-p modifiedp)))
       "-noexport" 'region-start-level)))
  (shell-command-to-string "open ~/Dropbox/Work/Comments/Referee-Reports/ref-report.docx"))

(defun lem-org-export-headlines-to-pdf ()
  "Export all subtrees that are *not* tagged with :noexport: to
    separate pdf files.

    Subtrees that do not have the :EXPORT_FILE_NAME: property set
    are exported to a filename derived from the headline text."
  (interactive)
  ;; (require 'ox-pandoc)
  (save-buffer)
  (let ((modifiedp (buffer-modified-p)))
    (save-excursion
      (goto-char (point-min))
      (goto-char (re-search-forward "^*"))
      (set-mark (line-beginning-position))
      (goto-char (point-max))
      (org-map-entries
       (lambda ()
         (let ((export-file (org-entry-get (point) "EXPORT_FILE_NAME")))
           (unless export-file
             (org-set-property
              "EXPORT_FILE_NAME"
              (replace-regexp-in-string " " "_" (nth 4 (org-heading-components)))))
           (deactivate-mark)
           (org-latex-export-to-pdf nil t nil nil '(:latex-class "org-notes"))
           ;; (org-pandoc-export-to-latex-pdf nil t)
           (unless export-file (org-delete-property "EXPORT_FILE_NAME"))
           (set-buffer-modified-p modifiedp)))
       "-noexport" 'region-start-level))))

;;;;; Export Top Level Trees to File
;; From a useful [[https://emacs.stackexchange.com/questions/27226/how-to-export-top-level-trees-in-an-org-file-to-corresponding-files][stack exchange]] post
(defun lem-org-map-entries (org-file in-tags func)
  (let ((tags (if (stringp in-tags)
                  (list in-tags)
                in-tags)))

    (with-temp-buffer
      (org-mode)
      (insert-file-contents org-file-main)

      ;; Execute func at each heading that matches tags.
      (while (< (point) (point-max))

        ;; If find a heading...
        (and (search-forward-regexp "^\* " nil "end")

             ;; ...that matches the given tags...
             (seq-reduce
              (lambda(a b) (and a b))
              (mapcar
               (lambda (tag)
                 (beginning-of-line)
                 (search-forward-regexp
                  (concat ":" tag ":") (line-end-position) "end"))
               tags)
              t)

             ;; ... then execute given function with cursor at beginning of
             ;; heading.
             (progn
               (beginning-of-line)
               (save-excursion
                 (funcall func))
               (end-of-line)))))))

;;;;; Org demote/promote region
(defun lem-demote-everything (number beg end)
  "Add a NUMBER of * to all headlines between BEG and END.
    Interactively, NUMBER is the prefix argument and BEG and END are
    the region boundaries."
  (interactive "p\nr")
  (save-excursion
    (save-restriction
      (save-match-data
        (widen)
        (narrow-to-region beg end)
        (goto-char (point-min))
        (let ((string (make-string number ?*)))
          (while (search-forward-regexp "^\\*" nil t)
            (insert string)))))))

;;;;; Org Hide Property Drawers
;; From [[https://www.reddit.com/r/emacs/comments/9htd0r/how_to_completely_hide_the_properties_drawer_in/e6fehiw][Reddit]]

(defun org-toggle-properties ()
  "Toggle visibility of properties in current header if it exists."
  (save-excursion
    (when (not (org-at-heading-p))
      (org-previous-visible-heading 1))
    (when (org-header-property-p)
      (let* ((a (re-search-forward "\n\\:" nil t)))
        (if (outline-invisible-p (point))
            (outline-show-entry)
          (org-cycle-hide-drawers 'all))))))

;;;;; Org Return DWIM
;; Note that i've disabled this for now as it was causing issues
;; https://gist.github.com/alphapapa/61c1015f7d1f0d446bc7fd652b7ec4fe
(defun lem-org-return (&optional ignore)
  "Add new list item, heading or table row with RET.
    A double return on an empty element deletes it. Use a prefix arg
    to get regular RET. "
  ;; See https://gist.github.com/alphapapa/61c1015f7d1f0d446bc7fd652b7ec4fe and
  ;; http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/
  (interactive "P")
  (if ignore
      (org-return)
    (cond ((eq 'link (car (org-element-context)))
           ;; Open links like usual
           (org-open-at-point-global))
          ((and (fboundp 'org-inlinetask-in-task-p) (org-inlinetask-in-task-p))
           ;; It doesn't make sense to add headings in inline tasks. Thanks Anders
           ;; Johansson!
           (org-return))
          ((org-at-item-checkbox-p)
           ;; Add checkboxes
           (org-insert-todo-heading nil))
          ((and (org-in-item-p) (not (bolp)))
           ;; Lists end with two blank lines, so we need to make sure we are also not
           ;; at the beginning of a line to avoid a loop where a new entry gets
           ;; created with only one blank line.
           (if (org-element-property :contents-begin (org-element-context))
               (org-insert-heading)
             (beginning-of-line)
             (delete-region (line-beginning-position) (line-end-position))
             (org-return)))
          ((org-at-heading-p)
           (if (s-present? (org-element-property :title (org-element-context)))
               (progn
                 (org-end-of-meta-data)
                 (org-insert-heading))
             (beginning-of-line)
             (delete-region (line-beginning-position) (line-end-position))))
          ((org-at-table-p)
           (if (--any? (string-empty-p it)
                       (nth (- (org-table-current-dline) 1) (org-table-to-lisp)))
               (org-return)
             ;; Empty row
             (beginning-of-line)
             (delete-region (line-beginning-position) (line-end-position))
             (org-return)))
          (t
           (org-return)))))

;; (general-define-key :keymaps 'org-mode-map "RET" #'lem-org-return)

;;;;; Org Create Check Box From List Item
;; A useful macro for converting list items to checkboxes
(fset 'lem-org-checkbox-from-list
      [?a ?  ?\[ ?  ?\] escape ?\M-x return])

;;;;; Org link Syntax
(defun org-update-link-syntax (&optional no-query)
  "Update syntax for links in current buffer.
Query before replacing a link, unless optional argument NO-QUERY
is non-nil."
  (interactive "P")
  (org-with-point-at 1
    (let ((case-fold-search t))
      (while (re-search-forward "\\[\\[[^]]*?%\\(?:2[05]\\|5[BD]\\)" nil t)
        (let ((object (save-match-data (org-element-context))))
          (when (and (eq 'link (org-element-type object))
                     (= (match-beginning 0)
                        (org-element-property :begin object)))
            (goto-char (org-element-property :end object))
            (let* ((uri-start (+ 2 (match-beginning 0)))
                   (uri-end (save-excursion
                              (goto-char uri-start)
                              (re-search-forward "\\][][]" nil t)
                              (match-beginning 0)))
                   (uri (buffer-substring-no-properties uri-start uri-end)))
              (when (or no-query
                        (y-or-n-p
                         (format "Possibly obsolete URI syntax: %S.  Fix? "
                                 uri)))
                (setf (buffer-substring uri-start uri-end)
                      (org-link-escape (org-link-decode uri)))))))))))


;;;;; Org Table Wrap
;; see https://emacs.stackexchange.com/a/30871/11934
(defun org-table-wrap-to-width (width)
  "Wrap current column to WIDTH."
  (interactive (list (read-number "Enter column width: ")))
  (org-table-check-inside-data-field)
  (org-table-align)

  (let (cline (ccol (org-table-current-column)) new-row-count (more t))
    (org-table-goto-line 1)
    (org-table-goto-column ccol)

    (while more
      (setq cline (org-table-current-line))

      ;; Cut current field
      (org-table-copy-region (point) (point) 'cut)

      ;; Justify for width
      (setq org-table-clip
            (mapcar 'list (org-wrap (caar org-table-clip) width nil)))

      ;; Add new lines and fill
      (setq new-row-count (1- (length org-table-clip)))
      (if (> new-row-count 0)
          (org-table-insert-n-row-below new-row-count))
      (org-table-goto-line cline)
      (org-table-goto-column ccol)
      (org-table-paste-rectangle)
      (org-table-goto-line (+ cline new-row-count))

      ;; Move to next line
      (setq more (org-table-goto-line (+ cline new-row-count 1)))
      (org-table-goto-column ccol))

    (org-table-goto-line 1)
    (org-table-goto-column ccol)))

(defun org-table-insert-n-row-below (n)
  "Insert N new lines below the current."
  (let* ((line (buffer-substring (point-at-bol) (point-at-eol)))
         (new (org-table-clean-line line)))
    ;; Fix the first field if necessary
    (if (string-match "^[ \t]*| *[#$] *|" line)
        (setq new (replace-match (match-string 0 line) t t new)))
    (beginning-of-line 2)
    (setq new
          (apply 'concat (make-list n (concat new "\n"))))
    (let (org-table-may-need-update) (insert-before-markers new))  ;;; remove?
    (beginning-of-line 0)
    (re-search-forward "| ?" (point-at-eol) t)
    (and (or org-table-may-need-update org-table-overlay-coordinates) ;;; remove?
         (org-table-align))
    (org-table-fix-formulas "@" nil (1- (org-table-current-dline)) n)))

;;;;; Org Export Last Subtree
;; bind f5 to keyboard macro of export-last-subtree
(fset 'export-last-subtree
      "\C-u\C-c\C-e")

(eval-after-load "org"
  '(progn
     (define-key org-mode-map (kbd "<f5>") 'export-last-subtree)))


;;;;; Org Tag Selection

(defun lem-org-select-tags-completing-read ()
  "Select tags to add to headline."
  (interactive)
  (let* ((current (org-get-tags (point)))
         (selected (completing-read-multiple "Select org tag(s): " (org-get-buffer-tags))))
    (alet (-uniq (append (-difference current selected)
                         (-difference selected current)))
      (org-set-tags it))))

;;;;; Org Copy Link
;; see https://emacs.stackexchange.com/a/63038/11934
(defun lem-org-link-copy-at-point ()
  (interactive)
  (save-excursion
    (let* ((ol-regex "\\[\\[.*?:.*?\\]\\(\\[.*?\\]\\)?\\]")
           (beg (re-search-backward "\\[\\["))
           (end (re-search-forward ol-regex))
           (link-string (buffer-substring-no-properties (match-beginning 0) (match-end 0))))
      (kill-new link-string)
      (message "Org link %s is copied." link-string))))

;;;;; Remove Org Links
;; https://emacs.stackexchange.com/a/10714/11934
(defun lem-org-replace-link-by-link-description ()
  "Replace an org link by its description or, if empty, its address"
  (interactive)
  (if (org-in-regexp org-link-bracket-re 1)
      (save-excursion
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description
               (if (match-end 2)
                   (org-match-string-no-properties 2)
                 (org-match-string-no-properties 1))))
          (apply 'delete-region remove)
          (insert description)))))

;;;;; Uncheck Org boxes
;;see https://www.reddit.com/r/emacs/comments/r107bg/comment/hlx54vf/?utm_source=share&utm_medium=web2x&context=3
(defun lem-copy-and-uncheck (start end)
  "copy a region of regularly repeating checkbox items forward from
one week to the next, unchecking them at the same time"
  (interactive "r")
  (kill-new (replace-regexp-in-string (rx "[X]") "[ ]" (buffer-substring start end)))
  (setq deactivate-mark t))

;;;;; Org Archive
(defun lem-org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/DONE" 'agenda))

;;;;; Org Tree/Heading to New File
(defun lem-org-tree-to-new-file ()
  (interactive)
  "Move an org subtree to a new file"
  (org-copy-subtree nil t)
  (find-file-other-window
   (read-file-name "Move subtree to file:" ))
  (org-paste-subtree))

;;;;; Org Wrap in Block Template
;; A helpful function I found for wrapping text in a block template.
;; http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; function to wrap blocks of text in org templates                       ;;
;; e.g. latex or src etc                                                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun org-block-wrap ()
  "Make a template at point."
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '(
                      ("a" . "ascii")
                      ("c" . "comment")
                      ("C" . "center")
                      ("e" . "example")
                      ("E" . "src emacs-lisp")
                      ("h" . "html")
                      ("l" . "laTeX")
                      ("n" . "notes")
                      ("q" . "quote")
                      ("s" . "src")
                      ("v" . "verse")
                      ))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            ": "
                                            (cdr choice)))
                                  choices
                                  ", ")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
                (insert "#+end_" choice "\n")
                (goto-char start)
                (insert "#+begin_" choice "\n")))
             (t
              (insert "#+begin_" choice "\n")
              (save-excursion (insert "#+end_" choice))))))))))


;;;;; Org Export Body to HTML Buffer
(defun lem-org-export-to-buffer-html-as-body (&optional async subtreep visible-only body-only ext-plist)
  "Export org buffer body to html"
  (interactive)
  (org-export-to-buffer 'html "*Org HTML Export*"
    async body-only ext-plist (lambda () (html-mode)))
  (lem-copy-whole-buffer-to-clipboard)
  (delete-windows-on "*Org HTML Export*")
  (message "HTML copied!"))
;; (lem-previous-user-buffer))

;;; Provide Org-Settings
(provide 'lem-setup-org-settings)
;;; lem-setup-org-settings.el ends here

#+end_src
**** ox-pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :after ox
    :demand
    :bind ("C-c d" . org-pandoc-export-to-docx)
    ;; let pandoc support chinese path.
    :config (modify-coding-system-alist 'process "pandoc" 'cp936))
#+end_src

*** TODO text-mode

*** TODO COMMENT prog-mode
#+begin_src emacs-lisp
  ;; Prettify Symbols
  ;; `global-prettify-symbols-mode' is provided by prog-mode.el
  (use-package prog-mode
    :ensure nil
    :config (global-prettify-symbols-mode t))
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)

#+end_src

#+begin_src emacs-lisp
  (defun prelude-local-comment-auto-fill ()
    (set (make-local-variable 'comment-auto-fill-only-comments) t))

  ;; show the name of the current function definition in the modeline
  (require 'which-func)
  (which-function-mode 1)

  ;; font-lock annotations like TODO in source code
  (require 'hl-todo)
  (global-hl-todo-mode 1)

  (defun prelude-prog-mode-defaults ()
    "Default coding hook, useful with any programming language."
    (when (and (executable-find ispell-program-name)
               prelude-flyspell)
      (flyspell-prog-mode))
    (when prelude-guru
      (guru-mode +1)
      (diminish 'guru-mode))
    (smartparens-mode +1)
    (prelude-enable-whitespace)
    (prelude-local-comment-auto-fill))

  (setq prelude-prog-mode-hook 'prelude-prog-mode-defaults)

  (add-hook 'prog-mode-hook (lambda ()
                              (run-hooks 'prelude-prog-mode-hook)))

  ;; enable on-the-fly syntax checking
  (if (fboundp 'global-flycheck-mode)
      (global-flycheck-mode +1)
    (add-hook 'prog-mode-hook 'flycheck-mode))
#+end_src

#+begin_src emacs-lisp
  ;;;;; Outline Navigation
  ;; Navigate elisp files easily. Outline is a built-in library and we can easily
  ;; configure it to treatment elisp comments as headings.
  (use-package outline
    :straight (:type built-in)
    :hook (prog-mode . outline-minor-mode)
    :bind (:map outline-minor-mode-map
                ("<tab>"   . outline-cycle)
                ("S-<tab>" . outline-cycle-buffer)
                ("M-j"     . outline-move-subtree-down)
                ("M-k"     . outline-move-subtree-up)
                ("M-h"     . outline-promote)
                ("M-l"     . outline-demote))
    :config
    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                ;; prevent `outline-level' from being overwritten by `lispy'
                (setq-local outline-level #'outline-level)
                ;; setup heading regexp specific to `emacs-lisp-mode'
                (setq-local outline-regexp ";;;\\(;* \\)")
                ;; heading alist allows for subtree-like folding
                (setq-local outline-heading-alist
                            '((";;; " . 1)
                              (";;;; " . 2)
                              (";;;;; " . 3)
                              (";;;;;; " . 4)
                              (";;;;;;; " . 5))))))
#+end_src

**** TODO COMMENT flymake | flycheck
use aspell with ispell & flycheck

;; flyspell-mode does spell-checking on the fly as you type
(require 'flyspell)
(setq ispell-program-name "aspell" ; use aspell instead of ispell
ispell-extra-args '("--sug-mode=ultra"))

#+begin_src emacs-lisp
  (use-package flymake
    :straight (:type built-in)
    :hook (prog-mode . flymake-mode)
    :custom
    (flymake-fringe-indicator-position 'left-fringe)
    (flymake-suppress-zero-counters t)
    (flymake-start-on-flymake-mode t)
    (flymake-no-changes-timeout nil)
    (flymake-start-on-save-buffer t)
    (flymake-proc-compilation-prevents-syntax-check t)
    (flymake-wrap-around nil)
    ;; Customize mode-line
    (flymake-mode-line-counter-format '("" flymake-mode-line-error-counter flymake-mode-line-warning-counter flymake-mode-line-note-counter ""))
    (flymake-mode-line-format '(" " flymake-mode-line-exception flymake-mode-line-counters)))
#+end_src

**** TODO auto-yasnippets

**** TODO COMMENT yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
  :straight (:type git :host github :repo "joaotavora/yasnippet")
  :defer 1
  :bind (:map yas-minor-mode-map
         ("C-'" . yas-expand))
  :config
  ;; NOTE: need to specify dirs; does not look in non-snippet subdirs
  (ignore-errors (mkdir (concat lem-all-snippets-dir "lem-snippets/")))
  (ignore-errors (mkdir (concat lem-all-snippets-dir "yasnippet-snippets/")))
  (setq yas-snippet-dirs `(,(concat lem-all-snippets-dir "lem-snippets/") ; custom snippets
                           ,(concat lem-all-snippets-dir "yasnippet-snippets/") ; yas snippets
                           ))
  (setq yas--loaddir yas-snippet-dirs)
  (setq yas-installed-snippets-dir yas-snippet-dirs)
  (setq yas--default-user-snippets-dir yas-snippet-dirs)
  ;; see https://emacs.stackexchange.com/a/30150/11934
  (defun lem-yas-org-mode-hook ()
    (setq-local yas-buffer-local-condition
                '(not (org-in-src-block-p t))))
  (add-hook 'org-mode-hook #'lem-yas-org-mode-hook)
  ;; suppress warnings when expanding
  (with-eval-after-load 'warnings
    (push '(yasnippet backquote-change) warning-suppress-types))
  (yas-global-mode 1))
#+end_src

**** TODO yasnippet-snippets
#+begin_src emacs-lisp
;; the official snippet collection https://github.com/AndreaCrotti/yasnippet-snippets
(use-package yasnippet-snippets
  :straight (:type git :host github :repo "AndreaCrotti/yasnippet-snippets")
  :after (yasnippet)
  :config
  (setq yasnippet-snippets-dir (concat lem-all-snippets-dir "yasnippet-snippets")))
#+end_src

**** TODO libe-py-plugin

**** TODO format-all
#+begin_src emacs-lisp
  ;; format all, formatter for almost languages
  ;; great for programmers
  (use-package format-all
    :diminish
    :hook (prog-mode . format-all-ensure-formatter)
    :bind ("C-c f" . #'format-all-buffer))
#+end_src

**** TODO move-dup
#+begin_src emacs-lisp
  ;; move-dup, move/copy line or region
  (use-package move-dup
    :hook (after-init . global-move-dup-mode))
#+end_src
(global-set-key [M-up] 'move-dup-move-lines-up)
(global-set-key [M-down] 'move-dup-move-lines-down)
(global-set-key [M-S-up] 'move-dup-move-lines-up)
(global-set-key [M-S-down] 'move-dup-move-lines-down)

(global-set-key (kbd "C-c d") 'move-dup-duplicate-down)
(global-set-key (kbd "C-c u") 'move-dup-duplicate-up)

**** TODO quickrun
#+begin_src emacs-lisp
  (use-package quickrun)
#+end_src

**** TODO eglot
#+begin_src emacs-lisp
  ;; If you don't like eglot/lsp-mode for specific languages, some alternatives are:
  ;; - `java-mode' with `meghanada-mode' & `meghanada-server'
  ;; - `python-mode' with `elpy'

  ;;; Code:

  (use-package eglot
    :hook ((c-mode
            c++-mode
            go-mode
            java-mode
            js-mode
            python-mode
            rust-mode
            web-mode) . eglot-ensure)
    :bind (("C-c e f" . #'eglot-format)
           ("C-c e a" . #'eglot-code-actions)
           ("C-c e i" . #'eglot-code-action-organize-imports)
           ("C-c e q" . #'eglot-code-action-quickfix))
    :config
    ;; (setq eglot-ignored-server-capabilities '(:documentHighlightProvider))
    (add-to-list 'eglot-server-programs '(web-mode "vls"))
    (defun eglot-actions-before-save()
      (add-hook 'before-save-hook
                (lambda ()
                  (call-interactively #'eglot-format)
                  (call-interactively #'eglot-code-action-organize-imports))))
    (add-hook 'eglot--managed-mode-hook #'eglot-actions-before-save))

  (provide 'init-eglot)
#+end_src

**** TODO make script executable in linux

;; make a shell script executable automatically on save
(add-hook 'after-save-hook
'executable-make-buffer-file-executable-if-script-p)
          
**** TODO COMMENT rainbow-delimiters & rainbow-identifiers
#+begin_src emacs-lisp
  ;;;; Delimiters & Identifiers
  ;;;;; Visualization of Delimiters (Rainbow Delimiters)
  ;; https://github.com/Fanael/rainbow-delimiters Useful package that will highlight
  ;; delimiters such as parentheses, brackets or braces according to their depth. Each
  ;; successive level is highlighted in a different color. This makes it easy to spot
  ;; matching delimiters, orient yourself in the code, and tell which statements are at
  ;; a given depth.
  (use-package rainbow-delimiters
    :commands rainbow-delimiters-mode
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  ;; https://github.com/Fanael/rainbow-identifiers Rainbow identifiers mode is an Emacs
  ;; minor mode providing highlighting of identifiers based on their names. Each
  ;; identifier gets a color based on a hash of its name.
  (use-package rainbow-identifiers
    :commands rainbow-identifiers-mode)
#+end_src

**** TODO embrace ??

**** TODO COMMENT highlight-indent-guides-mode
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq-default highlight-indent-guides-method 'character
                  highlight-indent-guides-character ?\│
                  ;; default is \x2502 but it is very slow on Mac
                  ;; highlight-indent-guides-character ?\xFFE8
                  highlight-indent-guides-responsive 'top
                  highlight-indent-guides-auto-odd-face-perc 5
                  highlight-indent-guides-auto-even-face-perc 5
                  highlight-indent-guides-auto-character-face-perc 15
                  highlight-indent-guides-auto-enabled t))
#+end_src

**** TODO flymake-collection

**** TODO multi-compile

**** TODO bug-hunter

**** TODO esup

*** TODO COMMENT program languages
**** TODO python
***** cabin's
#+begin_src emacs-lisp
  ;;;###autoload
  (defun check-run-command (command arg-string)
    "Find the EXEC-FILE and run the BODY."

    (if (not (executable-find command))
        (message "[ERROR]: <%s> not found!" command)
      (save-buffer)
      (shell-command (format "%s %s" command arg-string))
      (revert-buffer t t t)))

  ;; BE CAREFUL! Maybe bugs here, always call this function manually.
  ;;;###autoload
  (defun python-isort ()
    "Sort the imports with isort."
    (interactive)
    (check-run-command "isort"
                       (format "--atomic --profile=black %s"
                               (buffer-file-name))))

  ;; BE CAREFUL! Maybe bugs here, always call this function manually.
  ;;;###autoload
  (defun python-remove-all-unused-imports ()
    "Remove all the unused imports, do NOT use pyimport, as it has bugs.
  eg.from datetime import datetime."
    (interactive)
    (check-run-command "autoflake"
                       (format "-i --remove-all-unused-imports %s"
                               (buffer-file-name))))

  (add-hook
   'python-mode-hook
   (lambda ()
     (define-key python-mode-map (kbd "C-c p s") 'python-isort)
     (define-key python-mode-map (kbd "C-c p r") 'python-remove-all-unused-imports)))

#+end_src
***** rational's
#+begin_src emacs-lisp
  ;;; rational-python.el --- python configuration      -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022
  ;; SPDX-License-Identifier: MIT

  ;; Author: System Crafters Community
  ;; Keywords: python

  ;;; Commentary:

  ;; Python development environment configuration.  Several python
  ;; packages can be installed with `pip'. Many of these are needed by
  ;; the Emacs packages used in this configuration.

  ;; * autopep8      -- automatically formats python code to conform to PEP 8 style guide
  ;; * black         -- uncompromising code formatter
  ;; * flake8        -- style guide enforcement
  ;; * importmagic   -- automatically add, remove, manage imports
  ;; * ipython       -- interactive python shell
  ;; * yapf          -- formatter for python code

  ;; Emacs packages to support python development:
  ;; * anaconda      -- code navigation, documentation and completion
  ;; * blacken       -- buffer formatting on save using black
  ;;                    (need to pip install black)
  ;; * eglot         -- language server integration
  ;;                    (need to pip install pyright)
  ;; * numpydoc      -- python doc templates, uses `yasnippets'
  ;; * pythonic      -- utility packages for running python in different
  ;;                    environments (dependency of anaconda)
  ;; * pyvenv        -- virtualenv wrapper

  ;; Suggested additional keybindings for python-mode
  ;; (with-eval-after-load "python"
  ;;   (define-key python-mode-map (kbd "C-c C-n") #'numpydoc-generate)
  ;;   (define-key python-mode-map (kbd "C-c e n") #'flymake-goto-next-error)
  ;;   (define-key python-mode-map (kbd "C-c e p") #'flymake-goto-prev-error))

  ;; Suggested keybindings for pyvenv mode
  ;; (with-eval-after-load "pyvenv"
  ;;   (define-key pyvenv-mode-map (kbd "C-c p a") #'pyvenv-activate)
  ;;   (define-key pyvenv-mode-map (kbd "C-c p d") #'pyvenv-deactivate)
  ;;   (define-key pyvenv-mode-map (kbd "C-c p w") #'pyvenv-workon))

  ;;; Code:

  (rational-package-install-package 'anaconda-mode)
  (rational-package-install-package 'blacken)
  (rational-package-install-package 'eglot)
  (rational-package-install-package 'numpydoc)
  (rational-package-install-package 'pyvenv)

  ;; Hooks
  (add-hook 'python-mode-hook #'anaconda-mode)
  (add-hook 'python-mode-hook #'blacken-mode)
  (add-hook 'python-mode-hook #'eldoc-mode)
  (add-hook 'python-mode-hook #'eglot-ensure)
  (add-hook 'python-mode-hook #'pyvenv-mode)
  (add-hook 'python-mode-hook #'pyvenv-tracking-mode)

  
  ;;; anaconda
  ;; move anaconda python installation directory to
  ;; `rational-config-var-directory'
  (customize-set-variable
   'anaconda-mode-installation-directory
   (expand-file-name "anaconda-mode" rational-config-var-directory))

  ;; for those who use posframe, use it to show docs
  (when (and (package-installed-p 'posframe)
             (featurep 'posframe))
    (customize-set-variable 'anaconda-mode-use-posframe-show-doc t))

  
  ;;; pyvenv
  ;; restart python when the virtual environment changes
  (add-hook 'pyvenv-post-activate-hooks #'pyvenv-restart-python)

  ;; default to the commonly used "venv" folder for the virtual
  ;; environment
  (customize-set-variable 'pyvenv-default-virtual-env-name "venv")

  
  ;;; python mode
  (customize-set-variable 'python-indent-guess-indent-offset-verbose nil)


  
  ;;; numpydoc
  (customize-set-variable 'numpydoc-insert-examples-block nil)
  (customize-set-variable 'numpydoc-template-long nil)

  (provide 'rational-python)
  ;;; rational-python.el ends here
#+end_src
***** purcell's
#+begin_src emacs-lisp
    ;;; init-python.el --- Python editing -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:

  ;; I use nix + direnv instead of virtualenv/pyenv/pyvenv, and it is an
  ;; approach which extends to other languages too. I recorded a
  ;; screencast about this: https://www.youtube.com/watch?v=TbIHRHy7_JM


  (setq auto-mode-alist
        (append '(("SConstruct\\'" . python-mode)
                  ("SConscript\\'" . python-mode))
                auto-mode-alist))

  (setq python-shell-interpreter "python3")

  (require-package 'pip-requirements)

  (when (maybe-require-package 'toml-mode)
    (add-to-list 'auto-mode-alist '("poetry\\.lock\\'" . toml-mode)))

  (when (maybe-require-package 'reformatter)
    (reformatter-define black :program "black" :args '("-")))

  (provide 'init-python)
  ;;; init-python.el ends here
#+end_src
***** prelude's
(require 'electric)
(require 'prelude-programming)

;; Code navigation, documentation lookup and completion for Python
(prelude-require-package 'anaconda-mode)

(when (boundp 'company-backends)
(prelude-require-package 'company-anaconda)
(add-to-list 'company-backends 'company-anaconda))

(defcustom prelude-python-mode-set-encoding-automatically nil
"Non-nil values enable auto insertion of '# coding: utf-8' on python buffers."
:type 'boolean
:group 'prelude)

;;; Encoding detection/insertion logic
;;
;; Adapted from ruby-mode.el
;;
;; This logic was useful in Python 2, but it's not really needed in Python 3.
(defun prelude-python--encoding-comment-required-p ()
(re-search-forward "[^\0-\177]" nil t))

(defun prelude-python--detect-encoding ()
(let ((coding-system
(or save-buffer-coding-system
buffer-file-coding-system)))
(if coding-system
(symbol-name
(or (coding-system-get coding-system 'mime-charset)
(coding-system-change-eol-conversion coding-system nil)))
"ascii-8bit")))

(defun prelude-python--insert-coding-comment (encoding)
(let ((newlines (if (looking-at "^\\s *$") "\n" "\n\n")))
(insert (format "# coding: %s" encoding) newlines)))

(defun prelude-python-mode-set-encoding ()
"Insert a magic comment header with the proper encoding if necessary."
(save-excursion
(widen)
(goto-char (point-min))
(when (prelude-python--encoding-comment-required-p)
(goto-char (point-min))
(let ((coding-system (prelude-python--detect-encoding)))
(when coding-system
(if (looking-at "^#!") (beginning-of-line 2))
(cond ((looking-at "\\s *#\\s *.*\\(en\\)?coding\\s *:\\s *\\([-a-z0-9_]*\\)")
;; update existing encoding comment if necessary
(unless (string= (match-string 2) coding-system)
(goto-char (match-beginning 2))
(delete-region (point) (match-end 2))
(insert coding-system)))
((looking-at "\\s *#.*coding\\s *[:=]"))
(t (prelude-python--insert-coding-comment coding-system)))
(when (buffer-modified-p)
(basic-save-buffer-1)))))))

;;; python-mode setup

(when (fboundp 'exec-path-from-shell-copy-env)
(exec-path-from-shell-copy-env "PYTHONPATH"))

(defun prelude-python-mode-defaults ()
"Defaults for Python programming."
(subword-mode +1)
(anaconda-mode +1)
(eldoc-mode +1)
(setq-local electric-layout-rules
'((?: . (lambda ()
(and (zerop (first (syntax-ppss)))
(python-info-statement-starts-block-p)
'after)))))
(when (fboundp #'python-imenu-create-flat-index)
(setq-local imenu-create-index-function
#'python-imenu-create-flat-index))
(add-hook 'post-self-insert-hook
#'electric-layout-post-self-insert-function nil 'local)
(when prelude-python-mode-set-encoding-automatically
(add-hook 'after-save-hook 'prelude-python-mode-set-encoding nil 'local)))

(setq prelude-python-mode-hook 'prelude-python-mode-defaults)

(add-hook 'python-mode-hook (lambda ()
(run-hooks 'prelude-python-mode-hook)))

(provide 'prelude-python)

;;; prelude-python.el ends here

*** COMMENT help systems
**** helpful
Helpful is an alternative to the built-in Emacs help that provides
much more contextual information.
#+begin_src emacs-lisp
  (use-package helpful
    :bind (([remap describe-command] . helpful-command)
           ([remap describe-function] . helpful-callable)
           ([remap describe-key] . helpful-key)
           ([remap describe-symbol] . helpful-symbol)
           ([remap describe-variable] . helpful-variable)
           ("C-h F" . helpful-function)
           ("C-h ." . helpful-at-point)))
#+end_src

**** TODO COMMENT elisp-demos
#+begin_src emacs-lisp
;;;;; Elisp Demos
;; Provide examples of Elisp code
(use-package elisp-demos
  :defer 1
  :config
  ;; inject demos into helpful
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

**** info-colors
Info-colors, make the info manual as colorful.
#+begin_src emacs-lisp
  (use-package info-colors
    :hook (Info-selection . info-colors-fontify-node))
#+end_src

**** TODO COMMENT help-at-pt
#+begin_src emacs-lisp
;;;;; Help At Point
(use-package help-at-pt
  :straight (:type built-in)
  :custom
  (help-at-pt-timer-delay 0.1)
  (help-at-pt-display-when-idle '(flymake-diagnostic)))
#+end_src

*** TODO dictionary functions | youdao-dictionary

*** TODO winum | switch-window | ace-window | window-numbering

*** TODO iedit | symbol-overlay
edit same text in one buffer or region

*** TODO xah-fly-keys | ergoemacs-mode | hydra | meow

*** TODO dump-jump

*** TODO emmet-mode

*** TODO multiple cursors

*** TODO workgroups2 | perspective

*** TODO posframe

*** TODO fullframe

*** TODO dimmer

*** TODO diredfl & diff-hl
(use-package diff-hl
  :hook
  ((prog-mode . diff-hl-mode)
   (text-mode . diff-hl-mode)
   (dired-mode . diff-hl-dired-mode)
   (magit-pre-refresh . diff-hl-magit-pre-refresh)
   (magit-post-refresh . diff-hl-magit-post-refresh))
  :custom
  (diff-hl-side 'left)
  (diff-hl-fringe-bmp-function 'cpm--diff-hl-fringe-bmp-from-type)
  (diff-hl-fringe-face-function 'cpm--diff-hl-fringe-face-from-type)
  (diff-hl-margin-symbols-alist
   '((insert . "┃")
     (delete . "┃")
     (change . "┃")
     (unknown . "?")
     (ignored . "i")))
  :init
  (defun cpm--diff-hl-fringe-face-from-type (type _pos)
    (intern (format "cpm--diff-hl-%s" type)))

  (defun cpm--diff-hl-fringe-bmp-from-type(type _pos)
    (intern (format "cpm--diff-hl-%s" type)))

  (defun cpm--diff-hl-set-render-mode ()
    (diff-hl-margin-mode (if window-system -1 1)))
  :config
  (diff-hl-margin-mode 1)
  (define-fringe-bitmap 'diff-hl-insert
    [#b00000011] nil nil '(center repeated))
  (define-fringe-bitmap 'diff-hl-change
    [#b00000011] nil nil '(center repeated))
  (define-fringe-bitmap 'diff-hl-delete
    [#b00000011] nil nil '(center repeated)))
    
*** TODO COMMENT dired-narrow & dired-quick-sort
#+begin_src emacs-lisp
;;;; Narrow Dired to Match Filter
(use-package dired-narrow
  :bind* (:map dired-mode-map
          ("/" . dired-narrow)))

;;;; Dired Sort
(use-package dired-quick-sort
  :bind* (:map dired-mode-map
          ("s" . hydra-dired-quick-sort/body)))
#+end_src

*** TODO COMMENT peep-dired
#+begin_src emacs-lisp
;;;; Peep Dired
(use-package peep-dired
  :commands (peep-dired)
  :bind* (:map dired-mode-map
          ("P" . peep-dired)
          :map peep-dired-mode-map
          ("j"    . peep-dired-next-file)
          ("k"    . peep-dired-prev-file)
          ("RET"  . lem-peep-dired-open)
          ("TAB"  . lem-other-window))
  :config
  ;; helper function for opening files in full window
  (defun lem-peep-dired-open ()
    "open files from peep-dired & clean-up"
    (interactive)
    (peep-dired-kill-buffers-without-window)
    (dired-find-file)
    (delete-other-windows))
  (setq peep-dired-ignored-extensions '("mkv" "iso" "mp4" "pdf" "gif"))
  (setq peep-dired-cleanup-eagerly nil)
  (setq peep-dired-enable-on-directories t)
  (setq peep-dired-cleanup-on-disable t))
#+end_src

*** TODO COMMENT dired-ranger
#+begin_src emacs-lisp
;;;; Dired Ranger
;; https://github.com/Fuco1/dired-hacks#dired-ranger
;; Very helpful way of copying/moving files
;; Note that to move first you need to copy the file and then go to the target directory and move
(use-package dired-ranger
  :after dired
  :bind (:map dired-mode-map
         ("s-c"  . dired-ranger-copy)
         ("s-m"  . dired-ranger-move)
         ("s-v"  . dired-ranger-paste)))
#+end_src

*** TODO scratch

*** TODO expand-region | easy-kill

*** TODO subword | superword

*** TODO rainbow-delimiters

*** TODO multiple-cursors

*** TODO highlight-escape-sequences

*** TODO COMMENT git-blame | git-modes | git-timemachine | git-link | git-commit | git-gutter | gited
#+begin_src emacs-lisp
;; settings for committing using magit
(use-package git-commit
  :after magit
  :hook (git-commit-mode . cpm/git-commit-auto-fill-everywhere)
  :custom (git-commit-summary-max-length 50)
  :preface
  (defun cpm/git-commit-auto-fill-everywhere ()
    "Ensures that the commit body does not exceed 80 characters."
    (setq fill-column 80)
    (setq-local comment-auto-fill-only-comments nil))
  :config
  (with-eval-after-load 'meow
    (add-hook 'git-commit-mode-hook
              (lambda ()
                (meow-insert-mode)))))
#+end_src

;;; init-git.el --- Git SCM support -*- lexical-binding: t -*-
;;; Commentary:

;; See also init-github.el.

;;; Code:

;; TODO: link commits from vc-log to magit-show-commit
;; TODO: smerge-mode
(require-package 'git-blamed)
(require-package 'git-modes)
(when (maybe-require-package 'git-timemachine)
(global-set-key (kbd "C-x v t") 'git-timemachine-toggle))

(require-package 'git-link)

(when (maybe-require-package 'magit)
(setq-default magit-diff-refine-hunk t)

;; Hint: customize `magit-repository-directories' so that you can use C-u M-F12 to
;; quickly open magit on any one of your projects.
(global-set-key [(meta f12)] 'magit-status)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch)

(defun sanityinc/magit-or-vc-log-file (&optional prompt)
(interactive "P")
(if (and (buffer-file-name)
(eq 'Git (vc-backend (buffer-file-name))))
(if prompt
(magit-log-buffer-file-popup)
(magit-log-buffer-file t))
(vc-print-log)))

(with-eval-after-load 'vc
(define-key vc-prefix-map (kbd "l") 'sanityinc/magit-or-vc-log-file)))


(with-eval-after-load 'magit
(define-key magit-status-mode-map (kbd "C-M-<up>") 'magit-section-up))

(maybe-require-package 'magit-todos)

(require-package 'fullframe)
(with-eval-after-load 'magit
(fullframe magit-status magit-mode-quit-window))

(when (maybe-require-package 'git-commit)
(add-hook 'git-commit-mode-hook 'goto-address-mode))


(when *is-a-mac*
(with-eval-after-load 'magit
(add-hook 'magit-mode-hook (lambda () (local-unset-key [(meta h)])))))



;; Convenient binding for vc-git-grep
(with-eval-after-load 'vc
(define-key vc-prefix-map (kbd "f") 'vc-git-grep))



;;; git-svn support

;; (when (maybe-require-package 'magit-svn)
;;   (require-package 'magit-svn)
;;   (autoload 'magit-svn-enabled "magit-svn")
;;   (defun sanityinc/maybe-enable-magit-svn-mode ()
;;     (when (magit-svn-enabled)
;;       (magit-svn-mode)))
;;   (add-hook 'magit-status-mode-hook #'sanityinc/maybe-enable-magit-svn-mode))

(with-eval-after-load 'compile
(dolist (defn (list '(git-svn-updated "^\t[A-Z]\t\\(.*\\)$" 1 nil nil 0 1)
'(git-svn-needs-update "^\\(.*\\): needs update$" 1 nil nil 2 1)))
(add-to-list 'compilation-error-regexp-alist-alist defn)
(add-to-list 'compilation-error-regexp-alist (car defn))))

(defvar git-svn--available-commands nil "Cached list of git svn subcommands")
(defun git-svn--available-commands ()
(or git-svn--available-commands
(setq git-svn--available-commands
(sanityinc/string-all-matches
"^  \\([a-z\\-]+\\) +"
(shell-command-to-string "git svn help") 1))))

(autoload 'vc-git-root "vc-git")

(defun git-svn (dir command)
"Run a git svn subcommand in DIR."
(interactive (list (read-directory-name "Directory: ")
(completing-read "git-svn command: " (git-svn--available-commands) nil t nil nil (git-svn--available-commands))))
(let* ((default-directory (vc-git-root dir))
(compilation-buffer-name-function (lambda (major-mode-name) "*git-svn*")))
(compile (concat "git svn " command))))


(provide 'init-git)
;;; init-git.el ends here

*** TODO rainbow-mode

*** TODO comint

*** TODO regex-tool

*** TODO re-builder

*** TODO origami

*** TODO sudo-edit

*** TODO gnuplot

*** TODO envrc (with direnv installed)

*** TODO hl-todo

*** TODO move-text

*** TODO smartparens

*** TODO undo-tree

;; supercharge your undo/redo with undo-tree
(require 'undo-tree)
;; autosave the undo-tree history
(setq undo-tree-history-directory-alist
`((".*" . ,temporary-file-directory)))
(setq undo-tree-auto-save-history t)
(global-undo-tree-mode)
(diminish 'undo-tree-mode)

*** TODO volatile-highlights

*** TODO zop-to-char

*** TODO key-chord

*** TODO hungry-delete

*** TODO tree-sitter

*** TODO hippie-expand

*** TODO popper

*** TODO COMMENT magit & transient & magit-todos & vdiff-magit
#+begin_src emacs-lisp
    ;;;; Magit
  (use-package magit
    :commands
    (magit-blame-mode
     magit-commit
     magit-diff
     magit-log
     magit-status)
    :hook (git-commit-mode . turn-on-flyspell)
    :bind ((:map magit-log-mode-map
                 ;; Keybindings for use with updating packages interactively
                 ("Q" . #'exit-recursive-edit)))
    :init
    ;; Suppress the message we get about "Turning on
    ;; magit-auto-revert-mode" when loading Magit.
    (setq magit-no-message '("Turning on magit-auto-revert-mode..."))
    :config
    (setq magit-log-margin '(t "%Y-%m-%d.%H:%M:%S "  magit-log-margin-width nil 18))
    (setq magit-refresh-status-buffer t)
    ;; Set git for macos & homebrew
    (if (and sys-mac homebrew)
        (setq magit-git-executable (concat homebrew "git"))
      (setq magit-git-executable "/usr/bin/git"))
    ;; Fine grained diffs
    (setq magit-diff-refine-hunk t)
    ;; control magit initial visibility
    (setq magit-section-initial-visibility-alist
          '((stashes . hide) (untracked . hide) (unpushed . hide) ([unpulled status] . show)))
    (global-git-commit-mode t) ; use emacs as editor for git commits


    ;; refresh status buffer
    (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
    ;; no magit header line as it conflicts w/bespoke-modeline
    (advice-add 'magit-set-header-line-format :override #'ignore)
    ;; display magit setting
    (setq magit-display-buffer-function #'lem-display-magit-in-other-window)
    ;; (setq magit-display-buffer-function #'lem-magit-display-buffer-pop-up-frame)
    )

  ;; optional: display magit status in new frame
  (defun lem-magit-display-buffer-pop-up-frame (buffer)
    (if (with-current-buffer buffer (eq major-mode 'magit-status-mode))
        (display-buffer buffer
                        '((display-buffer-reuse-window
                           display-buffer-pop-up-frame)
                          (reusable-frames . t)))
      (magit-display-buffer-traditional buffer)))

  ;; optional: display magit in other window & create one if only 1 window
  (defun lem-display-magit-in-other-window (buffer)
    (if (one-window-p)
        (progn
          (split-window-right)
          (other-window 1)
          (display-buffer buffer
                          '((display-buffer-reuse-window))))
      (magit-display-buffer-traditional buffer)))
#+end_src
*** TODO COMMENT imenu-list
#+begin_src emacs-lisp
;;;; Imenu list outline
;; Make a useful outline buffer
;; Binding set to toggle "o"
(use-package imenu-list
  :commands (imenu-list-smart-toggle imenu-list-minor-mode)
  :config
  (setq imenu-list-focus-after-activation t
        imenu-list-auto-resize t
        imenu-list-position 'left))
#+end_src

*** TODO COMMENT tab-bookmark & tabspaces
#+begin_src emacs-lisp
;;;; Tab Bookmark
;; Bookmark window configurations in a tab
;; NOTE: would be good to get this working with tabspaces
(use-package tab-bookmark
  :straight (:type git :host github :repo "minad/tab-bookmark")
  :commands (tab-bookmark tab-bookmark-open)
  :bind (:map project-prefix-map
         ("m" . tab-bookmark)))

;;;; Tab Workspaces

(use-package tabspaces
  :straight (:type git :host github :repo "mclear-tools/tabspaces")
  :hook (after-init . tabspaces-mode)
  ;; Add some functions to the project map
  :bind (:map project-prefix-map
         ("p" . tabspaces-open-or-create-project-and-workspace))
  :custom
  (tabspaces-use-filtered-buffers-as-default t)
  (tabspaces-default-tab "Home")
  :config
  (defun lem--consult-tabspaces ()
    "Deactivate isolated buffers when not using tabspaces."
    (require 'consult)
    (cond (tabspaces-mode
           ;; hide full buffer list (still available with "b")
           (consult-customize consult--source-buffer :hidden t :default nil)
           (add-to-list 'consult-buffer-sources 'consult--source-workspace))
          (t
           (consult-customize consult--source-buffer :hidden nil :default t)
           (setq consult-buffer-sources (remove #'consult--source-workspace consult-buffer-sources)))))
  (add-hook 'tabspaces-mode-hook #'lem--consult-tabspaces))
#+end_src

*** TODO pandoc-mode

*** TODO palimpsest

* COMMENT packages may useful later
** TODO ibuffer-vc
Auto grouping ibuffer contents & git status. we'll see if it's useful.
#+begin_src emacs-lisp
  (use-package ibuffer-vc
    :straight (:host github :repo "purcell/ibuffer-vc")
    :defer 2
    :config
    ;; To include vc status info in the ibuffer list, add either
    ;; vc-status-mini or vc-status to `ibuffer-formats':
    (setq ibuffer-formats
          '((mark modified read-only vc-status-mini " "
                  (name 18 18 :left :elide)
                  " "
                  (size 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  (vc-status 16 16 :left)
                  " "
                  vc-relative-file)))

    ;; Don't need to display "Git" for every project; use a symbol instead
    (defun ibuffer-vc-generate-filter-groups-by-vc-root ()
      "Create a set of ibuffer filter groups based on the vc root dirs of buffers."
      (let ((roots (ibuffer-remove-duplicates
                    (delq nil (mapcar 'ibuffer-vc-root (buffer-list))))))
        (mapcar (lambda (vc-root)
                  (cons (format " %s" (cdr vc-root))
                        `((vc-root . ,vc-root))))
                roots)))

    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-vc-set-filter-groups-by-vc-root)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))
#+end_src

** TODO editorconfig
EditorConfig helps developers define and maintain consistent coding
styles between different editors and IDEs.

** TODO multi-web-mode | mmm-mode | polymode | mumamo | multimode | two-mode-mode
multi major-mode in one buffer for web development, or SQL, or JSON, or else.

** TODO vlf
This package provides the M-x vlf command, which visits part of large
file without loading it entirely.

** TODO global-so-long-mode

** TODO github
;;; init-github.el --- Github integration -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:

(require 'init-git)

(maybe-require-package 'yagist)
(require-package 'bug-reference-github)
(add-hook 'prog-mode-hook 'bug-reference-prog-mode)

(maybe-require-package 'github-clone)
(maybe-require-package 'forge)
(maybe-require-package 'github-review)

(provide 'init-github)
;;; init-github.el ends here

** TODO gist
An Emacs interface for managing gists (http://gist.github.com).

** TODO chinese search
(use-package pyim
  :demand t
  :init
  (defun eh-orderless-regexp (orig_func component)
    (let ((result (funcall orig_func component)))
      (pyim-cregexp-build result)))


  (defun toggle-chinese-search ()
    (interactive)
    (if (not (advice-member-p #'eh-orderless-regexp 'orderless-regexp))
        (advice-add 'orderless-regexp :around #'eh-orderless-regexp)
      (advice-remove 'orderless-regexp #'eh-orderless-regexp)))

  (defun disable-py-search (&optional args)
    (if (advice-member-p #'eh-orderless-regexp 'orderless-regexp)
        (advice-remove 'orderless-regexp #'eh-orderless-regexp)))

  ;; (advice-add 'exit-minibuffer :after #'disable-py-search)
  (add-hook 'minibuffer-exit-hook 'disable-py-search)

  (global-set-key (kbd "s-p") 'toggle-chinese-search)
  ;; use #$#pyim to search chinese and also es.exe locate 子龙
  )
  
** TODO rime
(use-package rime
  :init
  (setq default-input-method "rime")
  :config
  (progn (set-face-attribute 'rime-default-face nil :foreground "#839496" :background "#073642")
         (setq rime-librime-root (expand-file-name "librime/dist" user-emacs-directory))
         (setq rime-show-candidate 'posframe)
         (setq rime-share-data-dir "~/Library/Rime")
         (setq rime-user-data-dir "~/Library/Rime")
         (if sys/win32p
             (progn
               (setq rime-share-data-dir "C:\\Users\\lionqu\\AppData\\Roaming\\Rime")
               (setq rime-user-data-dir "C:\\Users\\lionqu\\AppData\\Roaming\\Rime")
               ))
         (setq rime-posframe-properties
               (list :background-color "#073642"
                     :foreground-color "#839496"
                     :internal-border-width 1))))
                     
** TODO el-patch
;; Package for helping advise/modify features of other packages

* COMMENT backup snippets for future
:PROPERTIES:
:VISIBILITY: folded
:header-args: :tangle no
:header-args+: :results replace
:END:
** /some snippet may be useful/
#+BEGIN_SRC emacs-lisp
  ;; (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  ;; (load custom-file 'noerror 'nomessage)

  ;; (push (expand-file-name "lisp" user-emacs-directory) load-path)
  ;; (push (expand-file-name "elpa" user-emacs-directory) load-path)

#+END_SRC
** running time & gc time
#+begin_src emacs-lisp
  (defmacro k-time (&rest body)
    "Measure and return the time it takes evaluating BODY."
    `(let ((time (current-time)))
       ,@body
       (float-time (time-since time))))
#+end_src

#+begin_src emacs-lisp
  ;; When idle for 15sec run the GC no matter what.
(defvar k-gc-timer
  (run-with-idle-timer 15 t
                       (lambda ()
                         (let ((inhibit-message t))
                           (message "Garbage Collector has run for %.06fsec"
                                    (k-time (garbage-collect)))))))
#+end_src

#+begin_src emacs-lisp
  ;;;;; Measure Time Macro
;; Useful macro to wrap functions in for testing
;; See https://stackoverflow.com/q/23622296
(defmacro measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (message "*Elapsed time: %.06f*" (float-time (time-since time)))))
#+end_src

** if native-comp
;; See if native-comp is available
(when (not (and (fboundp 'native-comp-available-p)
                (native-comp-available-p)))
  (message "Native complation is *not* available"))

** dired
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map
                (kbd "C-c C-x a")
                #'org-attach-dired-to-subtree)))
#+END_SRC

** windmove-mode keybindings (default, delete, display, swap)
default no bindings set, uncomment to apply.
need redesign to use direct keybinding as such functions are very slow.

*** COMMENT windmove-default-keybindings
S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src

*** COMMENT windmove-delete-default-keybindings
C-x S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-delete-default-keybindings)
#+end_src

*** COMMENT windmove-display-default-keybindings
M-S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-display-default-keybindings)
#+end_src

*** COMMENT windmove-swap-states-default-keybindings
S-s-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-swap-states-default-keybindings)
#+end_src

** solaire-mode
Solaire-mode is an aesthetic plugin designed to visually distinguish
"real" buffers from "unreal" buffers by giving the latter a slightly
different -- often darker -- background.

*Tried, it's ugly.*

#+begin_src emacs-lisp
  (use-package solaire-mode
    :after doom-themes
    :init (solaire-global-mode))
#+end_src

*** config snippets
#+begin_example emacs-lisp
(dolist (face '(mode-line mode-line-inactive))
  (setf (alist-get face solaire-mode-remap-modeline) nil))

(add-to-list 'solaire-mode-themes-to-face-swap 'doom-vibrant)
(add-to-list 'solaire-mode-themes-to-face-swap "^doom-")
#+end_example

** org-modern
Not like it.
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :init (global-org-modern-mode))
#+end_src
** all-the-icons (the package)
Somehow it just doesn't work.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :demand)
#+end_src

*** all-the-icons-completion
#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (all-the-icons marginalia)
    :hook (markdown-mode . all-the-icons-completion-marginalia-setup))
#+end_src

*** all-the-icons-dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** all-the-icons-ibuffer
#+begin_src emacs-lisp
  (use-package all-the-icons-ibuffer
    :after all-the-icons
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
#+end_src

** whole-line-or-region
Operate on current line if region undefined.
#+begin_src emacs-lisp
  (use-package whole-line-or-region
    :init
    (whole-line-or-region-global-mode)
    ;; (define-key whole-line-or-region-local-mode-map [remap comment-dwim] nil)
    )
#+end_src

** consult-project-extra
Defines an endpoint for accessing different sources related to the
common project workflow.

Not really useful.

#+begin_src emacs-lisp
  (use-package consult-project-extra
    :after consult
    :bind (("C-x p f" . consult-project-extra-find)
           ("C-x p o" . consult-project-extra-find-other-window)))
#+end_src

** kind-icon
Adds configurable icon or text-based completion prefixes based on the
:company-kind property that many completion backends (such as lsp-mode
and Emacs 28's elisp-mode) provide.
#+begin_src emacs-lisp
  (use-package kind-icon
    :after corfu
    :demand
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    (kind-icon-use-icons nil)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
or (from lambda emacs)
#+begin_src emacs-lisp
;;;;; Kind Icon (For Corfu)
(use-package kind-icon
  :straight (:type git :host github :repo "jdtsmith/kind-icon")
  :after corfu
  :custom
  (kind-icon-use-icons t)
  (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
  (kind-icon-blend-background nil)
  ;; NOTE kind-icon' depends on `svg-lib' which creates a cache directory that
  ;; defaults to the `user-emacs-directory'. Here, I change that directory to
  ;; the cache location.
  (svg-lib-icons-dir (concat lem-cache-dir  "svg-lib/cache/")) ; Change cache dir
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'

  ;; NOTE 2022-02-05: Add hook to reset cache so the icon colors match the theme
  ;; If this isn't done, then the backgound color will remain the same, meaning
  ;; it will not match the background color corresponding to the current theme.
  ;; This hook is already set in the `lem-setup-themes.el' file, but you could
  ;; set it here if you prefer:
  ;; e.g. (add-hook 'after-load-theme-hook #'kind-icon-reset-cache)
  ;; kind-icon needs to have its cache flushed after theme change
  (add-hook 'lambda-themes-after-load-theme-hook #'kind-icon-reset-cache)
  )
#+end_src
** OS specific settings

;; macOS specific settings
(when (eq system-type 'darwin)
  (require 'prelude-macos))

;; Linux specific settings
(when (eq system-type 'gnu/linux)
  (require 'prelude-linux))

;; WSL specific setting
(when (and (eq system-type 'gnu/linux) (getenv "WSLENV"))
  (require 'prelude-wsl))

;; Windows specific settings
(when (eq system-type 'windows-nt)
  (require 'prelude-windows))

*** macOS
(require 'exec-path-from-shell)
(exec-path-from-shell-initialize)

;; It's all in the Meta
(setq ns-function-modifier 'hyper)

(defun prelude-swap-meta-and-super ()
  "Swap the mapping of Meta and Super.
Very useful for people using their Mac with a
Windows external keyboard from time to time."
  (interactive)
  (if (eq mac-command-modifier 'super)
      (progn
        (setq mac-command-modifier 'meta)
        (setq mac-option-modifier 'super)
        (message "Command is now bound to META and Option is bound to SUPER."))
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta)
    (message "Command is now bound to SUPER and Option is bound to META.")))

(define-key prelude-mode-map (kbd "C-c w") 'prelude-swap-meta-and-super)

;; There's no point in hiding the menu bar on macOS, so let's not do it
(menu-bar-mode +1)

;; Enable emoji, and stop the UI from freezing when trying to display them.
(when (fboundp 'set-fontset-font)
  (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend))


(provide 'prelude-macos)
;;; prelude-macos.el ends here

*** linux

(require 'exec-path-from-shell)
(exec-path-from-shell-initialize)

(provide 'prelude-linux)
;;; prelude-linux.el ends here

*** windows

;; Teach Emacs how to interpret various modifier keys
(setq w32-pass-lwindow-to-system nil)
(setq w32-lwindow-modifier 'super) ; Left Windows key

(setq w32-pass-rwindow-to-system nil)
(setq w32-rwindow-modifier 'super) ; Right Windows key

(setq w32-pass-apps-to-system nil)
(setq w32-apps-modifier 'hyper) ; Menu/App key

;; Git setup (assuming you've installed Git for Windows)
(when (file-exists-p "C:/Program Files/Git/bin")
  (add-to-list 'exec-path "C:/Program Files/Git/bin")
  (add-to-list 'exec-path "C:/Program Files/Git/mingw64/bin")
  (setenv "PATH" (concat "C:/Program Files/Git/bin;" "C:/Program Files/Git/mingw64/bin;" (getenv "PATH"))))

;; needed for arc-mode (it allows you to open archives in Emacs)
(if (file-exists-p "C:/Program Files/7-Zip")
    (add-to-list 'exec-path "C:/Program Files/7-Zip")
  (message "7-Zip not found. It's a good idea to install it."))

(provide 'prelude-windows)
;;; prelude-windows.el ends here

*** wsl

;; teach Emacs how to open links with your default browser
(let ((cmd-exe "/mnt/c/Windows/System32/cmd.exe")
      (cmd-args '("/c" "start")))
  (when (file-exists-p cmd-exe)
    (setq browse-url-generic-program  cmd-exe
          browse-url-generic-args     cmd-args
          browse-url-browser-function 'browse-url-generic
          search-web-default-browser 'browse-url-generic)))

(provide 'prelude-wsl)
;;; prelude-wsl.el ends here

** libraries
#+begin_src emacs-lisp
;; Asynchronous commands. Adds the ability to call asynchronous functions and
;; process with ease. See the documentation for `async-start' and
;; `async-start-process'.
(use-package async
  :straight t
  :defer
  :config
  (dired-async-mode 1)
  (setq dired-async--modeline-mode nil))
;; A modern list API for Emacs. No 'cl required.
(use-package dash     :straight t :defer 2)
;; String manipulation
(use-package s        :straight t :defer 2)
;; APIs for files & directories
(use-package f        :straight t :defer 2)
#+end_src

** switch to previous buffer
#+begin_src emacs-lisp
  (defun inn/switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
  (global-set-key (kbd "C-<tab>") #'inn/switch-to previous-buffer)
#+end_src

* /buffer functions & variables/
:PROPERTIES:
:VISIBILITY: folded
:header-args: :tangle no
:header-args+: :results replace
:END:
** get the full pathname of *THIS* org init file
When using :var header in code blocks, the tangled code doesn't just replace
text like a MACRO, but use a 'let()' block to set a variable, which is not
what we want.
So we use :noweb as below.

#+NAME: ORG-INIT-FILE
#+begin_src emacs-lisp
  (buffer-file-name)
#+end_src

#+RESULTS: ORG-INIT-FILE
: c:/Users/InnerSea/pyprojs/autohotkey_scripts/emacs-init.org
** named kbd macros
Open project file at point.
#+begin_src emacs-lisp
  (fset 'open-project-file
   (kmacro-lambda-form [?\C-x ?4 ?4 ?\C-x ?p ?f ?\M-n return] 0 "%d"))
#+end_src

** confirm the branch-tags for tangling
A branch-tag is a set of TODO-tags indicating certain code blocks
while tangling. This code keeps the tags from disappearing when using
S-<left> or S-<right> to switch code branches.

#+NAME: confirm-branch
#+begin_src emacs-lisp
    (let ((branch-tags nil)
      (tags nil)
      (return nil))
      (defun confirm-branch-tags (new-mark old-mark)
        (setq branch-tags '(("VERBOSE-ON" . "VERBOSE-OFF")
                            ("BASIC" . "SUPER")
                            ("TAB-INSERT" . "TAB-SELECT")))
        (while (and (setq tags (car branch-tags))
                    (not (setq return
                               (cond ((string= old-mark (car tags)) (cdr tags))
                                     ((string= old-mark (cdr tags)) (car tags))))))
          (setq branch-tags (cdr branch-tags)))
        return)

      (add-hook 'org-todo-get-default-hook 'confirm-branch-tags nil t))
#+end_src

#+RESULTS: confirm-branch
| confirm-branch-tags | t |

** /buffer local variables (must be the last)/
# Local Variables:
# org-num-skip-unnumbered: t
# tangle-dir: "C:\\Users\\InnerSea\\emacs.init\\vanilla\\"
# org-confirm-babel-evaluate: nil
# org-todo-keyword-faces: (("TODO" . org-dispatcher-highlight))
# eval: (org-babel-ref-resolve "confirm-branch")
# end:
