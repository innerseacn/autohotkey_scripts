#+STARTUP: overview num indent show2levels
#+TODO: TODO(t) DONE
#+TODO: VERBOSE-ON VERBOSE-OFF | 

* *READ THIS FIRST*
:PROPERTIES:
:UNNUMBERED: t
:END:

- *DO THIS FIRST*: Setting the tangle target directory at [[*buffer local variables (must be the last)][here]].

- Type M-x all-the-icons-install-fonts RET and follow the instructions
  to get a better UI looking.

- This init file uses =JetBrainsMono NF= & =Sarasa Term SC= fonts,
  install them first.

- If there's a special tag on the heading. Type S-<left><right> to
  switch code branches.

- Type C-c C-v t to tangle emacs init files.


* early-init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!

#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC

* init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!

#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC

** built-in settings
Using custom-set-variables mechanism.

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(auto-save-default nil)
   '(abbrev-suggest t)
   '(column-number-mode t)
   '(completion-cycle-threshold 5)
   '(cua-enable-cua-keys nil)
   '(cua-enable-modeline-indications t)
   '(default-frame-alist
      '((horizontal-scroll-bars)
        (vertical-scroll-bars)
        (fullscreen . fullboth)))
   '(delete-selection-mode t)
   '(describe-bindings-outline t)
   '(display-battery-mode t)
   '(display-time-24hr-format t)
   '(display-time-day-and-date t)
   '(display-time-format "%R %p %F")
   '(display-time-mode t)
   '(electric-pair-mode t)
   ;; '(electric-quote-mode t)
   '(global-auto-revert-mode t)
   '(global-auto-revert-non-file-buffers t)
   ;; '(global-display-line-numbers-mode t)
   '(global-goto-address-mode t)
   '(global-hl-line-mode t)
   '(help-enable-symbol-autoload t)
   '(history-length 25)
   '(horizontal-scroll-bar-mode nil)
   '(inhibit-startup-screen t)
   '(isearch-allow-motion t)
   '(kill-buffer-delete-auto-save-files t)
   '(line-number-mode t)
   '(make-backup-files nil)
   '(menu-bar-mode nil)
   '(mode-line-compact 'long)
   '(mouse-wheel-progressive-speed nil)
   '(next-error-message-highlight 'keep)
   '(org-catch-invisible-edits 'smart)
   '(org-clock-idle-time 10)
   '(org-goto-auto-isearch nil)
   '(org-log-into-drawer t)
   '(read-quoted-char-radix 16)
   '(repeat-mode t)
   '(ring-bell-function 'ignore)
   '(save-place-mode t)
   '(scroll-bar-mode nil)
   '(scroll-margin 3)
   '(scroll-step 1)
   '(set-mark-command-repeat-pop t)
   '(shift-select-mode 'permanent)
   '(show-trailing-whitespace t)
   '(size-indication-mode t)
   '(split-width-threshold 120)
   '(tab-bar-new-tab-choice 'bookmark-bmenu-get-buffer)
   '(tool-bar-mode nil)
   '(use-dialog-box nil)
   '(use-short-answers t)
   '(visible-bell t)
   '(what-cursor-show-names t)
   '(winner-mode t)
   '(x-stretch-cursor t))
#+END_SRC

*** TODO modeline显示frame名称，或在minibuffer中显示

*** TODO 测试eldoc-documentation-strategy设置的最佳方法，或使用其他方式（如lsp-mode）

*** TODO 尝试使用etags-xref-prefer-current-file选项

*** TODO 将上面的mode相关命令用usepackage重构，实现懒加载

** face settings
*** built-in face settings
Using custom-set-faces mechanism.

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(org-table ((t (:family "Sarasa Term SC"))))
   '(trailing-whitespace ((t (:background "gray0")))))
#+END_SRC

*** default & CJK font face settings
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono NF 12")
  (if (display-graphic-p)
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font) charset
                          (font-spec :family "Sarasa Term SC" :size 24))))
#+END_SRC
  
** key bindings
*** built-in function key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key (kbd "C-M-DEL") 'backward-kill-sexp)
  (global-set-key (kbd "C-M-RET") 'cua-rectangle-mark-mode)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c C-'") 'org-edit-special)
  (global-set-key (kbd "C-x C-/") 'winner-undo)
  (global-set-key (kbd "C-x C-?") 'winner-redo)
  (global-set-key (kbd "<f5>") 'desktop-save)
  (global-set-key (kbd "<f6>") 'desktop-read)
  ;; (global-set-key (kbd "C-x C-1") 'delete-windows-on)
  (global-set-key (kbd "C-x C-q") 'view-mode)
  (global-set-key (kbd "C-x C-d") 'dired)
  (global-set-key (kbd "C-h C-k") 'describe-keymap)
  (global-set-key (kbd "C-c h") 'org-hide-entry)
#+END_SRC
*** TODO 模式键绑定到相应的模式map

*** custom function & key bindings
using :noweb to call ORG-INIT-FILE library.
    
#+BEGIN_SRC emacs-lisp :noweb yes
  (defun open-org-init-file()
    (interactive)
    (find-file "<<ORG-INIT-FILE()>>"))
  (global-set-key (kbd "<f2>") 'open-org-init-file)
#+END_SRC

*** TODO windmove-mode keybindings (default, delete, display, swap)
default no bindings set, uncomment to apply.
need redesign to use direct keybinding as such functions are very slow.

**** COMMENT windmove-default-keybindings
S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src

**** COMMENT windmove-delete-default-keybindings
C-x S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-delete-default-keybindings)
#+end_src

**** COMMENT windmove-display-default-keybindings
M-S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-display-default-keybindings)
#+end_src

**** COMMENT windmove-swap-states-default-keybindings
S-s-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-swap-states-default-keybindings)
#+end_src

** package settings
*** TODO fix the load path stuff

*** package initialize & load-path
#+BEGIN_SRC emacs-lisp
  (let ((default-directory (expand-file-name "elpa" user-emacs-directory)))
    (normal-top-level-add-subdirs-to-load-path))

  (setq package-archives '(("gnu"   . "http://mirrors.bfsu.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.bfsu.edu.cn/elpa/melpa/")
                           ("Org" . "http://mirrors.bfsu.edu.cn/elpa/org/")
                           ("nongnu" . "http://mirrors.bfsu.edu.cn/elpa/nongnu/")))

  ;; (setq package-check-signature nil)
  (require 'package)
  (unless (bound-and-true-p package--initialized)
    (package-initialize))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

*** VERBOSE-ON use-package
"VERBOSE-ON" and "VERBOSE-OFF" are special SEQ_TODOs for choosing
tangling code from the list of branches below. Use S-<left><right> on
headline to switch.

1) ~with error catch & verbose~::
   #+HEADER: :tangle (if (string= "VERBOSE-ON" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (eval-and-compile
       ;; (add-to-list 'load-path "")
       (require 'use-package)
       (setq use-package-always-ensure t
             use-package-always-defer t
             use-package-verbose 'debug))
   #+end_src

2) ~quiet & fast~::
   #+HEADER: :tangle (if (string= "VERBOSE-OFF" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (eval-when-compile
       ;; (add-to-list 'load-path "")
       (require 'use-package)
       (setq use-package-always-ensure t
             use-package-always-defer t
             use-package-expand-minimally t))
   #+end_src
   
*** built-in packages
Don't forget to use ~:ensure nil~ code for built-in packages.

**** savehist
Persist history over Emacs restarts. Vertico sorts by history position.

All configurations are in =Savehist= customize group, no change here.

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :ensure nil
    :init
    (savehist-mode))
#+END_SRC

**** TODO display-line-numbers
do we need line numbers?
**** TODO COMMENT recentf
#+begin_src emacs-lisp
  (use-package recentf
    :defer nil
    :config (recentf-mode t)
    :bind ("C-x f" . recentf-open-files)
    :custom
    :custom-face
    )
#+end_src

**** TODO org
bind org-src-mode-map #'org-edit-src-exit C-c C-'

bind org-show-entry or make TAB cycle after "..."

*** doom-themes
After code is a list of good looking themes, use one of them.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :init
    (load-theme 'doom-badger t)
    (doom-themes-org-config))
#+END_SRC

**** COMMENT good doom-themes list
  - doom-badger
  - doom-gruvbox
  - doom-material-dark
  - doom-monokai-machine
  - doom-monokai-octagon
  - doom-monokai-spectrum
  - doom-moonlight
  - doom-nord
  - doom-oceanic-next
  - doom-old-hope
  - doom-wilmersdorf

**** COMMENT doom-themes config example
#+BEGIN_EXAMPLE emacs-lisp
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_EXAMPLE

*** doom-modeline
Modeline derived from DOOM emacs.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-hud t)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)
    (doom-modeline-gnus nil)
    (doom-modeline-irc nil))
#+END_SRC

**** COMMENT doom-modeline config example
#+BEGIN_EXAMPLE emacs-lisp
  ;; If non-nil, cause imenu to see `doom-modeline' declarations.
  ;; This is done by adjusting `lisp-imenu-generic-expression' to
  ;; include support for finding `doom-modeline-def-*' forms.
  ;; Must be set before loading doom-modeline.
  (setq doom-modeline-support-imenu t)
  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 25)
  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 4)
  ;; Whether to use hud instead of default bar. It's only respected in GUI.
  (setq doom-modeline-hud nil)
  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be
  ;; displayed. It can be an integer or a float number. `nil' means no limit.
  (setq doom-modeline-window-width-limit 0.25)
  ;; How to detect the project root.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (setq doom-modeline-project-detection 'auto)
  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   auto => emacs/lisp/comint.el (in a project) or comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are experiencing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'auto)
  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))
  ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)
  ;; Whether display the colorful icon for `major-mode'.
  ;; It respects `all-the-icons-color-icons'.
  (setq doom-modeline-major-mode-color-icon t)
  ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)
  ;; Whether display the modification icon for the buffer.
  ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)
  ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
  (setq doom-modeline-unicode-fallback nil)
  ;; Whether display the buffer name.
  (setq doom-modeline-buffer-name t)
  ;; Whether display the minor modes in the mode-line.
  (setq doom-modeline-minor-modes nil)
  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)
  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  ;; Whether display the buffer encoding.
  (setq doom-modeline-buffer-encoding t)
  ;; Whether display the indentation information.
  (setq doom-modeline-indent-info nil)
  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)
  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)
  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)
  ;; Whether display the workspace name. Non-nil to display in the mode-line.
  (setq doom-modeline-workspace-name t)
  ;; Whether display the perspective name. Non-nil to display in the mode-line.
  (setq doom-modeline-persp-name t)
  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)
  ;; If non nil the perspective name is displayed alongside a folder icon.
  (setq doom-modeline-persp-icon t)
  ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
  (setq doom-modeline-lsp t)
  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (setq doom-modeline-github nil)
  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))
  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)
  ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
  (setq doom-modeline-mu4e nil)
  ;; also enable the start of mu4e-alert
  (mu4e-alert-enable-mode-line-display)
  ;; Whether display the gnus notifications.
  (setq doom-modeline-gnus t)
  ;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
  (setq doom-modeline-gnus-timer 2)
  ;; Wheter groups should be excludede when gnus automatically being updated.
  (setq doom-modeline-gnus-excluded-groups '("dummy.group"))
  ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
  (setq doom-modeline-irc t)
  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)
  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)
  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")
  ;; What to display as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")
  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
#+END_EXAMPLE

*** TODO solaire-mode.

*** TODO helpful
*** vertico, orderless & marginalia
**** vertico
Vertico provides a performant and minimalistic vertical completion UI
based on the default completion system.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :init (vertico-mode))
#+END_SRC

***** COMMENT config example
#+begin_example emacs-lisp
;; Different scroll margin
(setq vertico-scroll-margin 0)

;; Show more candidates
(setq vertico-count 20)

;; Grow and shrink the Vertico minibuffer
(setq vertico-resize t)

;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
(setq vertico-cycle t)
#+end_example

**** vertico extensions
Comment out if you don't want the extension.

***** vertico-directory
Provides Ido-like navigation commands.

#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :ensure nil
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

***** COMMENT vertico-indexed
Prefixes candidates with indices and allows you to select with prefix
arguments.

Use C-<number> RET to execute, C-<number> TAB to insert.

#+begin_src emacs-lisp
  (use-package vertico-indexed
    :after vertico
    :ensure nil
    :init (vertico-indexed-mode))
#+end_src

***** COMMENT vertico-mouse
Adds mouse support.

#+begin_src emacs-lisp
  (use-package vertico-mouse
    :after vertico
    :ensure nil
    :init (vertico-mouse-mode))
#+end_src

***** vertico-multiform
This package is a Vertico extension for fine tuning the Vertico
display and other minibuffer modes per command or completion category.

#+begin_src emacs-lisp
  (use-package vertico-multiform
    :after vertico
    :ensure nil
    :init (vertico-multiform-mode)
    :bind (:map vertico-map
                ("M-G" . vertico-multiform-grid)))
#+end_src

***** vertico-quick
Select using Avy-style quick keys.

#+begin_src emacs-lisp
  (use-package vertico-quick
    :after vertico
    :ensure nil
    :custom
    (vertico-quick1 "asdfg") ;Single level quick keys.
    (vertico-quick2 "jklh") ;Two level quick keys.
    :bind (:map vertico-map
                ("M-i" . vertico-quick-exit)
                ("C-M-i" . vertico-quick-insert)))
#+end_src

***** vertico-repeat
Enables repetition of Vertico sessions via the `vertico-repeat',
`vertico-repeat-last' and `vertico-repeat-select' commands.

It is necessary to register a minibuffer setup hook, which saves the
Vertico state for repetition.

In order to save the history across Emacs sessions, enable
`savehist-mode' and add `vertico-repeat-history' to
`savehist-additional-variables'.

#+begin_src emacs-lisp
  (use-package vertico-repeat
    :after vertico
    :ensure nil
    :bind ("M-R" . vertico-repeat)
    :hook (minibuffer-setup . vertico-repeat-save))
#+end_src

**** TODO orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :defer nil
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC
    
**** marginalia
Marginalia can add annotations to be displayed with the completion
candidates.

There's no need to bind #'marginalia-cycle, not useful.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+END_SRC
    
**** TODO embark
#+BEGIN_SRC emacs-lisp
  (require 'embark)
  (global-set-key (kbd "C-:") 'embark-act)
  (setq prefix-help-command 'embark-prefix-help-command)
#+END_SRC
    
*** consult
#+BEGIN_SRC emacs-lisp
  (require 'consult)
  (global-set-key (kbd "C-;") 'consult-line)
  (global-set-key (kbd "C-,") 'consult-imenu)
  (global-set-key (kbd "C-x C-b") 'consult-buffer)
#+END_SRC

考虑下面的配置
#+begin_example emacs-lisp
;;  (setq vertico-multiform-commands
;;          '((consult-line buffer)
;;            (consult-imenu reverse buffer)
;;            (execute-extended-command flat)))
;;
;;    (setq vertico-multiform-categories
;;          '((file buffer grid)
;;            (imenu (:not indexed mouse))
;;            (symbol (vertico-sort-function . vertico-sort-alpha))))
;;
;;    (vertico-multiform-mode)

;; Enable vertico-multiform
(vertico-multiform-mode)

;; Configure the display per command.
;; Use a buffer with indices for imenu
;; and a flat (Ido-like) menu for M-x.
(setq vertico-multiform-commands
      '((consult-imenu buffer indexed)
        (execute-extended-command unobtrusive)))

;; Configure the display per completion category.
;; Use the grid display for files and a buffer
;; for the consult-grep commands.
(setq vertico-multiform-categories
      '((file grid)
        (consult-grep buffer)))

        ;; Configure `consult-outline' as a scaled down TOC in a separate buffer
(setq vertico-multiform-commands
      `((consult-outline buffer ,(lambda (_) (text-scale-set -1)))))

      ;; Configure the buffer display and the buffer display action
(setq vertico-multiform-categories
      '((consult-grep
         buffer
         (vertico-buffer-display-action . (display-buffer-same-window)))))

;; Disable preview for consult-grep commands
(consult-customize consult-ripgrep consult-git-grep consult-grep :preview-key nil)
#+end_example

*** TODO auto fill mode
*** TODO awesome-try
*** company
#+BEGIN_SRC emacs-lisp
  (require 'company)
  (global-company-mode t)
  (setq company-minimum-prefix-length 2)
  (setq company-idle-delay 0)
#+END_SRC
*** TODO corfu
*** TODO wgrep
#+BEGIN_SRC emacs-lisp
  (require 'wgrep)
  (setq wgrep-auto-save-buffer t)
  (eval-after-load 'consult
    '(eval-after-load 'embark
       '(progn
          (require 'embark-consult)
          (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))))
  (define-key minibuffer-local-map (kbd "C-c C-e") 'embark-export-write)
  (eval-after-load 'consult
    (progn
      (setq
       consult-narrow-key "<"
       consult-line-numbers-widen t
       consult-async-min-input 2
       consult-async-refresh-delay  0.15
       consult-async-input-throttle 0.2
       consult-async-input-debounce 0.1)
      ))
#+END_SRC

*** TODO direddred

*** TODO crux

*** TODO eglot

*** TODO flycheck

*** TODO dictionary functions

*** TODO winum | switch-window | ace-window

*** TODO iedit

*** TODO xah-fly-keys | ergoemacs-mode | hydra | meow

*** TODO git gutter & git timemachine

*** TODO auto-yasnippets

*** TODO libe-py-plugin

*** TODO dump-jump

*** TODO emmet-mode

*** TODO expand-region & multiple cursors

*** TODO avy
* COMMENT backup snippets for future
:PROPERTIES:
:VISIBILITY: folded
:header-args: :tangle no
:header-args+: :results replace
:END:
** COMMENT /some snippet may be useful/
#+BEGIN_SRC emacs-lisp
  ;; (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  ;; (load custom-file 'noerror 'nomessage)

  ;; (push (expand-file-name "lisp" user-emacs-directory) load-path)
  ;; (push (expand-file-name "elpa" user-emacs-directory) load-path)

#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map
                (kbd "C-c C-x a")
                #'org-attach-dired-to-subtree)))
#+END_SRC

* /buffer functions & variables/
:PROPERTIES:
:VISIBILITY: folded
:header-args: :tangle no
:header-args+: :results replace
:END:
** get the full pathname of *THIS* org init file
When using :var header in code blocks, the tangled code doesn't just replace
text like a MACRO, but use a 'let()' block to set a variable, which is not
what we want.
So we use :noweb as below.

#+NAME: ORG-INIT-FILE
#+begin_src emacs-lisp
  (buffer-file-name)
#+end_src

#+RESULTS: ORG-INIT-FILE
: c:/Users/InnerSea/pyprojs/autohotkey_scripts/emacs-init.org

** confirm the branch-tags for tangling
A branch-tag is a set of TODO-tags indicating certain code blocks
while tangling. This code keeps the tags from disappearing when using
S-<left> or S-<right> to switch code branches.

#+NAME: confirm-branch
#+begin_src emacs-lisp
  (let ((branch-tags nil)
    (tags nil)
    (return nil))
    (defun confirm-branch-tags (new-mark old-mark)
      (setq branch-tags '(("VERBOSE-ON" . "VERBOSE-OFF")
                          ("1" . "2")))
      (while (and (setq tags (car branch-tags))
                  (not (setq return
                             (cond ((string= old-mark (car tags)) (cdr tags))
                                   ((string= old-mark (cdr tags)) (car tags))))))
        (setq branch-tags (cdr branch-tags)))
      return)

    (add-hook 'org-todo-get-default-hook 'confirm-branch-tags nil t))
#+end_src

#+RESULTS: confirm-branch
| confirm-branch-tags | t |

** /buffer local variables (must be the last)/
# Local Variables:
# org-num-skip-unnumbered: t
# tangle-dir: "C:\\Users\\InnerSea\\emacs.init\\vanilla\\"
# org-confirm-babel-evaluate: nil
# org-todo-keyword-faces: '(("TODO" . org-warning))
# eval: (org-babel-ref-resolve "confirm-branch")
# end:
