#+STARTUP: overview num indent show2levels
#+TODO: TODO(t) DONE
#+TODO: VERBOSE-ON VERBOSE-OFF |
#+TODO: BASIC SUPER |
#+TODO: TAB-INSERT TAB-SELECT |

* *READ THIS FIRST*
:PROPERTIES:
:UNNUMBERED: t
:END:

1. *DO THIS FIRST*: Setting the tangle target directory at [[*buffer local variables (must be the last)][here]].

2. Type M-x all-the-icons-install-fonts RET and follow the instructions
   to get a better UI looking.

3. This init file uses =JetBrainsMono NF= & =Sarasa Term SC= fonts,
   install them first.

4. If there's a special tag on the heading. Type S-<left><right> to
   switch code branches.

5. Type C-c C-v t to tangle emacs init files.

6. There are special SEQ_TODOs for choosing tangling code from the list
   of branches under 1) 2) etc+. Use S-<left><right> on headline to switch.
   

* early-init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!
#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC

** GC stuff [from tenon emacs]
#+begin_src emacs-lisp
  ;; For speed up the startup, please do NOT forget reset it to default
  ;; after Emacs after-init-hook, or it may cause freezes.
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
#+end_src

** [from tenon emacs]
#+begin_src emacs-lisp
  ;; Prevent unwanted runtime compilation for native-comp users
  (setq native-comp-deferred-compilation nil)

  ;; Package initialize occurs automatically, before `user-init-file' is loaded
  ;; but after `early-init-file'. If you want to handle package initialization,
  ;; you can prevent Emacs from doing it early by uncomment next line!
  (setq package-enable-at-startup nil)

  ;; Do not resize the frame at this early stage.
  (setq frame-inhibit-implied-resize t)

  ;; System default coding
  ;; (set-language-environment 'utf-8)
#+end_src

** [from rational emacs]
#+begin_src emacs-lisp
  ;; Remove some unneeded UI elements (the user can turn back on anything they wish)
  (setq inhibit-startup-message t
        default-frame-alist
        '((tool-bar-lines . 0)
          (menu-bar-lines . 0)
          (vertical-scroll-bars)
          (horizontal-scroll-bars)
          (fullscreen . fullboth)))

  ;; Loads a nice blue theme, avoids the white screen flash on startup.
  ;; (load-theme 'modus-vivendi t)
  #+end_src

* init.el
:PROPERTIES:
:header-args: :tangle (concat tangle-dir (car (org-get-outline-path t t)))
:header-args+: :mkdirp yes
:header-args+: :comments no
:END:
** /file local variables (must at first)/
Don't change or move this block!!!
#+BEGIN_SRC emacs-lisp :comments no
  ;; -*- lexical-binding: t; -*-
#+END_SRC

** /profile startup (should be commented out when stable)/
Profile emacs startup
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs loaded in %s."
                       (emacs-init-time))))
#+end_src

** COMMENT native compile
#+begin_src emacs-lisp
  (when (and (>= emacs-major-version 28)
             (fboundp 'native-comp-available-p)
             (native-comp-available-p))
    (setq native-comp-async-report-warnings-errors nil)
    (setq package-native-compile t)
    (add-to-list 'native-comp-eln-load-path
                 (expand-file-name "eln-cache" user-emacs-directory)))
#+end_src

** w32 settings
#+begin_src emacs-lisp
(when (boundp 'w32-get-true-file-attributes)
  (setq w32-pipe-buffer-size (* 1024 1024)))
#+end_src

** built-in settings
Using custom-set-variables mechanism.
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(auto-save-default nil)
   '(auto-window-vscroll nil)
   '(abbrev-suggest t)
   '(completion-cycle-threshold 5)
   ;; '(default-frame-alist
   ;;    '((horizontal-scroll-bars)
   ;;      (vertical-scroll-bars)
   ;;      (fullscreen . fullboth)))
   '(describe-bindings-outline t)
   ;; '(delete-by-moving-to-trash t)
   '(help-enable-symbol-autoload t)
   '(help-window-select t)
   '(history-length 25)
   ;; '(inhibit-startup-screen t)
   '(isearch-allow-motion t)
   '(isearch-lazy-count t)
   '(kill-buffer-delete-auto-save-files t)
   '(kill-do-not-save-duplicates t)
   '(make-backup-files nil)
   '(mode-line-compact 'long)
   '(mouse-wheel-progressive-speed nil)
   '(next-error-message-highlight 'keep)
   '(read-process-output-max (* 1024 1024))
   '(read-quoted-char-radix 16)
   '(ring-bell-function 'ignore)
   '(scroll-margin 3)
   '(scroll-conservatively 101)
   '(set-mark-command-repeat-pop t)
   '(shift-select-mode 'permanent)
   '(show-trailing-whitespace t)
   '(split-width-threshold 120)
   '(tab-bar-new-tab-choice 'bookmark-bmenu-get-buffer)
   '(use-dialog-box nil)
   '(use-short-answers t)
   '(visible-bell t)
   '(what-cursor-show-names t)
   '(x-stretch-cursor t)
   '(y-or-n-p-use-read-key t))
#+END_SRC

*** TODO modeline显示frame名称，或在minibuffer中显示

*** TODO 测试eldoc-documentation-strategy设置的最佳方法，或使用其他方式（如lsp-mode）

*** TODO 尝试使用etags-xref-prefer-current-file选项

** face settings
*** built-in face settings
Using custom-set-faces mechanism. Look nice in doom-badger theme.
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(highlight ((t (:background "SteelBlue4" :foreground "snow"))))
   '(trailing-whitespace ((t (:background "gray0")))))
#+END_SRC

*** default & CJK font face settings
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono NF 12")
  (if (display-graphic-p)
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font) charset
                          (font-spec :family "Sarasa Term SC" :size 24))))
#+END_SRC
  
** key bindings
*** built-in function key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") #'kill-current-buffer)
  (global-set-key (kbd "C-M-<backspace>") #'backward-kill-sexp)
  (global-set-key (kbd "<f5>") #'desktop-save)
  (global-set-key (kbd "<f6>") #'desktop-read)
  ;; (global-set-key (kbd "C-x C-1") #'delete-windows-on)
  (global-set-key (kbd "C-x C-d") #'dired)
  (global-set-key (kbd "C-h C-k") #'describe-keymap)
  (global-set-key (kbd "M-o") #'other-window)
  (global-set-key (kbd "M-F") #'forward-to-word)
  (global-set-key (kbd "M-B") #'backward-to-word)
  (global-set-key (kbd "C-x v p") #'vc-push)
  (global-set-key (kbd "C-h K") #'describe-keymap)

  (defalias 'list-buffers 'ibuffer)
#+END_SRC

*** open org init file
using :noweb to call ORG-INIT-FILE library.
#+BEGIN_SRC emacs-lisp :noweb yes
  (defun inn/open-org-init-file()
    (interactive)
    (find-file "<<ORG-INIT-FILE()>>"))
  (global-set-key (kbd "<f2>") 'inn/open-org-init-file)
#+END_SRC

*** echo date time & battery status
#+begin_src emacs-lisp
  (defun inn/echo-time-battery()
    (interactive)
    (setq battery-string
          (let* ((data (and battery-status-function
                            (functionp battery-status-function)
                            (funcall battery-status-function)))
                 (state (or (cdr (assoc 66 data)) "ERR"))
                 (percentage (car (read-from-string (or (cdr (assq 112 data)) "ERR"))))
                 (valid-percentage? (and (numberp percentage)
                                         (>= percentage 0)
                                         (<= percentage 100)))
                 (icon (if valid-percentage? state "error"))
                 (text (if valid-percentage? (format "%d%%%%" percentage) "")))
            (concat " " text " battery-" icon)))
    (setq time-string
          (format-time-string "%F[%R]"))
    (message (concat time-string battery-string)))
  (global-set-key (kbd "C-M-<f22>") 'inn/echo-time-battery)
#+end_src

*** COMMENT isearch bindings
From purcel's.
#+begin_src emacs-lisp
  (defun inn/isearch-exit-other-end ()
    "Exit isearch, but at the other end of the search string.
  This is useful when followed by an immediate kill."
    (interactive)
    (isearch-exit)
    (goto-char isearch-other-end))

  (define-key isearch-mode-map (kbd "C-<return>" 'inn/isearch-exit-other-end)
#+end_src

** package settings
*** TODO fix the load path stuff

*** package initialize & load-path
#+BEGIN_SRC emacs-lisp
  (let ((default-directory (expand-file-name "elpa" user-emacs-directory)))
    (normal-top-level-add-subdirs-to-load-path))

  (setq package-archives '(("gnu"   . "http://mirrors.bfsu.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.bfsu.edu.cn/elpa/melpa/")
                           ("Org" . "http://mirrors.bfsu.edu.cn/elpa/org/")
                           ("nongnu" . "http://mirrors.bfsu.edu.cn/elpa/nongnu/")))

  (setq package-check-signature nil)
  (require 'package)
  (unless (bound-and-true-p package--initialized)
    (package-initialize))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

*** VERBOSE-ON use-package
1) ~verbose-on with error catch & verbose~::
   #+HEADER: :tangle (if (string= "VERBOSE-ON" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (eval-and-compile
       ;; (add-to-list 'load-path "")
       (require 'use-package)
       (setq use-package-always-ensure t
             use-package-always-defer t
             use-package-enable-imenu-support t
             use-package-verbose 'debug))
   #+end_src

2) ~verbose-off quiet & fast~::
   #+HEADER: :tangle (if (string= "VERBOSE-OFF" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (eval-when-compile
       ;; (add-to-list 'load-path "")
       (require 'use-package)
       (setq use-package-always-ensure t
             use-package-always-defer t
             use-package-expand-minimally t))
   #+end_src
   
*** built-in packages
Don't forget to use ~:ensure nil~ code for built-in packages.
**** globally enabled packages
#+begin_src emacs-lisp
  (column-number-mode)
  (delete-selection-mode)
  (display-battery-mode)
  (dired-async-mode)
  (electric-pair-mode)
  ;; (electric-quote-mode)
  ;; (global-display-line-numbers-mode)
  (global-goto-address-mode)
  (global-hl-line-mode)
  ;; (global-so-long-mode)
  ;; (ibuffer-auto-mode)
  (line-number-mode)
  (save-place-mode)
  (savehist-mode)
  (size-indication-mode)
#+end_src

**** time
#+begin_src emacs-lisp
  (setq display-time-24hr-format t
        display-time-day-and-date t
        display-time-format "%R %p %F")
  (display-time-mode)
#+end_src

**** COMMENT pixel scroll
#+begin_src emacs-lisp
  (if (fboundp 'pixel-scroll-precision-mode)
      (pixel-scroll-precision-mode)
    (pixel-scroll-mode))
#+end_src

**** COMMENT autorevert
#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode)
  #+end_src

**** COMMENT whitespace
#+begin_src emacs-lisp
  (setq whitespace-action
        '(report-on-bogus cleanup auto-cleanup))
  (whitespace-mode)
#+end_src

**** cua
#+begin_src emacs-lisp
  (use-package cua
    :ensure nil
    :custom
    (cua-enable-cua-keys nil)
    (cua-enable-modeline-indications t)
    :bind ("C-M-<return>" . cua-rectangle-mark-mode))
  #+end_src

**** org
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :custom
    (org-catch-invisible-edits 'smart)
    (org-clock-idle-time 10)
    (org-goto-auto-isearch nil)
    (org-log-into-drawer t)
    (org-special-ctrl-a/e t)
    ;; (org-ellipsis "…")
    :custom-face
    (org-table ((t (:family "Sarasa Term SC"))))
    :bind(
          ("C-c l" . org-store-link)
          ("C-c a" . org-agenda)
          ("C-c c" . org-capture)
          :map org-mode-map
          ("C-c s" . org-show-entry)
          ("C-c h" . org-hide-entry)
          ("C-c C-'" . org-edit-special)
          ("C-c C-;" . org-toggle-comment)
          :map org-src-mode-map
          ("C-c C-'" . org-edit-src-exit)))
#+end_src

**** recentf
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :bind ("C-x f" . recentf-open-files))
#+end_src

**** winner
#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :hook (after-init . winner-mode)
    :bind (("C-x C-/" . winner-undo)
           ("C-x C-?" . winner-redo)))
#+end_src

**** TODO eshell|shell keys quake mode etc.

*** appearances
**** theme
After code is a list of good looking themes, use one of them.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :init
    (load-theme 'doom-badger t)
    (doom-themes-org-config))
#+END_SRC

***** COMMENT good doom-themes list
- doom-badger
- doom-gruvbox
- doom-material-dark
- doom-monokai-machine
- doom-monokai-octagon
- doom-monokai-spectrum
- doom-moonlight
- doom-nord
- doom-oceanic-next
- doom-old-hope
- doom-wilmersdorf

***** COMMENT doom-themes config example
#+BEGIN_EXAMPLE emacs-lisp
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_EXAMPLE

**** modeline
Modeline derived from DOOM emacs.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-hud t)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-gnus nil)
    (doom-modeline-irc nil)
    (doom-modeline-bar-width 6))
#+END_SRC

***** COMMENT doom-modeline config example
#+BEGIN_EXAMPLE emacs-lisp
  ;; If non-nil, cause imenu to see `doom-modeline' declarations.
  ;; This is done by adjusting `lisp-imenu-generic-expression' to
  ;; include support for finding `doom-modeline-def-*' forms.
  ;; Must be set before loading doom-modeline.
  (setq doom-modeline-support-imenu t)
  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 25)
  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 4)
  ;; Whether to use hud instead of default bar. It's only respected in GUI.
  (setq doom-modeline-hud nil)
  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be
  ;; displayed. It can be an integer or a float number. `nil' means no limit.
  (setq doom-modeline-window-width-limit 0.25)
  ;; How to detect the project root.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (setq doom-modeline-project-detection 'auto)
  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   auto => emacs/lisp/comint.el (in a project) or comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are experiencing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'auto)
  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))
  ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)
  ;; Whether display the colorful icon for `major-mode'.
  ;; It respects `all-the-icons-color-icons'.
  (setq doom-modeline-major-mode-color-icon t)
  ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)
  ;; Whether display the modification icon for the buffer.
  ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)
  ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
  (setq doom-modeline-unicode-fallback nil)
  ;; Whether display the buffer name.
  (setq doom-modeline-buffer-name t)
  ;; Whether display the minor modes in the mode-line.
  (setq doom-modeline-minor-modes nil)
  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)
  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  ;; Whether display the buffer encoding.
  (setq doom-modeline-buffer-encoding t)
  ;; Whether display the indentation information.
  (setq doom-modeline-indent-info nil)
  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)
  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)
  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)
  ;; Whether display the workspace name. Non-nil to display in the mode-line.
  (setq doom-modeline-workspace-name t)
  ;; Whether display the perspective name. Non-nil to display in the mode-line.
  (setq doom-modeline-persp-name t)
  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)
  ;; If non nil the perspective name is displayed alongside a folder icon.
  (setq doom-modeline-persp-icon t)
  ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
  (setq doom-modeline-lsp t)
  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (setq doom-modeline-github nil)
  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))
  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)
  ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
  (setq doom-modeline-mu4e nil)
  ;; also enable the start of mu4e-alert
  (mu4e-alert-enable-mode-line-display)
  ;; Whether display the gnus notifications.
  (setq doom-modeline-gnus t)
  ;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
  (setq doom-modeline-gnus-timer 2)
  ;; Wheter groups should be excludede when gnus automatically being updated.
  (setq doom-modeline-gnus-excluded-groups '("dummy.group"))
  ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
  (setq doom-modeline-irc t)
  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)
  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)
  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")
  ;; What to display as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")
  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
#+END_EXAMPLE

**** COMMENT goggles
Goggles highlights the modified region using pulse. Currently the
commands undo, yank, kill and delete are supported.
#+begin_src emacs-lisp
  (use-package goggles
    :hook ((prog-mode text-mode) . goggles-mode)
    :custom (goggles-pulse t)) ;; set to nil to disable pulsing
#+end_src

**** TODO COMMENT avy
#+begin_src emacs-lisp
#+end_src

**** TODO COMMENT popwin
#+begin_src emacs-lisp
  ;; popwin
(use-package popwin
  :hook (after-init . popwin-mode))
#+end_src

**** TODO anzu

*** minibuffer & complete
**** vertico
Vertico provides a performant and minimalistic vertical completion UI
based on the default completion system.
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :hook (after-init . vertico-mode))
#+END_SRC

***** COMMENT config example
#+begin_example emacs-lisp
;; Different scroll margin
(setq vertico-scroll-margin 0)

;; Show more candidates
(setq vertico-count 20)

;; Grow and shrink the Vertico minibuffer
(setq vertico-resize t)

;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
(setq vertico-cycle t)
#+end_example

**** vertico extensions
Comment out if you don't want the extension.
***** vertico-directory
Provides Ido-like navigation commands.
#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :ensure nil
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

***** vertico-indexed
Prefixes candidates with indices and allows you to select with prefix
arguments.

Use C-<number> RET to execute, C-<number> TAB to insert.

#+begin_src emacs-lisp
  (use-package vertico-indexed
    :after vertico
    :ensure nil
    :init (vertico-indexed-mode))
#+end_src

***** vertico-mouse
Adds mouse support.
#+begin_src emacs-lisp
  (use-package vertico-mouse
    :after vertico
    :ensure nil
    :init (vertico-mouse-mode))
#+end_src

***** vertico-multiform
This package is a Vertico extension for fine tuning the Vertico
display and other minibuffer modes per command or completion category.
#+begin_src emacs-lisp
  (use-package vertico-multiform
    :after vertico
    :ensure nil
    :init (vertico-multiform-mode)
    :bind (:map vertico-map
                ("M-G" . vertico-multiform-grid)))
#+end_src

***** COMMENT vertico-quick
Select using Avy-style quick keys.
#+begin_src emacs-lisp
  (use-package vertico-quick
    :after vertico
    :ensure nil
    :custom
    (vertico-quick1 "asdfg") ;Single level quick keys.
    (vertico-quick2 "jklh") ;Two level quick keys.
    :bind (:map vertico-map
                ("M-i" . vertico-quick-exit)
                ("C-M-i" . vertico-quick-insert)))
#+end_src

***** vertico-repeat
Enables repetition of Vertico sessions via the `vertico-repeat',
`vertico-repeat-last' and `vertico-repeat-select' commands.

It is necessary to register a minibuffer setup hook, which saves the
Vertico state for repetition.

In order to save the history across Emacs sessions, enable
`savehist-mode' and add `vertico-repeat-history' to
`savehist-additional-variables'.

#+begin_src emacs-lisp
  (use-package vertico-repeat
    :after vertico
    :ensure nil
    :bind ("M-R" . vertico-repeat)
    :hook (minibuffer-setup . vertico-repeat-save))
#+end_src

**** SUPER orderless
This package provides an orderless completion style that divides the
pattern into space-separated components, and matches candidates that
match all of the components in any order.

See document of =completion-styles-alist= for details.

1) ~basic config~::
   #+HEADER: :tangle (if (string= "BASIC" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (use-package orderless
       :after vertico
       :demand
       :config
       (orderless-define-completion-style +orderless-with-flex
         (orderless-matching-styles '(orderless-flex orderless-literal orderless-regexp)))
       :custom
       ;; (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp))
       (completion-styles '(orderless basic))
       (completion-category-defaults nil)
       (completion-category-overrides '((file (styles partial-completion initials flex))
                                        (command (styles +orderless-with-flex))
                                        (variable (styles +orderless-with-flex))
                                        (symbol (styles +orderless-with-flex))))
       ;; allow escaping space with backslash!
       (orderless-component-separator #'orderless-escapable-split-on-space))
   #+end_src

2) ~super config by minad~::
   #+HEADER: :tangle (if (string= "SUPER" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+BEGIN_SRC emacs-lisp
     (use-package orderless
       :after vertico
       :demand
       :config
       (defvar +orderless-dispatch-alist
         '((?% . char-fold-to-regexp)
           (?! . orderless-without-literal)
           (?`. orderless-initialism)
           (?= . orderless-literal)
           (?~ . orderless-flex)))

       ;; Recognizes the following patterns:
       ;; * ~flex flex~
       ;; * =literal literal=
       ;; * %char-fold char-fold%
       ;; * `initialism initialism`
       ;; * !without-literal without-literal!
       ;; * .ext (file extension)
       ;; * regexp$ (regexp matching at end)
       (defun +orderless-dispatch (pattern index _total)
         (cond
          ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
          ((string-suffix-p "$" pattern)
           `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
          ;; File extensions
          ((and
            ;; Completing filename or eshell
            (or minibuffer-completing-file-name
                (derived-mode-p 'eshell-mode))
            ;; File extension
            (string-match-p "\\`\\.." pattern))
           `(orderless-regexp . ,(concat "\\." (substring pattern 1) "[\x200000-\x300000]*$")))
          ;; Ignore single !
          ((string= "!" pattern) `(orderless-literal . ""))
          ;; Prefix and suffix
          ((if-let (x (assq (aref pattern 0) +orderless-dispatch-alist))
               (cons (cdr x) (substring pattern 1))
             (when-let (x (assq (aref pattern (1- (length pattern))) +orderless-dispatch-alist))
               (cons (cdr x) (substring pattern 0 -1)))))))

       ;; Define orderless style with flex by default
       (orderless-define-completion-style +orderless-with-flex
         (orderless-matching-styles '(orderless-flex orderless-literal orderless-regexp)))

       ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
       ;; There are many details to consider, but the following configurations all work well.
       ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
       ;; special styles for special completion categories, e.g., partial-completion for files.
       ;;
       ;; 1. (setq completion-styles '(orderless))
       ;; This configuration results in a very coherent completion experience,
       ;; since orderless is used always and exclusively. But it may not work
       ;; in all scenarios. Prefix expansion with TAB is not possible.
       ;;
       ;; 2. (setq completion-styles '(substring orderless))
       ;; By trying substring before orderless, TAB expansion is possible.
       ;; The downside is that you can observe the switch from substring to orderless
       ;; during completion, less coherent.
       ;;
       ;; 3. (setq completion-styles '(orderless basic))
       ;; Certain dynamic completion tables (completion-table-dynamic)
       ;; do not work properly with orderless. One can add basic as a fallback.
       ;; Basic will only be used when orderless fails, which happens only for
       ;; these special tables.
       ;;
       ;; 4. (setq completion-styles '(substring orderless basic))
       ;; Combine substring, orderless and basic.
       ;;
       (setq completion-styles '(orderless basic)
             completion-category-defaults nil
           ;;; Enable partial-completion for files.
           ;;; Either give orderless precedence or partial-completion.
           ;;; Note that completion-category-overrides is not really an override,
           ;;; but rather prepended to the default completion-styles.
             ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
             completion-category-overrides '((file (styles partial-completion initials flex)) ;; partial-completion is tried first
                                             ;; enable flex by default for symbols
                                             (command (styles +orderless-with-flex))
                                             (variable (styles +orderless-with-flex))
                                             (symbol (styles +orderless-with-flex)))
             orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
             orderless-style-dispatchers '(+orderless-dispatch)))
   #+END_SRC

***** Component matching styles
Each component of a pattern can match in any of several matching
styles. A matching style is simply a function from strings to strings
that maps a component to a regexp to match against, so it is easy to
define new matching styles. The predefined ones are:

- =orderless-regexp= the component is treated as a regexp that must
  match somewhere in the candidate.  This is simply the identity
  function!

- =orderless-literal= the component is treated as a literal string that
  must occur in the candidate.  This is just regexp-quote.

- =orderless-without-literal= the component is a treated as a literal
  string that must not occur in the candidate.  Note that nothing is
  highlighted for this matching style. You probably don’t want to use
  this style directly in orderless-matching-styles but with a style
  dispatcher instead. There is an example in the section on style
  dispatchers.

- =orderless-prefixes= the component is split at word endings and each
  piece must match at a word boundary in the candidate, occurring in
  that order.  This is similar to the built-in partial-completion
  completion-style. For example, re-re matches query-replace-regexp,
  recode-region and magit-remote-list-refs; f-d.t matches
  final-draft.txt.

- =orderless-initialism= each character of the component should appear
  as the beginning of a word in the candidate, in order.  This maps
  abc to \<a.*\<b.*\c.

- =orderless-strict-initialism= like initialism but only allow
  non-letters in between the matched words.  For example fb would
  match foo-bar but not foo-qux-bar.

- =orderless-strict-leading-initialism= like strict-initialism but
  require the first initial to match the candidate’s first word.  For
  example bb would match bar-baz but not foo-bar-baz.

- =orderless-strict-full-initialism= like strict-initialism but require
  the first initial to match the candidate’s first word and the last
  initial to be at the final word.  For example fbb would match
  foo-bar-baz but not foo-bar-baz-qux.

- =orderless-flex= the characters of the component should appear in that
  order in the candidate, but not necessarily consecutively.  This
  maps abc to a.*b.*c.

  The variable *orderless-matching-styles* can be set to a list of the
  desired matching styles to use. By default it enables the regexp and
  initialism styles.
  
**** marginalia
Marginalia can add annotations to be displayed with the completion
candidates.

There's no need to bind #'marginalia-cycle, not useful.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :hook (after-init . marginalia-mode))
#+END_SRC
    
**** TAB-INSERT corfu
1) ~Use <tab> to insert candidate and quit~::
   #+HEADER: :tangle (if (string= "TAB-INSERT" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (use-package corfu
       :custom
       (corfu-auto t)
       (corfu-cycle t)
       (corfu-auto-delay 0)
       (corfu-auto-prefix 2)
       (tab-always-indent 'complete)
       :custom-face
       (corfu-current ((t (:background "#22282c"))))
       :bind (:map corfu-map
                   ;; ("-" . corfu-insert-separator) ; Configure SPC for separator insertion
                   ("\r" . nil))
       :hook (after-init . global-corfu-mode)
       :config
       (corfu-indexed-mode 1) ; for indexed csndidate selection
       (defun corfu-enable-in-minibuffer ()
         "Enable Corfu in the minibuffer if `completion-at-point' is bound."
         (when (where-is-internal #'completion-at-point (list (current-local-map)))
           ;; (setq-local corfu-auto nil) ; Enable/disable auto completion
           (corfu-mode 1)))
       (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))
   #+end_src

2) ~Use <tab> to select candidate and <return> to quit if necessary~::
   #+HEADER: :tangle (if (string= "TAB-SELECT" (org-get-todo-state)) (concat tangle-dir (car (org-get-outline-path t t))) "no")
   #+begin_src emacs-lisp
     (use-package corfu
       :custom
       (corfu-auto t)
       (corfu-cycle t)
       (corfu-preselect-first nil)
       (corfu-auto-delay 0)
       (corfu-auto-prefix 2)
       (tab-always-indent 'complete)
       :custom-face
       (corfu-current ((t (:background "#22282c"))))
       :bind (:map corfu-map
                   ;; ("-" . corfu-insert-separator) ; Configure SPC for separator insertion
                   ("<tab>" . corfu-next)
                   ("S-<tab>" . corfu-previous)
                   ([remap next-line] . nil)
                   ([remap previous-line] . nil))
       :hook (after-init . global-corfu-mode)
       :config
       (corfu-indexed-mode 1) ; for indexed csndidate selection
       (defun corfu-enable-in-minibuffer ()
         "Enable Corfu in the minibuffer if `completion-at-point' is bound."
         (when (where-is-internal #'completion-at-point (list (current-local-map)))
           ;; (setq-local corfu-auto nil) ; Enable/disable auto completion
           (corfu-mode 1)))
       (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))
   #+end_src

***** COMMENT corfu example
#+begin_example emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
    #+end_example

**** TODO corfu-terminal

**** cape
Cape provides a bunch of Completion At Point Extensions which can be
used in combination with my Corfu completion UI or the default
completion UI.
#+begin_src emacs-lisp
  (use-package cape
    ;; :bind (("M-p p" . completion-at-point) ;; capf
    ;;        ("M-p t" . complete-tag)        ;; etags
    ;;        ("M-p d" . cape-dabbrev)        ;; or dabbrev-completion
    ;;        ("M-p h" . cape-history)
    ;;        ("M-p f" . cape-file)
    ;;        ("M-p k" . cape-keyword)
    ;;        ("M-p s" . cape-symbol)
    ;;        ("M-p a" . cape-abbrev)
    ;;        ("M-p i" . cape-ispell)
    ;;        ("M-p l" . cape-line)
    ;;        ("M-p w" . cape-dict)
    ;;        ("M-p \\" . cape-tex)
    ;;        ("M-p &" . cape-sgml)
    ;;        ("M-p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions #'cape-tex)
    ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
    ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;; (add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
    ;; (add-to-list 'completion-at-point-functions #'cape-dict)
    ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
    ;; (add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src

***** cape examples
#+begin_example emacs-lisp
;; Use Company backends as Capfs.
(setq-local completion-at-point-functions
  (mapcar #'cape-company-to-capf
    (list #'company-files #'company-ispell #'company-dabbrev)))

(defvar emojis
  '((":-D" . "😀")
    (";-)" . "😉")
    (":-/" . "😕")
    (":-(" . "🙁")
    (":-*" . "😙")))

(defun emoji-backend (action &optional arg &rest _)
  (pcase action
    ('prefix (and (memq (char-before) '(?: ?\;))
                  (cons (string (char-before)) t)))
    ('candidates (all-completions arg emojis))
    ('annotation (concat " " (cdr (assoc arg emojis))))
    ('post-completion
     (let ((str (buffer-substring (- (point) 3) (point))))
       (delete-region (- (point) 3) (point))
     (insert (cdr (assoc str emojis)))))))

;; Register emoji backend with `completion-at-point'
(setq completion-at-point-functions
      (list (cape-company-to-capf #'emoji-backend)))

;; Register emoji backend with Company.
(setq company-backends '(emoji-backend))

;; Use the company-dabbrev and company-elisp backends together.
(setq completion-at-point-functions
      (list
       (cape-company-to-capf
        (apply-partially #'company--multi-backend-adapter
                         '(company-dabbrev company-elisp)))))

;; Merge the dabbrev, dict and keyword capfs, display candidates together.
(setq-local completion-at-point-functions
            (list (cape-super-capf #'cape-dabbrev #'cape-dict #'cape-keyword)))

(setq-local completion-at-point-functions
            (list (cape-capf-buster #'some-caching-capf)))
#+end_example

**** consult
Consult provides practical commands based on the Emacs completion
function completing-read.
#+BEGIN_SRC emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ;; ("C-c h" . consult-history)
           ;; ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line

           ("M-s o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-s m" . consult-mark)
           ("M-s k" . consult-global-mark)
           ("M-s i" . consult-imenu)
           ("M-s I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ;; ("M-s d" . consult-find)
           ;; ("M-s D" . consult-locate)
           ;; ("M-s g" . consult-grep)
           ;; ("M-s G" . consult-git-grep)
           ("M-s g" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    ;; The :init configuration is always executed (Not lazy)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)
    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; (setq vertico-multiform-commands
    ;;       '((consult-line buffer)
    ;;         (consult-imenu buffer)
    ;;         (consult-outline buffer)
    ;;         (consult-imenu-multi buffer)
    ;;         (consult-org-heading buffer)
    ;;         (consult-ripgrep buffer)
    ;;         (consult-git-grep buffer)
    ;;         (consult-project-buffer buffer)
    ;;         (consult-project-extra-find buffer)
    ;;         (consult-project-extra-find-other-window buffer)))
    )
#+END_SRC

**** consult extensions
***** consult-dir
Consult-dir allows you to easily insert directory paths into the
minibuffer prompt in Emacs.
#+begin_src emacs-lisp
  (use-package consult-dir
    :bind (:map vertico-map
                ("C-x C-d" . consult-dir)))
#+end_src

**** embark
Embark makes it easy to choose a command to run based on what is near
point, both during a minibuffer completion session and in normal
buffers.
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :custom
    (embark-quit-after-action nil)
    ;; (embark-verbose-indicator-display-action '(display-buffer-in-side-window (side . left))) 
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\*Embark Actions\\*"
                   display-buffer-in-side-window
                   (side . left)
                   (window-parameters (mode-line-format . none)))))
#+END_SRC

Consult users will also want the embark-consult package.
#+BEGIN_SRC emacs-lisp
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

**** COMMENT wgrep
wgrep allows you to edit a grep buffer and apply those changes to the
file buffer like sed interactively.
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :after (consult embark embark-consult)
    :demand
    :custom
    (wgrep-auto-save-buffer t))
#+END_SRC

**** TODO tempel

*** TODO make packages in after-init-hook or defer N
*** TODO direddred

*** TODO crux
Useful additional commands.

*** TODO text-mode

*** TODO COMMENT prog-mode
#+begin_src emacs-lisp

  ;; Prettify Symbols
  ;; `global-prettify-symbols-mode' is provided by prog-mode.el
  (use-package prog-mode
    :ensure nil
    :config (global-prettify-symbols-mode t))

#+end_src

**** TODO flymake | flycheck

**** TODO auto-yasnippets

**** TODO libe-py-plugin

**** TODO format-all
#+begin_src emacs-lisp
  ;; format all, formatter for almost languages
  ;; great for programmers
  (use-package format-all
    :diminish
    :hook (prog-mode . format-all-ensure-formatter)
    :bind ("C-c f" . #'format-all-buffer))
#+end_src

**** TODO move-dup
#+begin_src emacs-lisp
  
;; move-dup, move/copy line or region
(use-package move-dup
  :hook (after-init . global-move-dup-mode))
#+end_src

**** TODO quickrun
#+begin_src emacs-lisp
  (use-package quickrun)
#+end_src

**** TODO eglot
#+begin_src emacs-lisp
  ;; If you don't like eglot/lsp-mode for specific languages, some alternatives are:
  ;; - `java-mode' with `meghanada-mode' & `meghanada-server'
  ;; - `python-mode' with `elpy'

  ;;; Code:

  (use-package eglot
    :hook ((c-mode
            c++-mode
            go-mode
            java-mode
            js-mode
            python-mode
            rust-mode
            web-mode) . eglot-ensure)
    :bind (("C-c e f" . #'eglot-format)
           ("C-c e a" . #'eglot-code-actions)
           ("C-c e i" . #'eglot-code-action-organize-imports)
           ("C-c e q" . #'eglot-code-action-quickfix))
    :config
    ;; (setq eglot-ignored-server-capabilities '(:documentHighlightProvider))
    (add-to-list 'eglot-server-programs '(web-mode "vls"))
    (defun eglot-actions-before-save()
      (add-hook 'before-save-hook
                (lambda ()
                  (call-interactively #'eglot-format)
                  (call-interactively #'eglot-code-action-organize-imports))))
    (add-hook 'eglot--managed-mode-hook #'eglot-actions-before-save))

  (provide 'init-eglot)
#+end_src

*** TODO COMMENT program languages
**** TODO python
from cabin's
#+begin_src emacs-lisp
  ;;;###autoload
  (defun check-run-command (command arg-string)
    "Find the EXEC-FILE and run the BODY."

    (if (not (executable-find command))
        (message "[ERROR]: <%s> not found!" command)
      (save-buffer)
      (shell-command (format "%s %s" command arg-string))
      (revert-buffer t t t)))

  ;; BE CAREFUL! Maybe bugs here, always call this function manually.
  ;;;###autoload
  (defun python-isort ()
    "Sort the imports with isort."
    (interactive)
    (check-run-command "isort"
                       (format "--atomic --profile=black %s"
                               (buffer-file-name))))

  ;; BE CAREFUL! Maybe bugs here, always call this function manually.
  ;;;###autoload
  (defun python-remove-all-unused-imports ()
    "Remove all the unused imports, do NOT use pyimport, as it has bugs.
  eg.from datetime import datetime."
    (interactive)
    (check-run-command "autoflake"
                       (format "-i --remove-all-unused-imports %s"
                               (buffer-file-name))))

  (add-hook
   'python-mode-hook
   (lambda ()
     (define-key python-mode-map (kbd "C-c p s") 'python-isort)
     (define-key python-mode-map (kbd "C-c p r") 'python-remove-all-unused-imports)))

#+end_src
from rational's
#+begin_src emacs-lisp
  ;;; rational-python.el --- python configuration      -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022
  ;; SPDX-License-Identifier: MIT

  ;; Author: System Crafters Community
  ;; Keywords: python

  ;;; Commentary:

  ;; Python development environment configuration.  Several python
  ;; packages can be installed with `pip'. Many of these are needed by
  ;; the Emacs packages used in this configuration.

  ;; * autopep8      -- automatically formats python code to conform to PEP 8 style guide
  ;; * black         -- uncompromising code formatter
  ;; * flake8        -- style guide enforcement
  ;; * importmagic   -- automatically add, remove, manage imports
  ;; * ipython       -- interactive python shell
  ;; * yapf          -- formatter for python code

  ;; Emacs packages to support python development:
  ;; * anaconda      -- code navigation, documentation and completion
  ;; * blacken       -- buffer formatting on save using black
  ;;                    (need to pip install black)
  ;; * eglot         -- language server integration
  ;;                    (need to pip install pyright)
  ;; * numpydoc      -- python doc templates, uses `yasnippets'
  ;; * pythonic      -- utility packages for running python in different
  ;;                    environments (dependency of anaconda)
  ;; * pyvenv        -- virtualenv wrapper

  ;; Suggested additional keybindings for python-mode
  ;; (with-eval-after-load "python"
  ;;   (define-key python-mode-map (kbd "C-c C-n") #'numpydoc-generate)
  ;;   (define-key python-mode-map (kbd "C-c e n") #'flymake-goto-next-error)
  ;;   (define-key python-mode-map (kbd "C-c e p") #'flymake-goto-prev-error))

  ;; Suggested keybindings for pyvenv mode
  ;; (with-eval-after-load "pyvenv"
  ;;   (define-key pyvenv-mode-map (kbd "C-c p a") #'pyvenv-activate)
  ;;   (define-key pyvenv-mode-map (kbd "C-c p d") #'pyvenv-deactivate)
  ;;   (define-key pyvenv-mode-map (kbd "C-c p w") #'pyvenv-workon))

  ;;; Code:

  (rational-package-install-package 'anaconda-mode)
  (rational-package-install-package 'blacken)
  (rational-package-install-package 'eglot)
  (rational-package-install-package 'numpydoc)
  (rational-package-install-package 'pyvenv)

  ;; Hooks
  (add-hook 'python-mode-hook #'anaconda-mode)
  (add-hook 'python-mode-hook #'blacken-mode)
  (add-hook 'python-mode-hook #'eldoc-mode)
  (add-hook 'python-mode-hook #'eglot-ensure)
  (add-hook 'python-mode-hook #'pyvenv-mode)
  (add-hook 'python-mode-hook #'pyvenv-tracking-mode)

  
  ;;; anaconda
  ;; move anaconda python installation directory to
  ;; `rational-config-var-directory'
  (customize-set-variable
   'anaconda-mode-installation-directory
   (expand-file-name "anaconda-mode" rational-config-var-directory))

  ;; for those who use posframe, use it to show docs
  (when (and (package-installed-p 'posframe)
             (featurep 'posframe))
    (customize-set-variable 'anaconda-mode-use-posframe-show-doc t))

  
  ;;; pyvenv
  ;; restart python when the virtual environment changes
  (add-hook 'pyvenv-post-activate-hooks #'pyvenv-restart-python)

  ;; default to the commonly used "venv" folder for the virtual
  ;; environment
  (customize-set-variable 'pyvenv-default-virtual-env-name "venv")

  
  ;;; python mode
  (customize-set-variable 'python-indent-guess-indent-offset-verbose nil)


  
  ;;; numpydoc
  (customize-set-variable 'numpydoc-insert-examples-block nil)
  (customize-set-variable 'numpydoc-template-long nil)

  (provide 'rational-python)
  ;;; rational-python.el ends here
#+end_src

*** COMMENT help systems
**** helpful
Helpful is an alternative to the built-in Emacs help that provides
much more contextual information.
#+begin_src emacs-lisp
  (use-package helpful
    :bind (([remap describe-command] . helpful-command)
           ([remap describe-function] . helpful-callable)
           ([remap describe-key] . helpful-key)
           ([remap describe-symbol] . helpful-symbol)
           ([remap describe-variable] . helpful-variable)
           ("C-h F" . helpful-function)
           ("C-h ." . helpful-at-point)))
#+end_src

**** TODO elisp-demos

**** info
Info-colors, make the info manual as colorful.
#+begin_src emacs-lisp
  (use-package info-colors
    :hook (Info-selection . info-colors-fontify-node))
#+end_src

*** TODO dictionary functions

*** TODO winum | switch-window | ace-window

*** TODO iedit
edit same text in one buffer or region

*** TODO xah-fly-keys | ergoemacs-mode | hydra | meow

*** TODO git gutter & git timemachine


*** TODO dump-jump

*** TODO emmet-mode

*** TODO expand-region & multiple cursors

*** TODO workgroups2

*** TODO posframe

*** TODO fullframe

*** TODO dimmer

*** TODO diredfl & diff-hl

*** TODO scratch

*** TODO expand-region

* COMMENT modes may useful later
** TODO ibuffer-vc
Auto grouping ibuffer contents. Not very useful.

** TODO multi-web-mode | mmm-mode
multi major-mode in one buffer for web development.

* COMMENT backup snippets for future
:PROPERTIES:
:VISIBILITY: folded
:header-args: :tangle no
:header-args+: :results replace
:END:
** /some snippet may be useful/
#+BEGIN_SRC emacs-lisp
  ;; (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  ;; (load custom-file 'noerror 'nomessage)

  ;; (push (expand-file-name "lisp" user-emacs-directory) load-path)
  ;; (push (expand-file-name "elpa" user-emacs-directory) load-path)

#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map
                (kbd "C-c C-x a")
                #'org-attach-dired-to-subtree)))
#+END_SRC

** windmove-mode keybindings (default, delete, display, swap)
default no bindings set, uncomment to apply.
need redesign to use direct keybinding as such functions are very slow.

*** COMMENT windmove-default-keybindings
S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src

*** COMMENT windmove-delete-default-keybindings
C-x S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-delete-default-keybindings)
#+end_src

*** COMMENT windmove-display-default-keybindings
M-S-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-display-default-keybindings)
#+end_src

*** COMMENT windmove-swap-states-default-keybindings
S-s-<up><down><left><right>

#+begin_src emacs-lisp
  (windmove-swap-states-default-keybindings)
#+end_src

** solaire-mode
Solaire-mode is an aesthetic plugin designed to visually distinguish
"real" buffers from "unreal" buffers by giving the latter a slightly
different -- often darker -- background.

*Tried, it's ugly.*

#+begin_src emacs-lisp
  (use-package solaire-mode
    :after doom-themes
    :init (solaire-global-mode))
#+end_src

*** config snippets
#+begin_example emacs-lisp
(dolist (face '(mode-line mode-line-inactive))
  (setf (alist-get face solaire-mode-remap-modeline) nil))

(add-to-list 'solaire-mode-themes-to-face-swap 'doom-vibrant)
(add-to-list 'solaire-mode-themes-to-face-swap "^doom-")
#+end_example

** org-modern
Not like it.
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :init (global-org-modern-mode))
#+end_src
** all-the-icons (the package)
Somehow it just doesn't work.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :demand)
#+end_src

*** all-the-icons-completion
#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (all-the-icons marginalia)
    :hook (markdown-mode . all-the-icons-completion-marginalia-setup))
#+end_src

*** all-the-icons-dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** all-the-icons-ibuffer
#+begin_src emacs-lisp
  (use-package all-the-icons-ibuffer
    :after all-the-icons
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
#+end_src

** whole-line-or-region
Operate on current line if region undefined.
#+begin_src emacs-lisp
  (use-package whole-line-or-region
    :init
    (whole-line-or-region-global-mode)
    ;; (define-key whole-line-or-region-local-mode-map [remap comment-dwim] nil)
    )
#+end_src

** consult-project-extra
Defines an endpoint for accessing different sources related to the
common project workflow.

Not really useful.

#+begin_src emacs-lisp
  (use-package consult-project-extra
    :after consult
    :bind (("C-x p f" . consult-project-extra-find)
           ("C-x p o" . consult-project-extra-find-other-window)))
#+end_src

** kind-icon
Adds configurable icon or text-based completion prefixes based on the
:company-kind property that many completion backends (such as lsp-mode
and Emacs 28's elisp-mode) provide.
#+begin_src emacs-lisp
  (use-package kind-icon
    :after corfu
    :demand
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    (kind-icon-use-icons nil)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

* /buffer functions & variables/
:PROPERTIES:
:VISIBILITY: folded
:header-args: :tangle no
:header-args+: :results replace
:END:
** get the full pathname of *THIS* org init file
When using :var header in code blocks, the tangled code doesn't just replace
text like a MACRO, but use a 'let()' block to set a variable, which is not
what we want.
So we use :noweb as below.

#+NAME: ORG-INIT-FILE
#+begin_src emacs-lisp
  (buffer-file-name)
#+end_src

#+RESULTS: ORG-INIT-FILE
: c:/Users/InnerSea/pyprojs/autohotkey_scripts/emacs-init.org

** confirm the branch-tags for tangling
A branch-tag is a set of TODO-tags indicating certain code blocks
while tangling. This code keeps the tags from disappearing when using
S-<left> or S-<right> to switch code branches.

#+NAME: confirm-branch
#+begin_src emacs-lisp
    (let ((branch-tags nil)
      (tags nil)
      (return nil))
      (defun confirm-branch-tags (new-mark old-mark)
        (setq branch-tags '(("VERBOSE-ON" . "VERBOSE-OFF")
                            ("BASIC" . "SUPER")
                            ("TAB-INSERT" . "TAB-SELECT")))
        (while (and (setq tags (car branch-tags))
                    (not (setq return
                               (cond ((string= old-mark (car tags)) (cdr tags))
                                     ((string= old-mark (cdr tags)) (car tags))))))
          (setq branch-tags (cdr branch-tags)))
        return)

      (add-hook 'org-todo-get-default-hook 'confirm-branch-tags nil t))
#+end_src

#+RESULTS: confirm-branch
| confirm-branch-tags | t |

** /buffer local variables (must be the last)/
# Local Variables:
# org-num-skip-unnumbered: t
# tangle-dir: "C:\\Users\\InnerSea\\emacs.init\\vanilla\\"
# org-confirm-babel-evaluate: nil
# org-todo-keyword-faces: (("TODO" . org-dispatcher-highlight))
# eval: (org-babel-ref-resolve "confirm-branch")
# end:
